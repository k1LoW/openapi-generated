// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package client

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// ListAccount request
	ListAccount(ctx context.Context, params *ListAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccount request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAddress request
	ListAddress(ctx context.Context, accountSid string, params *ListAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAddress request with any body
	CreateAddressWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListDependentPhoneNumber request
	ListDependentPhoneNumber(ctx context.Context, accountSid string, addressSid string, params *ListDependentPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAddress request
	DeleteAddress(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchAddress request
	FetchAddress(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAddress request with any body
	UpdateAddressWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListApplication request
	ListApplication(ctx context.Context, accountSid string, params *ListApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateApplication request with any body
	CreateApplicationWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApplication request
	DeleteApplication(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchApplication request
	FetchApplication(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateApplication request with any body
	UpdateApplicationWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAuthorizedConnectApp request
	ListAuthorizedConnectApp(ctx context.Context, accountSid string, params *ListAuthorizedConnectAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchAuthorizedConnectApp request
	FetchAuthorizedConnectApp(ctx context.Context, accountSid string, connectAppSid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberCountry request
	ListAvailablePhoneNumberCountry(ctx context.Context, accountSid string, params *ListAvailablePhoneNumberCountryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchAvailablePhoneNumberCountry request
	FetchAvailablePhoneNumberCountry(ctx context.Context, accountSid string, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberLocal request
	ListAvailablePhoneNumberLocal(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberMachineToMachine request
	ListAvailablePhoneNumberMachineToMachine(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMachineToMachineParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberMobile request
	ListAvailablePhoneNumberMobile(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberNational request
	ListAvailablePhoneNumberNational(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberNationalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberSharedCost request
	ListAvailablePhoneNumberSharedCost(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberSharedCostParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberTollFree request
	ListAvailablePhoneNumberTollFree(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListAvailablePhoneNumberVoip request
	ListAvailablePhoneNumberVoip(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberVoipParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchBalance request
	FetchBalance(ctx context.Context, accountSid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCall request
	ListCall(ctx context.Context, accountSid string, params *ListCallParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCall request with any body
	CreateCallWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCallFeedbackSummary request with any body
	CreateCallFeedbackSummaryWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallFeedbackSummary request
	DeleteCallFeedbackSummary(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCallFeedbackSummary request
	FetchCallFeedbackSummary(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCallEvent request
	ListCallEvent(ctx context.Context, accountSid string, callSid string, params *ListCallEventParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCallFeedback request
	FetchCallFeedback(ctx context.Context, accountSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCallFeedback request with any body
	UpdateCallFeedbackWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCallNotification request
	ListCallNotification(ctx context.Context, accountSid string, callSid string, params *ListCallNotificationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCallNotification request
	FetchCallNotification(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreatePayments request with any body
	CreatePaymentsWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdatePayments request with any body
	UpdatePaymentsWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListCallRecording request
	ListCallRecording(ctx context.Context, accountSid string, callSid string, params *ListCallRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateCallRecording request with any body
	CreateCallRecordingWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCallRecording request
	DeleteCallRecording(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCallRecording request
	FetchCallRecording(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCallRecording request with any body
	UpdateCallRecordingWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSiprec request with any body
	CreateSiprecWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSiprec request with any body
	UpdateSiprecWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateStream request with any body
	CreateStreamWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateStream request with any body
	UpdateStreamWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteCall request
	DeleteCall(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchCall request
	FetchCall(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateCall request with any body
	UpdateCallWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConference request
	ListConference(ctx context.Context, accountSid string, params *ListConferenceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListParticipant request
	ListParticipant(ctx context.Context, accountSid string, conferenceSid string, params *ListParticipantParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateParticipant request with any body
	CreateParticipantWithBody(ctx context.Context, accountSid string, conferenceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteParticipant request
	DeleteParticipant(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchParticipant request
	FetchParticipant(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateParticipant request with any body
	UpdateParticipantWithBody(ctx context.Context, accountSid string, conferenceSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConferenceRecording request
	ListConferenceRecording(ctx context.Context, accountSid string, conferenceSid string, params *ListConferenceRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConferenceRecording request
	DeleteConferenceRecording(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchConferenceRecording request
	FetchConferenceRecording(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConferenceRecording request with any body
	UpdateConferenceRecordingWithBody(ctx context.Context, accountSid string, conferenceSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchConference request
	FetchConference(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConference request with any body
	UpdateConferenceWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListConnectApp request
	ListConnectApp(ctx context.Context, accountSid string, params *ListConnectAppParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteConnectApp request
	DeleteConnectApp(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchConnectApp request
	FetchConnectApp(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateConnectApp request with any body
	UpdateConnectAppWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncomingPhoneNumber request
	ListIncomingPhoneNumber(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncomingPhoneNumber request with any body
	CreateIncomingPhoneNumberWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncomingPhoneNumberLocal request
	ListIncomingPhoneNumberLocal(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncomingPhoneNumberLocal request with any body
	CreateIncomingPhoneNumberLocalWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncomingPhoneNumberMobile request
	ListIncomingPhoneNumberMobile(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncomingPhoneNumberMobile request with any body
	CreateIncomingPhoneNumberMobileWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncomingPhoneNumberTollFree request
	ListIncomingPhoneNumberTollFree(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncomingPhoneNumberTollFree request with any body
	CreateIncomingPhoneNumberTollFreeWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncomingPhoneNumberAssignedAddOn request
	ListIncomingPhoneNumberAssignedAddOn(ctx context.Context, accountSid string, resourceSid string, params *ListIncomingPhoneNumberAssignedAddOnParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateIncomingPhoneNumberAssignedAddOn request with any body
	CreateIncomingPhoneNumberAssignedAddOnWithBody(ctx context.Context, accountSid string, resourceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListIncomingPhoneNumberAssignedAddOnExtension request
	ListIncomingPhoneNumberAssignedAddOnExtension(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, params *ListIncomingPhoneNumberAssignedAddOnExtensionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchIncomingPhoneNumberAssignedAddOnExtension request
	FetchIncomingPhoneNumberAssignedAddOnExtension(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncomingPhoneNumberAssignedAddOn request
	DeleteIncomingPhoneNumberAssignedAddOn(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchIncomingPhoneNumberAssignedAddOn request
	FetchIncomingPhoneNumberAssignedAddOn(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteIncomingPhoneNumber request
	DeleteIncomingPhoneNumber(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchIncomingPhoneNumber request
	FetchIncomingPhoneNumber(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateIncomingPhoneNumber request with any body
	UpdateIncomingPhoneNumberWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListKey request
	ListKey(ctx context.Context, accountSid string, params *ListKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewKey request with any body
	CreateNewKeyWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteKey request
	DeleteKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchKey request
	FetchKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateKey request with any body
	UpdateKeyWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMessage request
	ListMessage(ctx context.Context, accountSid string, params *ListMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessage request with any body
	CreateMessageWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMessageFeedback request with any body
	CreateMessageFeedbackWithBody(ctx context.Context, accountSid string, messageSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMedia request
	ListMedia(ctx context.Context, accountSid string, messageSid string, params *ListMediaParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMedia request
	DeleteMedia(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchMedia request
	FetchMedia(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMessage request
	DeleteMessage(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchMessage request
	FetchMessage(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMessage request with any body
	UpdateMessageWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListNotification request
	ListNotification(ctx context.Context, accountSid string, params *ListNotificationParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchNotification request
	FetchNotification(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListOutgoingCallerId request
	ListOutgoingCallerId(ctx context.Context, accountSid string, params *ListOutgoingCallerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateValidationRequest request with any body
	CreateValidationRequestWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteOutgoingCallerId request
	DeleteOutgoingCallerId(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchOutgoingCallerId request
	FetchOutgoingCallerId(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateOutgoingCallerId request with any body
	UpdateOutgoingCallerIdWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListQueue request
	ListQueue(ctx context.Context, accountSid string, params *ListQueueParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateQueue request with any body
	CreateQueueWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListMember request
	ListMember(ctx context.Context, accountSid string, queueSid string, params *ListMemberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchMember request
	FetchMember(ctx context.Context, accountSid string, queueSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateMember request with any body
	UpdateMemberWithBody(ctx context.Context, accountSid string, queueSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteQueue request
	DeleteQueue(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchQueue request
	FetchQueue(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateQueue request with any body
	UpdateQueueWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRecording request
	ListRecording(ctx context.Context, accountSid string, params *ListRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRecordingTranscription request
	ListRecordingTranscription(ctx context.Context, accountSid string, recordingSid string, params *ListRecordingTranscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecordingTranscription request
	DeleteRecordingTranscription(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchRecordingTranscription request
	FetchRecordingTranscription(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRecordingAddOnResult request
	ListRecordingAddOnResult(ctx context.Context, accountSid string, referenceSid string, params *ListRecordingAddOnResultParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListRecordingAddOnResultPayload request
	ListRecordingAddOnResultPayload(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, params *ListRecordingAddOnResultPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecordingAddOnResultPayload request
	DeleteRecordingAddOnResultPayload(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchRecordingAddOnResultPayload request
	FetchRecordingAddOnResultPayload(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecordingAddOnResult request
	DeleteRecordingAddOnResult(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchRecordingAddOnResult request
	FetchRecordingAddOnResult(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRecording request
	DeleteRecording(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchRecording request
	FetchRecording(ctx context.Context, accountSid string, sid string, params *FetchRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipCredentialList request
	ListSipCredentialList(ctx context.Context, accountSid string, params *ListSipCredentialListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipCredentialList request with any body
	CreateSipCredentialListWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipCredential request
	ListSipCredential(ctx context.Context, accountSid string, credentialListSid string, params *ListSipCredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipCredential request with any body
	CreateSipCredentialWithBody(ctx context.Context, accountSid string, credentialListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipCredential request
	DeleteSipCredential(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipCredential request
	FetchSipCredential(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSipCredential request with any body
	UpdateSipCredentialWithBody(ctx context.Context, accountSid string, credentialListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipCredentialList request
	DeleteSipCredentialList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipCredentialList request
	FetchSipCredentialList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSipCredentialList request with any body
	UpdateSipCredentialListWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipDomain request
	ListSipDomain(ctx context.Context, accountSid string, params *ListSipDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipDomain request with any body
	CreateSipDomainWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipAuthCallsCredentialListMapping request
	ListSipAuthCallsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipAuthCallsCredentialListMapping request with any body
	CreateSipAuthCallsCredentialListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipAuthCallsCredentialListMapping request
	DeleteSipAuthCallsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipAuthCallsCredentialListMapping request
	FetchSipAuthCallsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipAuthCallsIpAccessControlListMapping request
	ListSipAuthCallsIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipAuthCallsIpAccessControlListMapping request with any body
	CreateSipAuthCallsIpAccessControlListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipAuthCallsIpAccessControlListMapping request
	DeleteSipAuthCallsIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipAuthCallsIpAccessControlListMapping request
	FetchSipAuthCallsIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipAuthRegistrationsCredentialListMapping request
	ListSipAuthRegistrationsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthRegistrationsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipAuthRegistrationsCredentialListMapping request with any body
	CreateSipAuthRegistrationsCredentialListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipAuthRegistrationsCredentialListMapping request
	DeleteSipAuthRegistrationsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipAuthRegistrationsCredentialListMapping request
	FetchSipAuthRegistrationsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipCredentialListMapping request
	ListSipCredentialListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipCredentialListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipCredentialListMapping request with any body
	CreateSipCredentialListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipCredentialListMapping request
	DeleteSipCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipCredentialListMapping request
	FetchSipCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipIpAccessControlListMapping request
	ListSipIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipIpAccessControlListMapping request with any body
	CreateSipIpAccessControlListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipIpAccessControlListMapping request
	DeleteSipIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipIpAccessControlListMapping request
	FetchSipIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipDomain request
	DeleteSipDomain(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipDomain request
	FetchSipDomain(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSipDomain request with any body
	UpdateSipDomainWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipIpAccessControlList request
	ListSipIpAccessControlList(ctx context.Context, accountSid string, params *ListSipIpAccessControlListParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipIpAccessControlList request with any body
	CreateSipIpAccessControlListWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSipIpAddress request
	ListSipIpAddress(ctx context.Context, accountSid string, ipAccessControlListSid string, params *ListSipIpAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateSipIpAddress request with any body
	CreateSipIpAddressWithBody(ctx context.Context, accountSid string, ipAccessControlListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipIpAddress request
	DeleteSipIpAddress(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipIpAddress request
	FetchSipIpAddress(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSipIpAddress request with any body
	UpdateSipIpAddressWithBody(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSipIpAccessControlList request
	DeleteSipIpAccessControlList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSipIpAccessControlList request
	FetchSipIpAccessControlList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSipIpAccessControlList request with any body
	UpdateSipIpAccessControlListWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListShortCode request
	ListShortCode(ctx context.Context, accountSid string, params *ListShortCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchShortCode request
	FetchShortCode(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateShortCode request with any body
	UpdateShortCodeWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListSigningKey request
	ListSigningKey(ctx context.Context, accountSid string, params *ListSigningKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateNewSigningKey request with any body
	CreateNewSigningKeyWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteSigningKey request
	DeleteSigningKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchSigningKey request
	FetchSigningKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateSigningKey request with any body
	UpdateSigningKeyWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateToken request with any body
	CreateTokenWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListTranscription request
	ListTranscription(ctx context.Context, accountSid string, params *ListTranscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTranscription request
	DeleteTranscription(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchTranscription request
	FetchTranscription(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecord request
	ListUsageRecord(ctx context.Context, accountSid string, params *ListUsageRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordAllTime request
	ListUsageRecordAllTime(ctx context.Context, accountSid string, params *ListUsageRecordAllTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordDaily request
	ListUsageRecordDaily(ctx context.Context, accountSid string, params *ListUsageRecordDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordLastMonth request
	ListUsageRecordLastMonth(ctx context.Context, accountSid string, params *ListUsageRecordLastMonthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordMonthly request
	ListUsageRecordMonthly(ctx context.Context, accountSid string, params *ListUsageRecordMonthlyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordThisMonth request
	ListUsageRecordThisMonth(ctx context.Context, accountSid string, params *ListUsageRecordThisMonthParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordToday request
	ListUsageRecordToday(ctx context.Context, accountSid string, params *ListUsageRecordTodayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordYearly request
	ListUsageRecordYearly(ctx context.Context, accountSid string, params *ListUsageRecordYearlyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageRecordYesterday request
	ListUsageRecordYesterday(ctx context.Context, accountSid string, params *ListUsageRecordYesterdayParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ListUsageTrigger request
	ListUsageTrigger(ctx context.Context, accountSid string, params *ListUsageTriggerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateUsageTrigger request with any body
	CreateUsageTriggerWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUsageTrigger request
	DeleteUsageTrigger(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchUsageTrigger request
	FetchUsageTrigger(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateUsageTrigger request with any body
	UpdateUsageTriggerWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	// FetchAccount request
	FetchAccount(ctx context.Context, sid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAccount request with any body
	UpdateAccountWithBody(ctx context.Context, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) ListAccount(ctx context.Context, params *ListAccountParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAccountRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAddress(ctx context.Context, accountSid string, params *ListAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAddressRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAddressWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAddressRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListDependentPhoneNumber(ctx context.Context, accountSid string, addressSid string, params *ListDependentPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListDependentPhoneNumberRequest(c.Server, accountSid, addressSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAddress(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAddressRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchAddress(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchAddressRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAddressWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAddressRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListApplication(ctx context.Context, accountSid string, params *ListApplicationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListApplicationRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateApplicationWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateApplicationRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApplication(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApplicationRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchApplication(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchApplicationRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateApplicationWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateApplicationRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAuthorizedConnectApp(ctx context.Context, accountSid string, params *ListAuthorizedConnectAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAuthorizedConnectAppRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchAuthorizedConnectApp(ctx context.Context, accountSid string, connectAppSid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchAuthorizedConnectAppRequest(c.Server, accountSid, connectAppSid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberCountry(ctx context.Context, accountSid string, params *ListAvailablePhoneNumberCountryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberCountryRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchAvailablePhoneNumberCountry(ctx context.Context, accountSid string, countryCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchAvailablePhoneNumberCountryRequest(c.Server, accountSid, countryCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberLocal(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberLocalRequest(c.Server, accountSid, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberMachineToMachine(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMachineToMachineParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberMachineToMachineRequest(c.Server, accountSid, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberMobile(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberMobileRequest(c.Server, accountSid, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberNational(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberNationalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberNationalRequest(c.Server, accountSid, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberSharedCost(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberSharedCostParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberSharedCostRequest(c.Server, accountSid, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberTollFree(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberTollFreeRequest(c.Server, accountSid, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListAvailablePhoneNumberVoip(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberVoipParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListAvailablePhoneNumberVoipRequest(c.Server, accountSid, countryCode, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchBalance(ctx context.Context, accountSid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchBalanceRequest(c.Server, accountSid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCall(ctx context.Context, accountSid string, params *ListCallParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCallRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCallWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCallRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCallFeedbackSummaryWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCallFeedbackSummaryRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallFeedbackSummary(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallFeedbackSummaryRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCallFeedbackSummary(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCallFeedbackSummaryRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCallEvent(ctx context.Context, accountSid string, callSid string, params *ListCallEventParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCallEventRequest(c.Server, accountSid, callSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCallFeedback(ctx context.Context, accountSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCallFeedbackRequest(c.Server, accountSid, callSid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCallFeedbackWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCallFeedbackRequestWithBody(c.Server, accountSid, callSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCallNotification(ctx context.Context, accountSid string, callSid string, params *ListCallNotificationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCallNotificationRequest(c.Server, accountSid, callSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCallNotification(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCallNotificationRequest(c.Server, accountSid, callSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreatePaymentsWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreatePaymentsRequestWithBody(c.Server, accountSid, callSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdatePaymentsWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdatePaymentsRequestWithBody(c.Server, accountSid, callSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListCallRecording(ctx context.Context, accountSid string, callSid string, params *ListCallRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListCallRecordingRequest(c.Server, accountSid, callSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateCallRecordingWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateCallRecordingRequestWithBody(c.Server, accountSid, callSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCallRecording(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallRecordingRequest(c.Server, accountSid, callSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCallRecording(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCallRecordingRequest(c.Server, accountSid, callSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCallRecordingWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCallRecordingRequestWithBody(c.Server, accountSid, callSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSiprecWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSiprecRequestWithBody(c.Server, accountSid, callSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSiprecWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSiprecRequestWithBody(c.Server, accountSid, callSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateStreamWithBody(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateStreamRequestWithBody(c.Server, accountSid, callSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateStreamWithBody(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateStreamRequestWithBody(c.Server, accountSid, callSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteCall(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteCallRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchCall(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchCallRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateCallWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateCallRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConference(ctx context.Context, accountSid string, params *ListConferenceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConferenceRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListParticipant(ctx context.Context, accountSid string, conferenceSid string, params *ListParticipantParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListParticipantRequest(c.Server, accountSid, conferenceSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateParticipantWithBody(ctx context.Context, accountSid string, conferenceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateParticipantRequestWithBody(c.Server, accountSid, conferenceSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteParticipant(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteParticipantRequest(c.Server, accountSid, conferenceSid, callSid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchParticipant(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchParticipantRequest(c.Server, accountSid, conferenceSid, callSid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateParticipantWithBody(ctx context.Context, accountSid string, conferenceSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateParticipantRequestWithBody(c.Server, accountSid, conferenceSid, callSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConferenceRecording(ctx context.Context, accountSid string, conferenceSid string, params *ListConferenceRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConferenceRecordingRequest(c.Server, accountSid, conferenceSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConferenceRecording(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConferenceRecordingRequest(c.Server, accountSid, conferenceSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchConferenceRecording(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchConferenceRecordingRequest(c.Server, accountSid, conferenceSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConferenceRecordingWithBody(ctx context.Context, accountSid string, conferenceSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConferenceRecordingRequestWithBody(c.Server, accountSid, conferenceSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchConference(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchConferenceRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConferenceWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConferenceRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListConnectApp(ctx context.Context, accountSid string, params *ListConnectAppParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListConnectAppRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteConnectApp(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteConnectAppRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchConnectApp(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchConnectAppRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateConnectAppWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateConnectAppRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncomingPhoneNumber(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncomingPhoneNumberRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncomingPhoneNumberWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncomingPhoneNumberRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncomingPhoneNumberLocal(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncomingPhoneNumberLocalRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncomingPhoneNumberLocalWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncomingPhoneNumberLocalRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncomingPhoneNumberMobile(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncomingPhoneNumberMobileRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncomingPhoneNumberMobileWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncomingPhoneNumberMobileRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncomingPhoneNumberTollFree(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncomingPhoneNumberTollFreeRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncomingPhoneNumberTollFreeWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncomingPhoneNumberTollFreeRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncomingPhoneNumberAssignedAddOn(ctx context.Context, accountSid string, resourceSid string, params *ListIncomingPhoneNumberAssignedAddOnParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncomingPhoneNumberAssignedAddOnRequest(c.Server, accountSid, resourceSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateIncomingPhoneNumberAssignedAddOnWithBody(ctx context.Context, accountSid string, resourceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateIncomingPhoneNumberAssignedAddOnRequestWithBody(c.Server, accountSid, resourceSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListIncomingPhoneNumberAssignedAddOnExtension(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, params *ListIncomingPhoneNumberAssignedAddOnExtensionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListIncomingPhoneNumberAssignedAddOnExtensionRequest(c.Server, accountSid, resourceSid, assignedAddOnSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchIncomingPhoneNumberAssignedAddOnExtension(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchIncomingPhoneNumberAssignedAddOnExtensionRequest(c.Server, accountSid, resourceSid, assignedAddOnSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncomingPhoneNumberAssignedAddOn(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncomingPhoneNumberAssignedAddOnRequest(c.Server, accountSid, resourceSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchIncomingPhoneNumberAssignedAddOn(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchIncomingPhoneNumberAssignedAddOnRequest(c.Server, accountSid, resourceSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteIncomingPhoneNumber(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteIncomingPhoneNumberRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchIncomingPhoneNumber(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchIncomingPhoneNumberRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateIncomingPhoneNumberWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateIncomingPhoneNumberRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListKey(ctx context.Context, accountSid string, params *ListKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListKeyRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewKeyWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewKeyRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteKeyRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchKeyRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateKeyWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateKeyRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMessage(ctx context.Context, accountSid string, params *ListMessageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMessageRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMessageFeedbackWithBody(ctx context.Context, accountSid string, messageSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMessageFeedbackRequestWithBody(c.Server, accountSid, messageSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMedia(ctx context.Context, accountSid string, messageSid string, params *ListMediaParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMediaRequest(c.Server, accountSid, messageSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMedia(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMediaRequest(c.Server, accountSid, messageSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchMedia(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchMediaRequest(c.Server, accountSid, messageSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMessage(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMessageRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchMessage(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchMessageRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMessageWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMessageRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListNotification(ctx context.Context, accountSid string, params *ListNotificationParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListNotificationRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchNotification(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchNotificationRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListOutgoingCallerId(ctx context.Context, accountSid string, params *ListOutgoingCallerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListOutgoingCallerIdRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateValidationRequestWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateValidationRequestRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteOutgoingCallerId(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteOutgoingCallerIdRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchOutgoingCallerId(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchOutgoingCallerIdRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateOutgoingCallerIdWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateOutgoingCallerIdRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListQueue(ctx context.Context, accountSid string, params *ListQueueParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListQueueRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateQueueWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateQueueRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListMember(ctx context.Context, accountSid string, queueSid string, params *ListMemberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListMemberRequest(c.Server, accountSid, queueSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchMember(ctx context.Context, accountSid string, queueSid string, callSid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchMemberRequest(c.Server, accountSid, queueSid, callSid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateMemberWithBody(ctx context.Context, accountSid string, queueSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateMemberRequestWithBody(c.Server, accountSid, queueSid, callSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteQueue(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteQueueRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchQueue(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchQueueRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateQueueWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateQueueRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRecording(ctx context.Context, accountSid string, params *ListRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRecordingRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRecordingTranscription(ctx context.Context, accountSid string, recordingSid string, params *ListRecordingTranscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRecordingTranscriptionRequest(c.Server, accountSid, recordingSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecordingTranscription(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingTranscriptionRequest(c.Server, accountSid, recordingSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchRecordingTranscription(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchRecordingTranscriptionRequest(c.Server, accountSid, recordingSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRecordingAddOnResult(ctx context.Context, accountSid string, referenceSid string, params *ListRecordingAddOnResultParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRecordingAddOnResultRequest(c.Server, accountSid, referenceSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListRecordingAddOnResultPayload(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, params *ListRecordingAddOnResultPayloadParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListRecordingAddOnResultPayloadRequest(c.Server, accountSid, referenceSid, addOnResultSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecordingAddOnResultPayload(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingAddOnResultPayloadRequest(c.Server, accountSid, referenceSid, addOnResultSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchRecordingAddOnResultPayload(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchRecordingAddOnResultPayloadRequest(c.Server, accountSid, referenceSid, addOnResultSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecordingAddOnResult(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingAddOnResultRequest(c.Server, accountSid, referenceSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchRecordingAddOnResult(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchRecordingAddOnResultRequest(c.Server, accountSid, referenceSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRecording(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRecordingRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchRecording(ctx context.Context, accountSid string, sid string, params *FetchRecordingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchRecordingRequest(c.Server, accountSid, sid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipCredentialList(ctx context.Context, accountSid string, params *ListSipCredentialListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipCredentialListRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipCredentialListWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipCredentialListRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipCredential(ctx context.Context, accountSid string, credentialListSid string, params *ListSipCredentialParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipCredentialRequest(c.Server, accountSid, credentialListSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipCredentialWithBody(ctx context.Context, accountSid string, credentialListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipCredentialRequestWithBody(c.Server, accountSid, credentialListSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipCredential(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipCredentialRequest(c.Server, accountSid, credentialListSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipCredential(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipCredentialRequest(c.Server, accountSid, credentialListSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSipCredentialWithBody(ctx context.Context, accountSid string, credentialListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSipCredentialRequestWithBody(c.Server, accountSid, credentialListSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipCredentialList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipCredentialListRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipCredentialList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipCredentialListRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSipCredentialListWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSipCredentialListRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipDomain(ctx context.Context, accountSid string, params *ListSipDomainParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipDomainRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipDomainWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipDomainRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipAuthCallsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipAuthCallsCredentialListMappingRequest(c.Server, accountSid, domainSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipAuthCallsCredentialListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipAuthCallsCredentialListMappingRequestWithBody(c.Server, accountSid, domainSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipAuthCallsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipAuthCallsCredentialListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipAuthCallsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipAuthCallsCredentialListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipAuthCallsIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipAuthCallsIpAccessControlListMappingRequest(c.Server, accountSid, domainSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipAuthCallsIpAccessControlListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipAuthCallsIpAccessControlListMappingRequestWithBody(c.Server, accountSid, domainSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipAuthCallsIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipAuthCallsIpAccessControlListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipAuthCallsIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipAuthCallsIpAccessControlListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipAuthRegistrationsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthRegistrationsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipAuthRegistrationsCredentialListMappingRequest(c.Server, accountSid, domainSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipAuthRegistrationsCredentialListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipAuthRegistrationsCredentialListMappingRequestWithBody(c.Server, accountSid, domainSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipAuthRegistrationsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipAuthRegistrationsCredentialListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipAuthRegistrationsCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipAuthRegistrationsCredentialListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipCredentialListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipCredentialListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipCredentialListMappingRequest(c.Server, accountSid, domainSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipCredentialListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipCredentialListMappingRequestWithBody(c.Server, accountSid, domainSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipCredentialListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipCredentialListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipCredentialListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, params *ListSipIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipIpAccessControlListMappingRequest(c.Server, accountSid, domainSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipIpAccessControlListMappingWithBody(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipIpAccessControlListMappingRequestWithBody(c.Server, accountSid, domainSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipIpAccessControlListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipIpAccessControlListMapping(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipIpAccessControlListMappingRequest(c.Server, accountSid, domainSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipDomain(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipDomainRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipDomain(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipDomainRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSipDomainWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSipDomainRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipIpAccessControlList(ctx context.Context, accountSid string, params *ListSipIpAccessControlListParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipIpAccessControlListRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipIpAccessControlListWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipIpAccessControlListRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSipIpAddress(ctx context.Context, accountSid string, ipAccessControlListSid string, params *ListSipIpAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSipIpAddressRequest(c.Server, accountSid, ipAccessControlListSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateSipIpAddressWithBody(ctx context.Context, accountSid string, ipAccessControlListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateSipIpAddressRequestWithBody(c.Server, accountSid, ipAccessControlListSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipIpAddress(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipIpAddressRequest(c.Server, accountSid, ipAccessControlListSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipIpAddress(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipIpAddressRequest(c.Server, accountSid, ipAccessControlListSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSipIpAddressWithBody(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSipIpAddressRequestWithBody(c.Server, accountSid, ipAccessControlListSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSipIpAccessControlList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSipIpAccessControlListRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSipIpAccessControlList(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSipIpAccessControlListRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSipIpAccessControlListWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSipIpAccessControlListRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListShortCode(ctx context.Context, accountSid string, params *ListShortCodeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListShortCodeRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchShortCode(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchShortCodeRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateShortCodeWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateShortCodeRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListSigningKey(ctx context.Context, accountSid string, params *ListSigningKeyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListSigningKeyRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateNewSigningKeyWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateNewSigningKeyRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteSigningKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteSigningKeyRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchSigningKey(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchSigningKeyRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateSigningKeyWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateSigningKeyRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTokenWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTokenRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListTranscription(ctx context.Context, accountSid string, params *ListTranscriptionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListTranscriptionRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTranscription(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTranscriptionRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchTranscription(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchTranscriptionRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecord(ctx context.Context, accountSid string, params *ListUsageRecordParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordAllTime(ctx context.Context, accountSid string, params *ListUsageRecordAllTimeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordAllTimeRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordDaily(ctx context.Context, accountSid string, params *ListUsageRecordDailyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordDailyRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordLastMonth(ctx context.Context, accountSid string, params *ListUsageRecordLastMonthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordLastMonthRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordMonthly(ctx context.Context, accountSid string, params *ListUsageRecordMonthlyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordMonthlyRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordThisMonth(ctx context.Context, accountSid string, params *ListUsageRecordThisMonthParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordThisMonthRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordToday(ctx context.Context, accountSid string, params *ListUsageRecordTodayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordTodayRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordYearly(ctx context.Context, accountSid string, params *ListUsageRecordYearlyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordYearlyRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageRecordYesterday(ctx context.Context, accountSid string, params *ListUsageRecordYesterdayParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageRecordYesterdayRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ListUsageTrigger(ctx context.Context, accountSid string, params *ListUsageTriggerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewListUsageTriggerRequest(c.Server, accountSid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateUsageTriggerWithBody(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateUsageTriggerRequestWithBody(c.Server, accountSid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUsageTrigger(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUsageTriggerRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchUsageTrigger(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchUsageTriggerRequest(c.Server, accountSid, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateUsageTriggerWithBody(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateUsageTriggerRequestWithBody(c.Server, accountSid, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) FetchAccount(ctx context.Context, sid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewFetchAccountRequest(c.Server, sid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAccountWithBody(ctx context.Context, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAccountRequestWithBody(c.Server, sid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewListAccountRequest generates requests for ListAccount
func NewListAccountRequest(server string, params *ListAccountParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts.json")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAddressRequest generates requests for ListAddress
func NewListAddressRequest(server string, accountSid string, params *ListAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Addresses.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.CustomerName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CustomerName", runtime.ParamLocationQuery, *params.CustomerName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IsoCountry != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IsoCountry", runtime.ParamLocationQuery, *params.IsoCountry); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAddressRequestWithBody generates requests for CreateAddress with any type of body
func NewCreateAddressRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Addresses.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListDependentPhoneNumberRequest generates requests for ListDependentPhoneNumber
func NewListDependentPhoneNumberRequest(server string, accountSid string, addressSid string, params *ListDependentPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "AddressSid", runtime.ParamLocationPath, addressSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Addresses/%s/DependentPhoneNumbers.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAddressRequest generates requests for DeleteAddress
func NewDeleteAddressRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Addresses/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchAddressRequest generates requests for FetchAddress
func NewFetchAddressRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Addresses/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAddressRequestWithBody generates requests for UpdateAddress with any type of body
func NewUpdateAddressRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Addresses/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListApplicationRequest generates requests for ListApplication
func NewListApplicationRequest(server string, accountSid string, params *ListApplicationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Applications.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateApplicationRequestWithBody generates requests for CreateApplication with any type of body
func NewCreateApplicationRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Applications.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApplicationRequest generates requests for DeleteApplication
func NewDeleteApplicationRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Applications/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchApplicationRequest generates requests for FetchApplication
func NewFetchApplicationRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Applications/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateApplicationRequestWithBody generates requests for UpdateApplication with any type of body
func NewUpdateApplicationRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Applications/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListAuthorizedConnectAppRequest generates requests for ListAuthorizedConnectApp
func NewListAuthorizedConnectAppRequest(server string, accountSid string, params *ListAuthorizedConnectAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AuthorizedConnectApps.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchAuthorizedConnectAppRequest generates requests for FetchAuthorizedConnectApp
func NewFetchAuthorizedConnectAppRequest(server string, accountSid string, connectAppSid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConnectAppSid", runtime.ParamLocationPath, connectAppSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AuthorizedConnectApps/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberCountryRequest generates requests for ListAvailablePhoneNumberCountry
func NewListAvailablePhoneNumberCountryRequest(server string, accountSid string, params *ListAvailablePhoneNumberCountryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchAvailablePhoneNumberCountryRequest generates requests for FetchAvailablePhoneNumberCountry
func NewFetchAvailablePhoneNumberCountryRequest(server string, accountSid string, countryCode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberLocalRequest generates requests for ListAvailablePhoneNumberLocal
func NewListAvailablePhoneNumberLocalRequest(server string, accountSid string, countryCode string, params *ListAvailablePhoneNumberLocalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s/Local.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AreaCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AreaCode", runtime.ParamLocationQuery, *params.AreaCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SmsEnabled", runtime.ParamLocationQuery, *params.SmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MmsEnabled", runtime.ParamLocationQuery, *params.MmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VoiceEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VoiceEnabled", runtime.ParamLocationQuery, *params.VoiceEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeAllAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeAllAddressRequired", runtime.ParamLocationQuery, *params.ExcludeAllAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeLocalAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeLocalAddressRequired", runtime.ParamLocationQuery, *params.ExcludeLocalAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeForeignAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeForeignAddressRequired", runtime.ParamLocationQuery, *params.ExcludeForeignAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearNumber", runtime.ParamLocationQuery, *params.NearNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearLatLong != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearLatLong", runtime.ParamLocationQuery, *params.NearLatLong); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Distance", runtime.ParamLocationQuery, *params.Distance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InPostalCode", runtime.ParamLocationQuery, *params.InPostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRegion", runtime.ParamLocationQuery, *params.InRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRateCenter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRateCenter", runtime.ParamLocationQuery, *params.InRateCenter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLata", runtime.ParamLocationQuery, *params.InLata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLocality != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLocality", runtime.ParamLocationQuery, *params.InLocality); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FaxEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FaxEnabled", runtime.ParamLocationQuery, *params.FaxEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberMachineToMachineRequest generates requests for ListAvailablePhoneNumberMachineToMachine
func NewListAvailablePhoneNumberMachineToMachineRequest(server string, accountSid string, countryCode string, params *ListAvailablePhoneNumberMachineToMachineParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s/MachineToMachine.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AreaCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AreaCode", runtime.ParamLocationQuery, *params.AreaCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SmsEnabled", runtime.ParamLocationQuery, *params.SmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MmsEnabled", runtime.ParamLocationQuery, *params.MmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VoiceEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VoiceEnabled", runtime.ParamLocationQuery, *params.VoiceEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeAllAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeAllAddressRequired", runtime.ParamLocationQuery, *params.ExcludeAllAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeLocalAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeLocalAddressRequired", runtime.ParamLocationQuery, *params.ExcludeLocalAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeForeignAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeForeignAddressRequired", runtime.ParamLocationQuery, *params.ExcludeForeignAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearNumber", runtime.ParamLocationQuery, *params.NearNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearLatLong != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearLatLong", runtime.ParamLocationQuery, *params.NearLatLong); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Distance", runtime.ParamLocationQuery, *params.Distance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InPostalCode", runtime.ParamLocationQuery, *params.InPostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRegion", runtime.ParamLocationQuery, *params.InRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRateCenter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRateCenter", runtime.ParamLocationQuery, *params.InRateCenter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLata", runtime.ParamLocationQuery, *params.InLata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLocality != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLocality", runtime.ParamLocationQuery, *params.InLocality); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FaxEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FaxEnabled", runtime.ParamLocationQuery, *params.FaxEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberMobileRequest generates requests for ListAvailablePhoneNumberMobile
func NewListAvailablePhoneNumberMobileRequest(server string, accountSid string, countryCode string, params *ListAvailablePhoneNumberMobileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s/Mobile.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AreaCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AreaCode", runtime.ParamLocationQuery, *params.AreaCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SmsEnabled", runtime.ParamLocationQuery, *params.SmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MmsEnabled", runtime.ParamLocationQuery, *params.MmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VoiceEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VoiceEnabled", runtime.ParamLocationQuery, *params.VoiceEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeAllAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeAllAddressRequired", runtime.ParamLocationQuery, *params.ExcludeAllAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeLocalAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeLocalAddressRequired", runtime.ParamLocationQuery, *params.ExcludeLocalAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeForeignAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeForeignAddressRequired", runtime.ParamLocationQuery, *params.ExcludeForeignAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearNumber", runtime.ParamLocationQuery, *params.NearNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearLatLong != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearLatLong", runtime.ParamLocationQuery, *params.NearLatLong); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Distance", runtime.ParamLocationQuery, *params.Distance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InPostalCode", runtime.ParamLocationQuery, *params.InPostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRegion", runtime.ParamLocationQuery, *params.InRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRateCenter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRateCenter", runtime.ParamLocationQuery, *params.InRateCenter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLata", runtime.ParamLocationQuery, *params.InLata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLocality != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLocality", runtime.ParamLocationQuery, *params.InLocality); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FaxEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FaxEnabled", runtime.ParamLocationQuery, *params.FaxEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberNationalRequest generates requests for ListAvailablePhoneNumberNational
func NewListAvailablePhoneNumberNationalRequest(server string, accountSid string, countryCode string, params *ListAvailablePhoneNumberNationalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s/National.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AreaCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AreaCode", runtime.ParamLocationQuery, *params.AreaCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SmsEnabled", runtime.ParamLocationQuery, *params.SmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MmsEnabled", runtime.ParamLocationQuery, *params.MmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VoiceEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VoiceEnabled", runtime.ParamLocationQuery, *params.VoiceEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeAllAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeAllAddressRequired", runtime.ParamLocationQuery, *params.ExcludeAllAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeLocalAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeLocalAddressRequired", runtime.ParamLocationQuery, *params.ExcludeLocalAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeForeignAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeForeignAddressRequired", runtime.ParamLocationQuery, *params.ExcludeForeignAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearNumber", runtime.ParamLocationQuery, *params.NearNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearLatLong != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearLatLong", runtime.ParamLocationQuery, *params.NearLatLong); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Distance", runtime.ParamLocationQuery, *params.Distance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InPostalCode", runtime.ParamLocationQuery, *params.InPostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRegion", runtime.ParamLocationQuery, *params.InRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRateCenter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRateCenter", runtime.ParamLocationQuery, *params.InRateCenter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLata", runtime.ParamLocationQuery, *params.InLata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLocality != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLocality", runtime.ParamLocationQuery, *params.InLocality); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FaxEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FaxEnabled", runtime.ParamLocationQuery, *params.FaxEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberSharedCostRequest generates requests for ListAvailablePhoneNumberSharedCost
func NewListAvailablePhoneNumberSharedCostRequest(server string, accountSid string, countryCode string, params *ListAvailablePhoneNumberSharedCostParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s/SharedCost.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AreaCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AreaCode", runtime.ParamLocationQuery, *params.AreaCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SmsEnabled", runtime.ParamLocationQuery, *params.SmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MmsEnabled", runtime.ParamLocationQuery, *params.MmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VoiceEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VoiceEnabled", runtime.ParamLocationQuery, *params.VoiceEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeAllAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeAllAddressRequired", runtime.ParamLocationQuery, *params.ExcludeAllAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeLocalAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeLocalAddressRequired", runtime.ParamLocationQuery, *params.ExcludeLocalAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeForeignAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeForeignAddressRequired", runtime.ParamLocationQuery, *params.ExcludeForeignAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearNumber", runtime.ParamLocationQuery, *params.NearNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearLatLong != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearLatLong", runtime.ParamLocationQuery, *params.NearLatLong); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Distance", runtime.ParamLocationQuery, *params.Distance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InPostalCode", runtime.ParamLocationQuery, *params.InPostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRegion", runtime.ParamLocationQuery, *params.InRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRateCenter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRateCenter", runtime.ParamLocationQuery, *params.InRateCenter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLata", runtime.ParamLocationQuery, *params.InLata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLocality != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLocality", runtime.ParamLocationQuery, *params.InLocality); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FaxEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FaxEnabled", runtime.ParamLocationQuery, *params.FaxEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberTollFreeRequest generates requests for ListAvailablePhoneNumberTollFree
func NewListAvailablePhoneNumberTollFreeRequest(server string, accountSid string, countryCode string, params *ListAvailablePhoneNumberTollFreeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s/TollFree.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AreaCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AreaCode", runtime.ParamLocationQuery, *params.AreaCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SmsEnabled", runtime.ParamLocationQuery, *params.SmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MmsEnabled", runtime.ParamLocationQuery, *params.MmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VoiceEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VoiceEnabled", runtime.ParamLocationQuery, *params.VoiceEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeAllAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeAllAddressRequired", runtime.ParamLocationQuery, *params.ExcludeAllAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeLocalAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeLocalAddressRequired", runtime.ParamLocationQuery, *params.ExcludeLocalAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeForeignAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeForeignAddressRequired", runtime.ParamLocationQuery, *params.ExcludeForeignAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearNumber", runtime.ParamLocationQuery, *params.NearNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearLatLong != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearLatLong", runtime.ParamLocationQuery, *params.NearLatLong); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Distance", runtime.ParamLocationQuery, *params.Distance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InPostalCode", runtime.ParamLocationQuery, *params.InPostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRegion", runtime.ParamLocationQuery, *params.InRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRateCenter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRateCenter", runtime.ParamLocationQuery, *params.InRateCenter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLata", runtime.ParamLocationQuery, *params.InLata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLocality != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLocality", runtime.ParamLocationQuery, *params.InLocality); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FaxEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FaxEnabled", runtime.ParamLocationQuery, *params.FaxEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListAvailablePhoneNumberVoipRequest generates requests for ListAvailablePhoneNumberVoip
func NewListAvailablePhoneNumberVoipRequest(server string, accountSid string, countryCode string, params *ListAvailablePhoneNumberVoipParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, countryCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/AvailablePhoneNumbers/%s/Voip.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.AreaCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "AreaCode", runtime.ParamLocationQuery, *params.AreaCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Contains != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Contains", runtime.ParamLocationQuery, *params.Contains); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "SmsEnabled", runtime.ParamLocationQuery, *params.SmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MmsEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MmsEnabled", runtime.ParamLocationQuery, *params.MmsEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.VoiceEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "VoiceEnabled", runtime.ParamLocationQuery, *params.VoiceEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeAllAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeAllAddressRequired", runtime.ParamLocationQuery, *params.ExcludeAllAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeLocalAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeLocalAddressRequired", runtime.ParamLocationQuery, *params.ExcludeLocalAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ExcludeForeignAddressRequired != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ExcludeForeignAddressRequired", runtime.ParamLocationQuery, *params.ExcludeForeignAddressRequired); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearNumber", runtime.ParamLocationQuery, *params.NearNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.NearLatLong != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "NearLatLong", runtime.ParamLocationQuery, *params.NearLatLong); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Distance != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Distance", runtime.ParamLocationQuery, *params.Distance); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InPostalCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InPostalCode", runtime.ParamLocationQuery, *params.InPostalCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRegion != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRegion", runtime.ParamLocationQuery, *params.InRegion); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InRateCenter != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InRateCenter", runtime.ParamLocationQuery, *params.InRateCenter); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLata != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLata", runtime.ParamLocationQuery, *params.InLata); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.InLocality != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "InLocality", runtime.ParamLocationQuery, *params.InLocality); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FaxEnabled != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FaxEnabled", runtime.ParamLocationQuery, *params.FaxEnabled); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchBalanceRequest generates requests for FetchBalance
func NewFetchBalanceRequest(server string, accountSid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Balance.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCallRequest generates requests for ListCall
func NewListCallRequest(server string, accountSid string, params *ListCallParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "To", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "From", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ParentCallSid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ParentCallSid", runtime.ParamLocationQuery, *params.ParentCallSid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartTime<", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartTime>", runtime.ParamLocationQuery, *params.StartTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndTime", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndTime<", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndTime != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndTime>", runtime.ParamLocationQuery, *params.EndTime); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCallRequestWithBody generates requests for CreateCall with any type of body
func NewCreateCallRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateCallFeedbackSummaryRequestWithBody generates requests for CreateCallFeedbackSummary with any type of body
func NewCreateCallFeedbackSummaryRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/FeedbackSummary.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCallFeedbackSummaryRequest generates requests for DeleteCallFeedbackSummary
func NewDeleteCallFeedbackSummaryRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/FeedbackSummary/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCallFeedbackSummaryRequest generates requests for FetchCallFeedbackSummary
func NewFetchCallFeedbackSummaryRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/FeedbackSummary/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListCallEventRequest generates requests for ListCallEvent
func NewListCallEventRequest(server string, accountSid string, callSid string, params *ListCallEventParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Events.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCallFeedbackRequest generates requests for FetchCallFeedback
func NewFetchCallFeedbackRequest(server string, accountSid string, callSid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Feedback.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCallFeedbackRequestWithBody generates requests for UpdateCallFeedback with any type of body
func NewUpdateCallFeedbackRequestWithBody(server string, accountSid string, callSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Feedback.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCallNotificationRequest generates requests for ListCallNotification
func NewListCallNotificationRequest(server string, accountSid string, callSid string, params *ListCallNotificationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Notifications.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Log != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Log", runtime.ParamLocationQuery, *params.Log); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MessageDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MessageDate", runtime.ParamLocationQuery, *params.MessageDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MessageDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MessageDate<", runtime.ParamLocationQuery, *params.MessageDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MessageDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MessageDate>", runtime.ParamLocationQuery, *params.MessageDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCallNotificationRequest generates requests for FetchCallNotification
func NewFetchCallNotificationRequest(server string, accountSid string, callSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Notifications/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreatePaymentsRequestWithBody generates requests for CreatePayments with any type of body
func NewCreatePaymentsRequestWithBody(server string, accountSid string, callSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Payments.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdatePaymentsRequestWithBody generates requests for UpdatePayments with any type of body
func NewUpdatePaymentsRequestWithBody(server string, accountSid string, callSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Payments/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListCallRecordingRequest generates requests for ListCallRecording
func NewListCallRecordingRequest(server string, accountSid string, callSid string, params *ListCallRecordingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Recordings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated<", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated>", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateCallRecordingRequestWithBody generates requests for CreateCallRecording with any type of body
func NewCreateCallRecordingRequestWithBody(server string, accountSid string, callSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Recordings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCallRecordingRequest generates requests for DeleteCallRecording
func NewDeleteCallRecordingRequest(server string, accountSid string, callSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Recordings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCallRecordingRequest generates requests for FetchCallRecording
func NewFetchCallRecordingRequest(server string, accountSid string, callSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Recordings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCallRecordingRequestWithBody generates requests for UpdateCallRecording with any type of body
func NewUpdateCallRecordingRequestWithBody(server string, accountSid string, callSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Recordings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateSiprecRequestWithBody generates requests for CreateSiprec with any type of body
func NewCreateSiprecRequestWithBody(server string, accountSid string, callSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Siprec.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateSiprecRequestWithBody generates requests for UpdateSiprec with any type of body
func NewUpdateSiprecRequestWithBody(server string, accountSid string, callSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Siprec/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateStreamRequestWithBody generates requests for CreateStream with any type of body
func NewCreateStreamRequestWithBody(server string, accountSid string, callSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Streams.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewUpdateStreamRequestWithBody generates requests for UpdateStream with any type of body
func NewUpdateStreamRequestWithBody(server string, accountSid string, callSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s/Streams/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteCallRequest generates requests for DeleteCall
func NewDeleteCallRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchCallRequest generates requests for FetchCall
func NewFetchCallRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateCallRequestWithBody generates requests for UpdateCall with any type of body
func NewUpdateCallRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Calls/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConferenceRequest generates requests for ListConference
func NewListConferenceRequest(server string, accountSid string, params *ListConferenceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated<", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated>", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateUpdated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateUpdated", runtime.ParamLocationQuery, *params.DateUpdated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateUpdated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateUpdated<", runtime.ParamLocationQuery, *params.DateUpdated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateUpdated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateUpdated>", runtime.ParamLocationQuery, *params.DateUpdated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Status != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Status", runtime.ParamLocationQuery, *params.Status); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListParticipantRequest generates requests for ListParticipant
func NewListParticipantRequest(server string, accountSid string, conferenceSid string, params *ListParticipantParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Participants.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Muted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Muted", runtime.ParamLocationQuery, *params.Muted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Hold != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Hold", runtime.ParamLocationQuery, *params.Hold); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Coaching != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Coaching", runtime.ParamLocationQuery, *params.Coaching); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateParticipantRequestWithBody generates requests for CreateParticipant with any type of body
func NewCreateParticipantRequestWithBody(server string, accountSid string, conferenceSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Participants.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteParticipantRequest generates requests for DeleteParticipant
func NewDeleteParticipantRequest(server string, accountSid string, conferenceSid string, callSid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Participants/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchParticipantRequest generates requests for FetchParticipant
func NewFetchParticipantRequest(server string, accountSid string, conferenceSid string, callSid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Participants/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateParticipantRequestWithBody generates requests for UpdateParticipant with any type of body
func NewUpdateParticipantRequestWithBody(server string, accountSid string, conferenceSid string, callSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Participants/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConferenceRecordingRequest generates requests for ListConferenceRecording
func NewListConferenceRecordingRequest(server string, accountSid string, conferenceSid string, params *ListConferenceRecordingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Recordings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated<", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated>", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConferenceRecordingRequest generates requests for DeleteConferenceRecording
func NewDeleteConferenceRecordingRequest(server string, accountSid string, conferenceSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Recordings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchConferenceRecordingRequest generates requests for FetchConferenceRecording
func NewFetchConferenceRecordingRequest(server string, accountSid string, conferenceSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Recordings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConferenceRecordingRequestWithBody generates requests for UpdateConferenceRecording with any type of body
func NewUpdateConferenceRecordingRequestWithBody(server string, accountSid string, conferenceSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, conferenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s/Recordings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFetchConferenceRequest generates requests for FetchConference
func NewFetchConferenceRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConferenceRequestWithBody generates requests for UpdateConference with any type of body
func NewUpdateConferenceRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Conferences/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListConnectAppRequest generates requests for ListConnectApp
func NewListConnectAppRequest(server string, accountSid string, params *ListConnectAppParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/ConnectApps.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteConnectAppRequest generates requests for DeleteConnectApp
func NewDeleteConnectAppRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/ConnectApps/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchConnectAppRequest generates requests for FetchConnectApp
func NewFetchConnectAppRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/ConnectApps/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateConnectAppRequestWithBody generates requests for UpdateConnectApp with any type of body
func NewUpdateConnectAppRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/ConnectApps/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncomingPhoneNumberRequest generates requests for ListIncomingPhoneNumber
func NewListIncomingPhoneNumberRequest(server string, accountSid string, params *ListIncomingPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PhoneNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PhoneNumber", runtime.ParamLocationQuery, *params.PhoneNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Origin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncomingPhoneNumberRequestWithBody generates requests for CreateIncomingPhoneNumber with any type of body
func NewCreateIncomingPhoneNumberRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncomingPhoneNumberLocalRequest generates requests for ListIncomingPhoneNumberLocal
func NewListIncomingPhoneNumberLocalRequest(server string, accountSid string, params *ListIncomingPhoneNumberLocalParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/Local.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PhoneNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PhoneNumber", runtime.ParamLocationQuery, *params.PhoneNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Origin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncomingPhoneNumberLocalRequestWithBody generates requests for CreateIncomingPhoneNumberLocal with any type of body
func NewCreateIncomingPhoneNumberLocalRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/Local.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncomingPhoneNumberMobileRequest generates requests for ListIncomingPhoneNumberMobile
func NewListIncomingPhoneNumberMobileRequest(server string, accountSid string, params *ListIncomingPhoneNumberMobileParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/Mobile.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PhoneNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PhoneNumber", runtime.ParamLocationQuery, *params.PhoneNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Origin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncomingPhoneNumberMobileRequestWithBody generates requests for CreateIncomingPhoneNumberMobile with any type of body
func NewCreateIncomingPhoneNumberMobileRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/Mobile.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncomingPhoneNumberTollFreeRequest generates requests for ListIncomingPhoneNumberTollFree
func NewListIncomingPhoneNumberTollFreeRequest(server string, accountSid string, params *ListIncomingPhoneNumberTollFreeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/TollFree.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Beta != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Beta", runtime.ParamLocationQuery, *params.Beta); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PhoneNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PhoneNumber", runtime.ParamLocationQuery, *params.PhoneNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Origin != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Origin", runtime.ParamLocationQuery, *params.Origin); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncomingPhoneNumberTollFreeRequestWithBody generates requests for CreateIncomingPhoneNumberTollFree with any type of body
func NewCreateIncomingPhoneNumberTollFreeRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/TollFree.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncomingPhoneNumberAssignedAddOnRequest generates requests for ListIncomingPhoneNumberAssignedAddOn
func NewListIncomingPhoneNumberAssignedAddOnRequest(server string, accountSid string, resourceSid string, params *ListIncomingPhoneNumberAssignedAddOnParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, resourceSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s/AssignedAddOns.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateIncomingPhoneNumberAssignedAddOnRequestWithBody generates requests for CreateIncomingPhoneNumberAssignedAddOn with any type of body
func NewCreateIncomingPhoneNumberAssignedAddOnRequestWithBody(server string, accountSid string, resourceSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, resourceSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s/AssignedAddOns.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListIncomingPhoneNumberAssignedAddOnExtensionRequest generates requests for ListIncomingPhoneNumberAssignedAddOnExtension
func NewListIncomingPhoneNumberAssignedAddOnExtensionRequest(server string, accountSid string, resourceSid string, assignedAddOnSid string, params *ListIncomingPhoneNumberAssignedAddOnExtensionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, resourceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "AssignedAddOnSid", runtime.ParamLocationPath, assignedAddOnSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s/AssignedAddOns/%s/Extensions.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchIncomingPhoneNumberAssignedAddOnExtensionRequest generates requests for FetchIncomingPhoneNumberAssignedAddOnExtension
func NewFetchIncomingPhoneNumberAssignedAddOnExtensionRequest(server string, accountSid string, resourceSid string, assignedAddOnSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, resourceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "AssignedAddOnSid", runtime.ParamLocationPath, assignedAddOnSid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s/AssignedAddOns/%s/Extensions/%s.json", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncomingPhoneNumberAssignedAddOnRequest generates requests for DeleteIncomingPhoneNumberAssignedAddOn
func NewDeleteIncomingPhoneNumberAssignedAddOnRequest(server string, accountSid string, resourceSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, resourceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s/AssignedAddOns/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchIncomingPhoneNumberAssignedAddOnRequest generates requests for FetchIncomingPhoneNumberAssignedAddOn
func NewFetchIncomingPhoneNumberAssignedAddOnRequest(server string, accountSid string, resourceSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, resourceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s/AssignedAddOns/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteIncomingPhoneNumberRequest generates requests for DeleteIncomingPhoneNumber
func NewDeleteIncomingPhoneNumberRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchIncomingPhoneNumberRequest generates requests for FetchIncomingPhoneNumber
func NewFetchIncomingPhoneNumberRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateIncomingPhoneNumberRequestWithBody generates requests for UpdateIncomingPhoneNumber with any type of body
func NewUpdateIncomingPhoneNumberRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/IncomingPhoneNumbers/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListKeyRequest generates requests for ListKey
func NewListKeyRequest(server string, accountSid string, params *ListKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Keys.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNewKeyRequestWithBody generates requests for CreateNewKey with any type of body
func NewCreateNewKeyRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Keys.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteKeyRequest generates requests for DeleteKey
func NewDeleteKeyRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Keys/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchKeyRequest generates requests for FetchKey
func NewFetchKeyRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Keys/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateKeyRequestWithBody generates requests for UpdateKey with any type of body
func NewUpdateKeyRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Keys/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMessageRequest generates requests for ListMessage
func NewListMessageRequest(server string, accountSid string, params *ListMessageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.To != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "To", runtime.ParamLocationQuery, *params.To); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.From != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "From", runtime.ParamLocationQuery, *params.From); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateSent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateSent", runtime.ParamLocationQuery, *params.DateSent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateSent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateSent<", runtime.ParamLocationQuery, *params.DateSent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateSent != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateSent>", runtime.ParamLocationQuery, *params.DateSent); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMessageRequestWithBody generates requests for CreateMessage with any type of body
func NewCreateMessageRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateMessageFeedbackRequestWithBody generates requests for CreateMessageFeedback with any type of body
func NewCreateMessageFeedbackRequestWithBody(server string, accountSid string, messageSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, messageSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages/%s/Feedback.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMediaRequest generates requests for ListMedia
func NewListMediaRequest(server string, accountSid string, messageSid string, params *ListMediaParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, messageSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages/%s/Media.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated<", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated>", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMediaRequest generates requests for DeleteMedia
func NewDeleteMediaRequest(server string, accountSid string, messageSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, messageSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages/%s/Media/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchMediaRequest generates requests for FetchMedia
func NewFetchMediaRequest(server string, accountSid string, messageSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, messageSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages/%s/Media/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteMessageRequest generates requests for DeleteMessage
func NewDeleteMessageRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchMessageRequest generates requests for FetchMessage
func NewFetchMessageRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMessageRequestWithBody generates requests for UpdateMessage with any type of body
func NewUpdateMessageRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Messages/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListNotificationRequest generates requests for ListNotification
func NewListNotificationRequest(server string, accountSid string, params *ListNotificationParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Notifications.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Log != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Log", runtime.ParamLocationQuery, *params.Log); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MessageDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MessageDate", runtime.ParamLocationQuery, *params.MessageDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MessageDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MessageDate<", runtime.ParamLocationQuery, *params.MessageDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.MessageDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "MessageDate>", runtime.ParamLocationQuery, *params.MessageDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchNotificationRequest generates requests for FetchNotification
func NewFetchNotificationRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Notifications/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListOutgoingCallerIdRequest generates requests for ListOutgoingCallerId
func NewListOutgoingCallerIdRequest(server string, accountSid string, params *ListOutgoingCallerIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/OutgoingCallerIds.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PhoneNumber != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PhoneNumber", runtime.ParamLocationQuery, *params.PhoneNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateValidationRequestRequestWithBody generates requests for CreateValidationRequest with any type of body
func NewCreateValidationRequestRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/OutgoingCallerIds.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteOutgoingCallerIdRequest generates requests for DeleteOutgoingCallerId
func NewDeleteOutgoingCallerIdRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/OutgoingCallerIds/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchOutgoingCallerIdRequest generates requests for FetchOutgoingCallerId
func NewFetchOutgoingCallerIdRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/OutgoingCallerIds/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateOutgoingCallerIdRequestWithBody generates requests for UpdateOutgoingCallerId with any type of body
func NewUpdateOutgoingCallerIdRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/OutgoingCallerIds/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListQueueRequest generates requests for ListQueue
func NewListQueueRequest(server string, accountSid string, params *ListQueueParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateQueueRequestWithBody generates requests for CreateQueue with any type of body
func NewCreateQueueRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListMemberRequest generates requests for ListMember
func NewListMemberRequest(server string, accountSid string, queueSid string, params *ListMemberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "QueueSid", runtime.ParamLocationPath, queueSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues/%s/Members.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchMemberRequest generates requests for FetchMember
func NewFetchMemberRequest(server string, accountSid string, queueSid string, callSid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "QueueSid", runtime.ParamLocationPath, queueSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues/%s/Members/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateMemberRequestWithBody generates requests for UpdateMember with any type of body
func NewUpdateMemberRequestWithBody(server string, accountSid string, queueSid string, callSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "QueueSid", runtime.ParamLocationPath, queueSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, callSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues/%s/Members/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteQueueRequest generates requests for DeleteQueue
func NewDeleteQueueRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchQueueRequest generates requests for FetchQueue
func NewFetchQueueRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateQueueRequestWithBody generates requests for UpdateQueue with any type of body
func NewUpdateQueueRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Queues/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListRecordingRequest generates requests for ListRecording
func NewListRecordingRequest(server string, accountSid string, params *ListRecordingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated<", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.DateCreated != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "DateCreated>", runtime.ParamLocationQuery, *params.DateCreated); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.CallSid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "CallSid", runtime.ParamLocationQuery, *params.CallSid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ConferenceSid != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ConferenceSid", runtime.ParamLocationQuery, *params.ConferenceSid); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSoftDeleted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSoftDeleted", runtime.ParamLocationQuery, *params.IncludeSoftDeleted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRecordingTranscriptionRequest generates requests for ListRecordingTranscription
func NewListRecordingTranscriptionRequest(server string, accountSid string, recordingSid string, params *ListRecordingTranscriptionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "RecordingSid", runtime.ParamLocationPath, recordingSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/Transcriptions.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecordingTranscriptionRequest generates requests for DeleteRecordingTranscription
func NewDeleteRecordingTranscriptionRequest(server string, accountSid string, recordingSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "RecordingSid", runtime.ParamLocationPath, recordingSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/Transcriptions/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchRecordingTranscriptionRequest generates requests for FetchRecordingTranscription
func NewFetchRecordingTranscriptionRequest(server string, accountSid string, recordingSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "RecordingSid", runtime.ParamLocationPath, recordingSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/Transcriptions/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRecordingAddOnResultRequest generates requests for ListRecordingAddOnResult
func NewListRecordingAddOnResultRequest(server string, accountSid string, referenceSid string, params *ListRecordingAddOnResultParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, referenceSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/AddOnResults.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListRecordingAddOnResultPayloadRequest generates requests for ListRecordingAddOnResultPayload
func NewListRecordingAddOnResultPayloadRequest(server string, accountSid string, referenceSid string, addOnResultSid string, params *ListRecordingAddOnResultPayloadParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, referenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "AddOnResultSid", runtime.ParamLocationPath, addOnResultSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/AddOnResults/%s/Payloads.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecordingAddOnResultPayloadRequest generates requests for DeleteRecordingAddOnResultPayload
func NewDeleteRecordingAddOnResultPayloadRequest(server string, accountSid string, referenceSid string, addOnResultSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, referenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "AddOnResultSid", runtime.ParamLocationPath, addOnResultSid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/AddOnResults/%s/Payloads/%s.json", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchRecordingAddOnResultPayloadRequest generates requests for FetchRecordingAddOnResultPayload
func NewFetchRecordingAddOnResultPayloadRequest(server string, accountSid string, referenceSid string, addOnResultSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, referenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "AddOnResultSid", runtime.ParamLocationPath, addOnResultSid)
	if err != nil {
		return nil, err
	}

	var pathParam3 string

	pathParam3, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/AddOnResults/%s/Payloads/%s.json", pathParam0, pathParam1, pathParam2, pathParam3)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecordingAddOnResultRequest generates requests for DeleteRecordingAddOnResult
func NewDeleteRecordingAddOnResultRequest(server string, accountSid string, referenceSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, referenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/AddOnResults/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchRecordingAddOnResultRequest generates requests for FetchRecordingAddOnResult
func NewFetchRecordingAddOnResultRequest(server string, accountSid string, referenceSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, referenceSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s/AddOnResults/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteRecordingRequest generates requests for DeleteRecording
func NewDeleteRecordingRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchRecordingRequest generates requests for FetchRecording
func NewFetchRecordingRequest(server string, accountSid string, sid string, params *FetchRecordingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Recordings/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.IncludeSoftDeleted != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSoftDeleted", runtime.ParamLocationQuery, *params.IncludeSoftDeleted); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSipCredentialListRequest generates requests for ListSipCredentialList
func NewListSipCredentialListRequest(server string, accountSid string, params *ListSipCredentialListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipCredentialListRequestWithBody generates requests for CreateSipCredentialList with any type of body
func NewCreateSipCredentialListRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSipCredentialRequest generates requests for ListSipCredential
func NewListSipCredentialRequest(server string, accountSid string, credentialListSid string, params *ListSipCredentialParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, credentialListSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s/Credentials.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipCredentialRequestWithBody generates requests for CreateSipCredential with any type of body
func NewCreateSipCredentialRequestWithBody(server string, accountSid string, credentialListSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, credentialListSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s/Credentials.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipCredentialRequest generates requests for DeleteSipCredential
func NewDeleteSipCredentialRequest(server string, accountSid string, credentialListSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, credentialListSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s/Credentials/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipCredentialRequest generates requests for FetchSipCredential
func NewFetchSipCredentialRequest(server string, accountSid string, credentialListSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, credentialListSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s/Credentials/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSipCredentialRequestWithBody generates requests for UpdateSipCredential with any type of body
func NewUpdateSipCredentialRequestWithBody(server string, accountSid string, credentialListSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, credentialListSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s/Credentials/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipCredentialListRequest generates requests for DeleteSipCredentialList
func NewDeleteSipCredentialListRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipCredentialListRequest generates requests for FetchSipCredentialList
func NewFetchSipCredentialListRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSipCredentialListRequestWithBody generates requests for UpdateSipCredentialList with any type of body
func NewUpdateSipCredentialListRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/CredentialLists/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSipDomainRequest generates requests for ListSipDomain
func NewListSipDomainRequest(server string, accountSid string, params *ListSipDomainParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipDomainRequestWithBody generates requests for CreateSipDomain with any type of body
func NewCreateSipDomainRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSipAuthCallsCredentialListMappingRequest generates requests for ListSipAuthCallsCredentialListMapping
func NewListSipAuthCallsCredentialListMappingRequest(server string, accountSid string, domainSid string, params *ListSipAuthCallsCredentialListMappingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/CredentialListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipAuthCallsCredentialListMappingRequestWithBody generates requests for CreateSipAuthCallsCredentialListMapping with any type of body
func NewCreateSipAuthCallsCredentialListMappingRequestWithBody(server string, accountSid string, domainSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/CredentialListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipAuthCallsCredentialListMappingRequest generates requests for DeleteSipAuthCallsCredentialListMapping
func NewDeleteSipAuthCallsCredentialListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/CredentialListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipAuthCallsCredentialListMappingRequest generates requests for FetchSipAuthCallsCredentialListMapping
func NewFetchSipAuthCallsCredentialListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/CredentialListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSipAuthCallsIpAccessControlListMappingRequest generates requests for ListSipAuthCallsIpAccessControlListMapping
func NewListSipAuthCallsIpAccessControlListMappingRequest(server string, accountSid string, domainSid string, params *ListSipAuthCallsIpAccessControlListMappingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/IpAccessControlListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipAuthCallsIpAccessControlListMappingRequestWithBody generates requests for CreateSipAuthCallsIpAccessControlListMapping with any type of body
func NewCreateSipAuthCallsIpAccessControlListMappingRequestWithBody(server string, accountSid string, domainSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/IpAccessControlListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipAuthCallsIpAccessControlListMappingRequest generates requests for DeleteSipAuthCallsIpAccessControlListMapping
func NewDeleteSipAuthCallsIpAccessControlListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/IpAccessControlListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipAuthCallsIpAccessControlListMappingRequest generates requests for FetchSipAuthCallsIpAccessControlListMapping
func NewFetchSipAuthCallsIpAccessControlListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Calls/IpAccessControlListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSipAuthRegistrationsCredentialListMappingRequest generates requests for ListSipAuthRegistrationsCredentialListMapping
func NewListSipAuthRegistrationsCredentialListMappingRequest(server string, accountSid string, domainSid string, params *ListSipAuthRegistrationsCredentialListMappingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Registrations/CredentialListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipAuthRegistrationsCredentialListMappingRequestWithBody generates requests for CreateSipAuthRegistrationsCredentialListMapping with any type of body
func NewCreateSipAuthRegistrationsCredentialListMappingRequestWithBody(server string, accountSid string, domainSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Registrations/CredentialListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipAuthRegistrationsCredentialListMappingRequest generates requests for DeleteSipAuthRegistrationsCredentialListMapping
func NewDeleteSipAuthRegistrationsCredentialListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Registrations/CredentialListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipAuthRegistrationsCredentialListMappingRequest generates requests for FetchSipAuthRegistrationsCredentialListMapping
func NewFetchSipAuthRegistrationsCredentialListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/Auth/Registrations/CredentialListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSipCredentialListMappingRequest generates requests for ListSipCredentialListMapping
func NewListSipCredentialListMappingRequest(server string, accountSid string, domainSid string, params *ListSipCredentialListMappingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/CredentialListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipCredentialListMappingRequestWithBody generates requests for CreateSipCredentialListMapping with any type of body
func NewCreateSipCredentialListMappingRequestWithBody(server string, accountSid string, domainSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/CredentialListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipCredentialListMappingRequest generates requests for DeleteSipCredentialListMapping
func NewDeleteSipCredentialListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/CredentialListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipCredentialListMappingRequest generates requests for FetchSipCredentialListMapping
func NewFetchSipCredentialListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/CredentialListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListSipIpAccessControlListMappingRequest generates requests for ListSipIpAccessControlListMapping
func NewListSipIpAccessControlListMappingRequest(server string, accountSid string, domainSid string, params *ListSipIpAccessControlListMappingParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/IpAccessControlListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipIpAccessControlListMappingRequestWithBody generates requests for CreateSipIpAccessControlListMapping with any type of body
func NewCreateSipIpAccessControlListMappingRequestWithBody(server string, accountSid string, domainSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/IpAccessControlListMappings.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipIpAccessControlListMappingRequest generates requests for DeleteSipIpAccessControlListMapping
func NewDeleteSipIpAccessControlListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/IpAccessControlListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipIpAccessControlListMappingRequest generates requests for FetchSipIpAccessControlListMapping
func NewFetchSipIpAccessControlListMappingRequest(server string, accountSid string, domainSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, domainSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s/IpAccessControlListMappings/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteSipDomainRequest generates requests for DeleteSipDomain
func NewDeleteSipDomainRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipDomainRequest generates requests for FetchSipDomain
func NewFetchSipDomainRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSipDomainRequestWithBody generates requests for UpdateSipDomain with any type of body
func NewUpdateSipDomainRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/Domains/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSipIpAccessControlListRequest generates requests for ListSipIpAccessControlList
func NewListSipIpAccessControlListRequest(server string, accountSid string, params *ListSipIpAccessControlListParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipIpAccessControlListRequestWithBody generates requests for CreateSipIpAccessControlList with any type of body
func NewCreateSipIpAccessControlListRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSipIpAddressRequest generates requests for ListSipIpAddress
func NewListSipIpAddressRequest(server string, accountSid string, ipAccessControlListSid string, params *ListSipIpAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ipAccessControlListSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s/IpAddresses.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateSipIpAddressRequestWithBody generates requests for CreateSipIpAddress with any type of body
func NewCreateSipIpAddressRequestWithBody(server string, accountSid string, ipAccessControlListSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ipAccessControlListSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s/IpAddresses.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipIpAddressRequest generates requests for DeleteSipIpAddress
func NewDeleteSipIpAddressRequest(server string, accountSid string, ipAccessControlListSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ipAccessControlListSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s/IpAddresses/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipIpAddressRequest generates requests for FetchSipIpAddress
func NewFetchSipIpAddressRequest(server string, accountSid string, ipAccessControlListSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ipAccessControlListSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s/IpAddresses/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSipIpAddressRequestWithBody generates requests for UpdateSipIpAddress with any type of body
func NewUpdateSipIpAddressRequestWithBody(server string, accountSid string, ipAccessControlListSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ipAccessControlListSid)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s/IpAddresses/%s.json", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSipIpAccessControlListRequest generates requests for DeleteSipIpAccessControlList
func NewDeleteSipIpAccessControlListRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSipIpAccessControlListRequest generates requests for FetchSipIpAccessControlList
func NewFetchSipIpAccessControlListRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSipIpAccessControlListRequestWithBody generates requests for UpdateSipIpAccessControlList with any type of body
func NewUpdateSipIpAccessControlListRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SIP/IpAccessControlLists/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListShortCodeRequest generates requests for ListShortCode
func NewListShortCodeRequest(server string, accountSid string, params *ListShortCodeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SMS/ShortCodes.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.FriendlyName != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "FriendlyName", runtime.ParamLocationQuery, *params.FriendlyName); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ShortCode != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "ShortCode", runtime.ParamLocationQuery, *params.ShortCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchShortCodeRequest generates requests for FetchShortCode
func NewFetchShortCodeRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SMS/ShortCodes/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateShortCodeRequestWithBody generates requests for UpdateShortCode with any type of body
func NewUpdateShortCodeRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SMS/ShortCodes/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListSigningKeyRequest generates requests for ListSigningKey
func NewListSigningKeyRequest(server string, accountSid string, params *ListSigningKeyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SigningKeys.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateNewSigningKeyRequestWithBody generates requests for CreateNewSigningKey with any type of body
func NewCreateNewSigningKeyRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SigningKeys.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteSigningKeyRequest generates requests for DeleteSigningKey
func NewDeleteSigningKeyRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SigningKeys/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchSigningKeyRequest generates requests for FetchSigningKey
func NewFetchSigningKeyRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SigningKeys/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateSigningKeyRequestWithBody generates requests for UpdateSigningKey with any type of body
func NewUpdateSigningKeyRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/SigningKeys/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewCreateTokenRequestWithBody generates requests for CreateToken with any type of body
func NewCreateTokenRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Tokens.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewListTranscriptionRequest generates requests for ListTranscription
func NewListTranscriptionRequest(server string, accountSid string, params *ListTranscriptionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Transcriptions.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteTranscriptionRequest generates requests for DeleteTranscription
func NewDeleteTranscriptionRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Transcriptions/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchTranscriptionRequest generates requests for FetchTranscription
func NewFetchTranscriptionRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Transcriptions/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordRequest generates requests for ListUsageRecord
func NewListUsageRecordRequest(server string, accountSid string, params *ListUsageRecordParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordAllTimeRequest generates requests for ListUsageRecordAllTime
func NewListUsageRecordAllTimeRequest(server string, accountSid string, params *ListUsageRecordAllTimeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/AllTime.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordDailyRequest generates requests for ListUsageRecordDaily
func NewListUsageRecordDailyRequest(server string, accountSid string, params *ListUsageRecordDailyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/Daily.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordLastMonthRequest generates requests for ListUsageRecordLastMonth
func NewListUsageRecordLastMonthRequest(server string, accountSid string, params *ListUsageRecordLastMonthParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/LastMonth.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordMonthlyRequest generates requests for ListUsageRecordMonthly
func NewListUsageRecordMonthlyRequest(server string, accountSid string, params *ListUsageRecordMonthlyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/Monthly.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordThisMonthRequest generates requests for ListUsageRecordThisMonth
func NewListUsageRecordThisMonthRequest(server string, accountSid string, params *ListUsageRecordThisMonthParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/ThisMonth.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordTodayRequest generates requests for ListUsageRecordToday
func NewListUsageRecordTodayRequest(server string, accountSid string, params *ListUsageRecordTodayParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/Today.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordYearlyRequest generates requests for ListUsageRecordYearly
func NewListUsageRecordYearlyRequest(server string, accountSid string, params *ListUsageRecordYearlyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/Yearly.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageRecordYesterdayRequest generates requests for ListUsageRecordYesterday
func NewListUsageRecordYesterdayRequest(server string, accountSid string, params *ListUsageRecordYesterdayParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Records/Yesterday.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Category != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Category", runtime.ParamLocationQuery, *params.Category); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.StartDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "StartDate", runtime.ParamLocationQuery, *params.StartDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.EndDate != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "EndDate", runtime.ParamLocationQuery, *params.EndDate); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeSubaccounts != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "IncludeSubaccounts", runtime.ParamLocationQuery, *params.IncludeSubaccounts); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewListUsageTriggerRequest generates requests for ListUsageTrigger
func NewListUsageTriggerRequest(server string, accountSid string, params *ListUsageTriggerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Triggers.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	queryValues := queryURL.Query()

	if params.Recurring != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "Recurring", runtime.ParamLocationQuery, *params.Recurring); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.TriggerBy != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "TriggerBy", runtime.ParamLocationQuery, *params.TriggerBy); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.UsageCategory != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "UsageCategory", runtime.ParamLocationQuery, *params.UsageCategory); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PageSize != nil {

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "PageSize", runtime.ParamLocationQuery, *params.PageSize); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryURL.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateUsageTriggerRequestWithBody generates requests for CreateUsageTrigger with any type of body
func NewCreateUsageTriggerRequestWithBody(server string, accountSid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Triggers.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUsageTriggerRequest generates requests for DeleteUsageTrigger
func NewDeleteUsageTriggerRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Triggers/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewFetchUsageTriggerRequest generates requests for FetchUsageTrigger
func NewFetchUsageTriggerRequest(server string, accountSid string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Triggers/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateUsageTriggerRequestWithBody generates requests for UpdateUsageTrigger with any type of body
func NewUpdateUsageTriggerRequestWithBody(server string, accountSid string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, accountSid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s/Usage/Triggers/%s.json", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewFetchAccountRequest generates requests for FetchAccount
func NewFetchAccountRequest(server string, sid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAccountRequestWithBody generates requests for UpdateAccount with any type of body
func NewUpdateAccountRequestWithBody(server string, sid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "Sid", runtime.ParamLocationPath, sid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/2010-04-01/Accounts/%s.json", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// ListAccount request
	ListAccountWithResponse(ctx context.Context, params *ListAccountParams, reqEditors ...RequestEditorFn) (*ListAccountResponse, error)

	// CreateAccount request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// ListAddress request
	ListAddressWithResponse(ctx context.Context, accountSid string, params *ListAddressParams, reqEditors ...RequestEditorFn) (*ListAddressResponse, error)

	// CreateAddress request with any body
	CreateAddressWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAddressResponse, error)

	// ListDependentPhoneNumber request
	ListDependentPhoneNumberWithResponse(ctx context.Context, accountSid string, addressSid string, params *ListDependentPhoneNumberParams, reqEditors ...RequestEditorFn) (*ListDependentPhoneNumberResponse, error)

	// DeleteAddress request
	DeleteAddressWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteAddressResponse, error)

	// FetchAddress request
	FetchAddressWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchAddressResponse, error)

	// UpdateAddress request with any body
	UpdateAddressWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAddressResponse, error)

	// ListApplication request
	ListApplicationWithResponse(ctx context.Context, accountSid string, params *ListApplicationParams, reqEditors ...RequestEditorFn) (*ListApplicationResponse, error)

	// CreateApplication request with any body
	CreateApplicationWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error)

	// DeleteApplication request
	DeleteApplicationWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error)

	// FetchApplication request
	FetchApplicationWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchApplicationResponse, error)

	// UpdateApplication request with any body
	UpdateApplicationWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error)

	// ListAuthorizedConnectApp request
	ListAuthorizedConnectAppWithResponse(ctx context.Context, accountSid string, params *ListAuthorizedConnectAppParams, reqEditors ...RequestEditorFn) (*ListAuthorizedConnectAppResponse, error)

	// FetchAuthorizedConnectApp request
	FetchAuthorizedConnectAppWithResponse(ctx context.Context, accountSid string, connectAppSid string, reqEditors ...RequestEditorFn) (*FetchAuthorizedConnectAppResponse, error)

	// ListAvailablePhoneNumberCountry request
	ListAvailablePhoneNumberCountryWithResponse(ctx context.Context, accountSid string, params *ListAvailablePhoneNumberCountryParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberCountryResponse, error)

	// FetchAvailablePhoneNumberCountry request
	FetchAvailablePhoneNumberCountryWithResponse(ctx context.Context, accountSid string, countryCode string, reqEditors ...RequestEditorFn) (*FetchAvailablePhoneNumberCountryResponse, error)

	// ListAvailablePhoneNumberLocal request
	ListAvailablePhoneNumberLocalWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberLocalResponse, error)

	// ListAvailablePhoneNumberMachineToMachine request
	ListAvailablePhoneNumberMachineToMachineWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMachineToMachineParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberMachineToMachineResponse, error)

	// ListAvailablePhoneNumberMobile request
	ListAvailablePhoneNumberMobileWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberMobileResponse, error)

	// ListAvailablePhoneNumberNational request
	ListAvailablePhoneNumberNationalWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberNationalParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberNationalResponse, error)

	// ListAvailablePhoneNumberSharedCost request
	ListAvailablePhoneNumberSharedCostWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberSharedCostParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberSharedCostResponse, error)

	// ListAvailablePhoneNumberTollFree request
	ListAvailablePhoneNumberTollFreeWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberTollFreeResponse, error)

	// ListAvailablePhoneNumberVoip request
	ListAvailablePhoneNumberVoipWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberVoipParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberVoipResponse, error)

	// FetchBalance request
	FetchBalanceWithResponse(ctx context.Context, accountSid string, reqEditors ...RequestEditorFn) (*FetchBalanceResponse, error)

	// ListCall request
	ListCallWithResponse(ctx context.Context, accountSid string, params *ListCallParams, reqEditors ...RequestEditorFn) (*ListCallResponse, error)

	// CreateCall request with any body
	CreateCallWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallResponse, error)

	// CreateCallFeedbackSummary request with any body
	CreateCallFeedbackSummaryWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallFeedbackSummaryResponse, error)

	// DeleteCallFeedbackSummary request
	DeleteCallFeedbackSummaryWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteCallFeedbackSummaryResponse, error)

	// FetchCallFeedbackSummary request
	FetchCallFeedbackSummaryWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallFeedbackSummaryResponse, error)

	// ListCallEvent request
	ListCallEventWithResponse(ctx context.Context, accountSid string, callSid string, params *ListCallEventParams, reqEditors ...RequestEditorFn) (*ListCallEventResponse, error)

	// FetchCallFeedback request
	FetchCallFeedbackWithResponse(ctx context.Context, accountSid string, callSid string, reqEditors ...RequestEditorFn) (*FetchCallFeedbackResponse, error)

	// UpdateCallFeedback request with any body
	UpdateCallFeedbackWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCallFeedbackResponse, error)

	// ListCallNotification request
	ListCallNotificationWithResponse(ctx context.Context, accountSid string, callSid string, params *ListCallNotificationParams, reqEditors ...RequestEditorFn) (*ListCallNotificationResponse, error)

	// FetchCallNotification request
	FetchCallNotificationWithResponse(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallNotificationResponse, error)

	// CreatePayments request with any body
	CreatePaymentsWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePaymentsResponse, error)

	// UpdatePayments request with any body
	UpdatePaymentsWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePaymentsResponse, error)

	// ListCallRecording request
	ListCallRecordingWithResponse(ctx context.Context, accountSid string, callSid string, params *ListCallRecordingParams, reqEditors ...RequestEditorFn) (*ListCallRecordingResponse, error)

	// CreateCallRecording request with any body
	CreateCallRecordingWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallRecordingResponse, error)

	// DeleteCallRecording request
	DeleteCallRecordingWithResponse(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteCallRecordingResponse, error)

	// FetchCallRecording request
	FetchCallRecordingWithResponse(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallRecordingResponse, error)

	// UpdateCallRecording request with any body
	UpdateCallRecordingWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCallRecordingResponse, error)

	// CreateSiprec request with any body
	CreateSiprecWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSiprecResponse, error)

	// UpdateSiprec request with any body
	UpdateSiprecWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSiprecResponse, error)

	// CreateStream request with any body
	CreateStreamWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStreamResponse, error)

	// UpdateStream request with any body
	UpdateStreamWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStreamResponse, error)

	// DeleteCall request
	DeleteCallWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteCallResponse, error)

	// FetchCall request
	FetchCallWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallResponse, error)

	// UpdateCall request with any body
	UpdateCallWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCallResponse, error)

	// ListConference request
	ListConferenceWithResponse(ctx context.Context, accountSid string, params *ListConferenceParams, reqEditors ...RequestEditorFn) (*ListConferenceResponse, error)

	// ListParticipant request
	ListParticipantWithResponse(ctx context.Context, accountSid string, conferenceSid string, params *ListParticipantParams, reqEditors ...RequestEditorFn) (*ListParticipantResponse, error)

	// CreateParticipant request with any body
	CreateParticipantWithBodyWithResponse(ctx context.Context, accountSid string, conferenceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateParticipantResponse, error)

	// DeleteParticipant request
	DeleteParticipantWithResponse(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*DeleteParticipantResponse, error)

	// FetchParticipant request
	FetchParticipantWithResponse(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*FetchParticipantResponse, error)

	// UpdateParticipant request with any body
	UpdateParticipantWithBodyWithResponse(ctx context.Context, accountSid string, conferenceSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateParticipantResponse, error)

	// ListConferenceRecording request
	ListConferenceRecordingWithResponse(ctx context.Context, accountSid string, conferenceSid string, params *ListConferenceRecordingParams, reqEditors ...RequestEditorFn) (*ListConferenceRecordingResponse, error)

	// DeleteConferenceRecording request
	DeleteConferenceRecordingWithResponse(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteConferenceRecordingResponse, error)

	// FetchConferenceRecording request
	FetchConferenceRecordingWithResponse(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*FetchConferenceRecordingResponse, error)

	// UpdateConferenceRecording request with any body
	UpdateConferenceRecordingWithBodyWithResponse(ctx context.Context, accountSid string, conferenceSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConferenceRecordingResponse, error)

	// FetchConference request
	FetchConferenceWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchConferenceResponse, error)

	// UpdateConference request with any body
	UpdateConferenceWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConferenceResponse, error)

	// ListConnectApp request
	ListConnectAppWithResponse(ctx context.Context, accountSid string, params *ListConnectAppParams, reqEditors ...RequestEditorFn) (*ListConnectAppResponse, error)

	// DeleteConnectApp request
	DeleteConnectAppWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteConnectAppResponse, error)

	// FetchConnectApp request
	FetchConnectAppWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchConnectAppResponse, error)

	// UpdateConnectApp request with any body
	UpdateConnectAppWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectAppResponse, error)

	// ListIncomingPhoneNumber request
	ListIncomingPhoneNumberWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberResponse, error)

	// CreateIncomingPhoneNumber request with any body
	CreateIncomingPhoneNumberWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberResponse, error)

	// ListIncomingPhoneNumberLocal request
	ListIncomingPhoneNumberLocalWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberLocalResponse, error)

	// CreateIncomingPhoneNumberLocal request with any body
	CreateIncomingPhoneNumberLocalWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberLocalResponse, error)

	// ListIncomingPhoneNumberMobile request
	ListIncomingPhoneNumberMobileWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberMobileResponse, error)

	// CreateIncomingPhoneNumberMobile request with any body
	CreateIncomingPhoneNumberMobileWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberMobileResponse, error)

	// ListIncomingPhoneNumberTollFree request
	ListIncomingPhoneNumberTollFreeWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberTollFreeResponse, error)

	// CreateIncomingPhoneNumberTollFree request with any body
	CreateIncomingPhoneNumberTollFreeWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberTollFreeResponse, error)

	// ListIncomingPhoneNumberAssignedAddOn request
	ListIncomingPhoneNumberAssignedAddOnWithResponse(ctx context.Context, accountSid string, resourceSid string, params *ListIncomingPhoneNumberAssignedAddOnParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberAssignedAddOnResponse, error)

	// CreateIncomingPhoneNumberAssignedAddOn request with any body
	CreateIncomingPhoneNumberAssignedAddOnWithBodyWithResponse(ctx context.Context, accountSid string, resourceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberAssignedAddOnResponse, error)

	// ListIncomingPhoneNumberAssignedAddOnExtension request
	ListIncomingPhoneNumberAssignedAddOnExtensionWithResponse(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, params *ListIncomingPhoneNumberAssignedAddOnExtensionParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberAssignedAddOnExtensionResponse, error)

	// FetchIncomingPhoneNumberAssignedAddOnExtension request
	FetchIncomingPhoneNumberAssignedAddOnExtensionWithResponse(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, sid string, reqEditors ...RequestEditorFn) (*FetchIncomingPhoneNumberAssignedAddOnExtensionResponse, error)

	// DeleteIncomingPhoneNumberAssignedAddOn request
	DeleteIncomingPhoneNumberAssignedAddOnWithResponse(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteIncomingPhoneNumberAssignedAddOnResponse, error)

	// FetchIncomingPhoneNumberAssignedAddOn request
	FetchIncomingPhoneNumberAssignedAddOnWithResponse(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*FetchIncomingPhoneNumberAssignedAddOnResponse, error)

	// DeleteIncomingPhoneNumber request
	DeleteIncomingPhoneNumberWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteIncomingPhoneNumberResponse, error)

	// FetchIncomingPhoneNumber request
	FetchIncomingPhoneNumberWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchIncomingPhoneNumberResponse, error)

	// UpdateIncomingPhoneNumber request with any body
	UpdateIncomingPhoneNumberWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncomingPhoneNumberResponse, error)

	// ListKey request
	ListKeyWithResponse(ctx context.Context, accountSid string, params *ListKeyParams, reqEditors ...RequestEditorFn) (*ListKeyResponse, error)

	// CreateNewKey request with any body
	CreateNewKeyWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewKeyResponse, error)

	// DeleteKey request
	DeleteKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteKeyResponse, error)

	// FetchKey request
	FetchKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchKeyResponse, error)

	// UpdateKey request with any body
	UpdateKeyWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyResponse, error)

	// ListMessage request
	ListMessageWithResponse(ctx context.Context, accountSid string, params *ListMessageParams, reqEditors ...RequestEditorFn) (*ListMessageResponse, error)

	// CreateMessage request with any body
	CreateMessageWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error)

	// CreateMessageFeedback request with any body
	CreateMessageFeedbackWithBodyWithResponse(ctx context.Context, accountSid string, messageSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageFeedbackResponse, error)

	// ListMedia request
	ListMediaWithResponse(ctx context.Context, accountSid string, messageSid string, params *ListMediaParams, reqEditors ...RequestEditorFn) (*ListMediaResponse, error)

	// DeleteMedia request
	DeleteMediaWithResponse(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteMediaResponse, error)

	// FetchMedia request
	FetchMediaWithResponse(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*FetchMediaResponse, error)

	// DeleteMessage request
	DeleteMessageWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteMessageResponse, error)

	// FetchMessage request
	FetchMessageWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchMessageResponse, error)

	// UpdateMessage request with any body
	UpdateMessageWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMessageResponse, error)

	// ListNotification request
	ListNotificationWithResponse(ctx context.Context, accountSid string, params *ListNotificationParams, reqEditors ...RequestEditorFn) (*ListNotificationResponse, error)

	// FetchNotification request
	FetchNotificationWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchNotificationResponse, error)

	// ListOutgoingCallerId request
	ListOutgoingCallerIdWithResponse(ctx context.Context, accountSid string, params *ListOutgoingCallerIdParams, reqEditors ...RequestEditorFn) (*ListOutgoingCallerIdResponse, error)

	// CreateValidationRequest request with any body
	CreateValidationRequestWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidationRequestResponse, error)

	// DeleteOutgoingCallerId request
	DeleteOutgoingCallerIdWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteOutgoingCallerIdResponse, error)

	// FetchOutgoingCallerId request
	FetchOutgoingCallerIdWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchOutgoingCallerIdResponse, error)

	// UpdateOutgoingCallerId request with any body
	UpdateOutgoingCallerIdWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutgoingCallerIdResponse, error)

	// ListQueue request
	ListQueueWithResponse(ctx context.Context, accountSid string, params *ListQueueParams, reqEditors ...RequestEditorFn) (*ListQueueResponse, error)

	// CreateQueue request with any body
	CreateQueueWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateQueueResponse, error)

	// ListMember request
	ListMemberWithResponse(ctx context.Context, accountSid string, queueSid string, params *ListMemberParams, reqEditors ...RequestEditorFn) (*ListMemberResponse, error)

	// FetchMember request
	FetchMemberWithResponse(ctx context.Context, accountSid string, queueSid string, callSid string, reqEditors ...RequestEditorFn) (*FetchMemberResponse, error)

	// UpdateMember request with any body
	UpdateMemberWithBodyWithResponse(ctx context.Context, accountSid string, queueSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemberResponse, error)

	// DeleteQueue request
	DeleteQueueWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteQueueResponse, error)

	// FetchQueue request
	FetchQueueWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchQueueResponse, error)

	// UpdateQueue request with any body
	UpdateQueueWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateQueueResponse, error)

	// ListRecording request
	ListRecordingWithResponse(ctx context.Context, accountSid string, params *ListRecordingParams, reqEditors ...RequestEditorFn) (*ListRecordingResponse, error)

	// ListRecordingTranscription request
	ListRecordingTranscriptionWithResponse(ctx context.Context, accountSid string, recordingSid string, params *ListRecordingTranscriptionParams, reqEditors ...RequestEditorFn) (*ListRecordingTranscriptionResponse, error)

	// DeleteRecordingTranscription request
	DeleteRecordingTranscriptionWithResponse(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingTranscriptionResponse, error)

	// FetchRecordingTranscription request
	FetchRecordingTranscriptionWithResponse(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*FetchRecordingTranscriptionResponse, error)

	// ListRecordingAddOnResult request
	ListRecordingAddOnResultWithResponse(ctx context.Context, accountSid string, referenceSid string, params *ListRecordingAddOnResultParams, reqEditors ...RequestEditorFn) (*ListRecordingAddOnResultResponse, error)

	// ListRecordingAddOnResultPayload request
	ListRecordingAddOnResultPayloadWithResponse(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, params *ListRecordingAddOnResultPayloadParams, reqEditors ...RequestEditorFn) (*ListRecordingAddOnResultPayloadResponse, error)

	// DeleteRecordingAddOnResultPayload request
	DeleteRecordingAddOnResultPayloadWithResponse(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingAddOnResultPayloadResponse, error)

	// FetchRecordingAddOnResultPayload request
	FetchRecordingAddOnResultPayloadWithResponse(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*FetchRecordingAddOnResultPayloadResponse, error)

	// DeleteRecordingAddOnResult request
	DeleteRecordingAddOnResultWithResponse(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingAddOnResultResponse, error)

	// FetchRecordingAddOnResult request
	FetchRecordingAddOnResultWithResponse(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*FetchRecordingAddOnResultResponse, error)

	// DeleteRecording request
	DeleteRecordingWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error)

	// FetchRecording request
	FetchRecordingWithResponse(ctx context.Context, accountSid string, sid string, params *FetchRecordingParams, reqEditors ...RequestEditorFn) (*FetchRecordingResponse, error)

	// ListSipCredentialList request
	ListSipCredentialListWithResponse(ctx context.Context, accountSid string, params *ListSipCredentialListParams, reqEditors ...RequestEditorFn) (*ListSipCredentialListResponse, error)

	// CreateSipCredentialList request with any body
	CreateSipCredentialListWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipCredentialListResponse, error)

	// ListSipCredential request
	ListSipCredentialWithResponse(ctx context.Context, accountSid string, credentialListSid string, params *ListSipCredentialParams, reqEditors ...RequestEditorFn) (*ListSipCredentialResponse, error)

	// CreateSipCredential request with any body
	CreateSipCredentialWithBodyWithResponse(ctx context.Context, accountSid string, credentialListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipCredentialResponse, error)

	// DeleteSipCredential request
	DeleteSipCredentialWithResponse(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipCredentialResponse, error)

	// FetchSipCredential request
	FetchSipCredentialWithResponse(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipCredentialResponse, error)

	// UpdateSipCredential request with any body
	UpdateSipCredentialWithBodyWithResponse(ctx context.Context, accountSid string, credentialListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipCredentialResponse, error)

	// DeleteSipCredentialList request
	DeleteSipCredentialListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipCredentialListResponse, error)

	// FetchSipCredentialList request
	FetchSipCredentialListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipCredentialListResponse, error)

	// UpdateSipCredentialList request with any body
	UpdateSipCredentialListWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipCredentialListResponse, error)

	// ListSipDomain request
	ListSipDomainWithResponse(ctx context.Context, accountSid string, params *ListSipDomainParams, reqEditors ...RequestEditorFn) (*ListSipDomainResponse, error)

	// CreateSipDomain request with any body
	CreateSipDomainWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipDomainResponse, error)

	// ListSipAuthCallsCredentialListMapping request
	ListSipAuthCallsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*ListSipAuthCallsCredentialListMappingResponse, error)

	// CreateSipAuthCallsCredentialListMapping request with any body
	CreateSipAuthCallsCredentialListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipAuthCallsCredentialListMappingResponse, error)

	// DeleteSipAuthCallsCredentialListMapping request
	DeleteSipAuthCallsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipAuthCallsCredentialListMappingResponse, error)

	// FetchSipAuthCallsCredentialListMapping request
	FetchSipAuthCallsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipAuthCallsCredentialListMappingResponse, error)

	// ListSipAuthCallsIpAccessControlListMapping request
	ListSipAuthCallsIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*ListSipAuthCallsIpAccessControlListMappingResponse, error)

	// CreateSipAuthCallsIpAccessControlListMapping request with any body
	CreateSipAuthCallsIpAccessControlListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipAuthCallsIpAccessControlListMappingResponse, error)

	// DeleteSipAuthCallsIpAccessControlListMapping request
	DeleteSipAuthCallsIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipAuthCallsIpAccessControlListMappingResponse, error)

	// FetchSipAuthCallsIpAccessControlListMapping request
	FetchSipAuthCallsIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipAuthCallsIpAccessControlListMappingResponse, error)

	// ListSipAuthRegistrationsCredentialListMapping request
	ListSipAuthRegistrationsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthRegistrationsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*ListSipAuthRegistrationsCredentialListMappingResponse, error)

	// CreateSipAuthRegistrationsCredentialListMapping request with any body
	CreateSipAuthRegistrationsCredentialListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipAuthRegistrationsCredentialListMappingResponse, error)

	// DeleteSipAuthRegistrationsCredentialListMapping request
	DeleteSipAuthRegistrationsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipAuthRegistrationsCredentialListMappingResponse, error)

	// FetchSipAuthRegistrationsCredentialListMapping request
	FetchSipAuthRegistrationsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipAuthRegistrationsCredentialListMappingResponse, error)

	// ListSipCredentialListMapping request
	ListSipCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipCredentialListMappingParams, reqEditors ...RequestEditorFn) (*ListSipCredentialListMappingResponse, error)

	// CreateSipCredentialListMapping request with any body
	CreateSipCredentialListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipCredentialListMappingResponse, error)

	// DeleteSipCredentialListMapping request
	DeleteSipCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipCredentialListMappingResponse, error)

	// FetchSipCredentialListMapping request
	FetchSipCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipCredentialListMappingResponse, error)

	// ListSipIpAccessControlListMapping request
	ListSipIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*ListSipIpAccessControlListMappingResponse, error)

	// CreateSipIpAccessControlListMapping request with any body
	CreateSipIpAccessControlListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipIpAccessControlListMappingResponse, error)

	// DeleteSipIpAccessControlListMapping request
	DeleteSipIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipIpAccessControlListMappingResponse, error)

	// FetchSipIpAccessControlListMapping request
	FetchSipIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipIpAccessControlListMappingResponse, error)

	// DeleteSipDomain request
	DeleteSipDomainWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipDomainResponse, error)

	// FetchSipDomain request
	FetchSipDomainWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipDomainResponse, error)

	// UpdateSipDomain request with any body
	UpdateSipDomainWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipDomainResponse, error)

	// ListSipIpAccessControlList request
	ListSipIpAccessControlListWithResponse(ctx context.Context, accountSid string, params *ListSipIpAccessControlListParams, reqEditors ...RequestEditorFn) (*ListSipIpAccessControlListResponse, error)

	// CreateSipIpAccessControlList request with any body
	CreateSipIpAccessControlListWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipIpAccessControlListResponse, error)

	// ListSipIpAddress request
	ListSipIpAddressWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, params *ListSipIpAddressParams, reqEditors ...RequestEditorFn) (*ListSipIpAddressResponse, error)

	// CreateSipIpAddress request with any body
	CreateSipIpAddressWithBodyWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipIpAddressResponse, error)

	// DeleteSipIpAddress request
	DeleteSipIpAddressWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipIpAddressResponse, error)

	// FetchSipIpAddress request
	FetchSipIpAddressWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipIpAddressResponse, error)

	// UpdateSipIpAddress request with any body
	UpdateSipIpAddressWithBodyWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipIpAddressResponse, error)

	// DeleteSipIpAccessControlList request
	DeleteSipIpAccessControlListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipIpAccessControlListResponse, error)

	// FetchSipIpAccessControlList request
	FetchSipIpAccessControlListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipIpAccessControlListResponse, error)

	// UpdateSipIpAccessControlList request with any body
	UpdateSipIpAccessControlListWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipIpAccessControlListResponse, error)

	// ListShortCode request
	ListShortCodeWithResponse(ctx context.Context, accountSid string, params *ListShortCodeParams, reqEditors ...RequestEditorFn) (*ListShortCodeResponse, error)

	// FetchShortCode request
	FetchShortCodeWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchShortCodeResponse, error)

	// UpdateShortCode request with any body
	UpdateShortCodeWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShortCodeResponse, error)

	// ListSigningKey request
	ListSigningKeyWithResponse(ctx context.Context, accountSid string, params *ListSigningKeyParams, reqEditors ...RequestEditorFn) (*ListSigningKeyResponse, error)

	// CreateNewSigningKey request with any body
	CreateNewSigningKeyWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewSigningKeyResponse, error)

	// DeleteSigningKey request
	DeleteSigningKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSigningKeyResponse, error)

	// FetchSigningKey request
	FetchSigningKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSigningKeyResponse, error)

	// UpdateSigningKey request with any body
	UpdateSigningKeyWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSigningKeyResponse, error)

	// CreateToken request with any body
	CreateTokenWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error)

	// ListTranscription request
	ListTranscriptionWithResponse(ctx context.Context, accountSid string, params *ListTranscriptionParams, reqEditors ...RequestEditorFn) (*ListTranscriptionResponse, error)

	// DeleteTranscription request
	DeleteTranscriptionWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteTranscriptionResponse, error)

	// FetchTranscription request
	FetchTranscriptionWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchTranscriptionResponse, error)

	// ListUsageRecord request
	ListUsageRecordWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordParams, reqEditors ...RequestEditorFn) (*ListUsageRecordResponse, error)

	// ListUsageRecordAllTime request
	ListUsageRecordAllTimeWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordAllTimeParams, reqEditors ...RequestEditorFn) (*ListUsageRecordAllTimeResponse, error)

	// ListUsageRecordDaily request
	ListUsageRecordDailyWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordDailyParams, reqEditors ...RequestEditorFn) (*ListUsageRecordDailyResponse, error)

	// ListUsageRecordLastMonth request
	ListUsageRecordLastMonthWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordLastMonthParams, reqEditors ...RequestEditorFn) (*ListUsageRecordLastMonthResponse, error)

	// ListUsageRecordMonthly request
	ListUsageRecordMonthlyWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordMonthlyParams, reqEditors ...RequestEditorFn) (*ListUsageRecordMonthlyResponse, error)

	// ListUsageRecordThisMonth request
	ListUsageRecordThisMonthWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordThisMonthParams, reqEditors ...RequestEditorFn) (*ListUsageRecordThisMonthResponse, error)

	// ListUsageRecordToday request
	ListUsageRecordTodayWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordTodayParams, reqEditors ...RequestEditorFn) (*ListUsageRecordTodayResponse, error)

	// ListUsageRecordYearly request
	ListUsageRecordYearlyWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordYearlyParams, reqEditors ...RequestEditorFn) (*ListUsageRecordYearlyResponse, error)

	// ListUsageRecordYesterday request
	ListUsageRecordYesterdayWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordYesterdayParams, reqEditors ...RequestEditorFn) (*ListUsageRecordYesterdayResponse, error)

	// ListUsageTrigger request
	ListUsageTriggerWithResponse(ctx context.Context, accountSid string, params *ListUsageTriggerParams, reqEditors ...RequestEditorFn) (*ListUsageTriggerResponse, error)

	// CreateUsageTrigger request with any body
	CreateUsageTriggerWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsageTriggerResponse, error)

	// DeleteUsageTrigger request
	DeleteUsageTriggerWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteUsageTriggerResponse, error)

	// FetchUsageTrigger request
	FetchUsageTriggerWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchUsageTriggerResponse, error)

	// UpdateUsageTrigger request with any body
	UpdateUsageTriggerWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsageTriggerResponse, error)

	// FetchAccount request
	FetchAccountWithResponse(ctx context.Context, sid string, reqEditors ...RequestEditorFn) (*FetchAccountResponse, error)

	// UpdateAccount request with any body
	UpdateAccountWithBodyWithResponse(ctx context.Context, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error)
}

type ListAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Accounts        *[]ApiV2010Account `json:"accounts,omitempty"`
		End             *int               `json:"end,omitempty"`
		FirstPageUri    *string            `json:"first_page_uri,omitempty"`
		NextPageUri     *string            `json:"next_page_uri,omitempty"`
		Page            *int               `json:"page,omitempty"`
		PageSize        *int               `json:"page_size,omitempty"`
		PreviousPageUri *string            `json:"previous_page_uri,omitempty"`
		Start           *int               `json:"start,omitempty"`
		Uri             *string            `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010Account
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Addresses       *[]ApiV2010AccountAddress `json:"addresses,omitempty"`
		End             *int                      `json:"end,omitempty"`
		FirstPageUri    *string                   `json:"first_page_uri,omitempty"`
		NextPageUri     *string                   `json:"next_page_uri,omitempty"`
		Page            *int                      `json:"page,omitempty"`
		PageSize        *int                      `json:"page_size,omitempty"`
		PreviousPageUri *string                   `json:"previous_page_uri,omitempty"`
		Start           *int                      `json:"start,omitempty"`
		Uri             *string                   `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountAddress
}

// Status returns HTTPResponse.Status
func (r CreateAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListDependentPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		DependentPhoneNumbers *[]ApiV2010AccountAddressDependentPhoneNumber `json:"dependent_phone_numbers,omitempty"`
		End                   *int                                          `json:"end,omitempty"`
		FirstPageUri          *string                                       `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                       `json:"next_page_uri,omitempty"`
		Page                  *int                                          `json:"page,omitempty"`
		PageSize              *int                                          `json:"page_size,omitempty"`
		PreviousPageUri       *string                                       `json:"previous_page_uri,omitempty"`
		Start                 *int                                          `json:"start,omitempty"`
		Uri                   *string                                       `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListDependentPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListDependentPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountAddress
}

// Status returns HTTPResponse.Status
func (r FetchAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountAddress
}

// Status returns HTTPResponse.Status
func (r UpdateAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Applications    *[]ApiV2010AccountApplication `json:"applications,omitempty"`
		End             *int                          `json:"end,omitempty"`
		FirstPageUri    *string                       `json:"first_page_uri,omitempty"`
		NextPageUri     *string                       `json:"next_page_uri,omitempty"`
		Page            *int                          `json:"page,omitempty"`
		PageSize        *int                          `json:"page_size,omitempty"`
		PreviousPageUri *string                       `json:"previous_page_uri,omitempty"`
		Start           *int                          `json:"start,omitempty"`
		Uri             *string                       `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountApplication
}

// Status returns HTTPResponse.Status
func (r CreateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountApplication
}

// Status returns HTTPResponse.Status
func (r FetchApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateApplicationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountApplication
}

// Status returns HTTPResponse.Status
func (r UpdateApplicationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateApplicationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAuthorizedConnectAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuthorizedConnectApps *[]ApiV2010AccountAuthorizedConnectApp `json:"authorized_connect_apps,omitempty"`
		End                   *int                                   `json:"end,omitempty"`
		FirstPageUri          *string                                `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                `json:"next_page_uri,omitempty"`
		Page                  *int                                   `json:"page,omitempty"`
		PageSize              *int                                   `json:"page_size,omitempty"`
		PreviousPageUri       *string                                `json:"previous_page_uri,omitempty"`
		Start                 *int                                   `json:"start,omitempty"`
		Uri                   *string                                `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAuthorizedConnectAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAuthorizedConnectAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchAuthorizedConnectAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountAuthorizedConnectApp
}

// Status returns HTTPResponse.Status
func (r FetchAuthorizedConnectAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchAuthorizedConnectAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberCountryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Countries       *[]ApiV2010AccountAvailablePhoneNumberCountry `json:"countries,omitempty"`
		End             *int                                          `json:"end,omitempty"`
		FirstPageUri    *string                                       `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                       `json:"next_page_uri,omitempty"`
		Page            *int                                          `json:"page,omitempty"`
		PageSize        *int                                          `json:"page_size,omitempty"`
		PreviousPageUri *string                                       `json:"previous_page_uri,omitempty"`
		Start           *int                                          `json:"start,omitempty"`
		Uri             *string                                       `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberCountryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberCountryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchAvailablePhoneNumberCountryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountAvailablePhoneNumberCountry
}

// Status returns HTTPResponse.Status
func (r FetchAvailablePhoneNumberCountryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchAvailablePhoneNumberCountryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberLocalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocal `json:"available_phone_numbers,omitempty"`
		End                   *int                                                                   `json:"end,omitempty"`
		FirstPageUri          *string                                                                `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                                                `json:"next_page_uri,omitempty"`
		Page                  *int                                                                   `json:"page,omitempty"`
		PageSize              *int                                                                   `json:"page_size,omitempty"`
		PreviousPageUri       *string                                                                `json:"previous_page_uri,omitempty"`
		Start                 *int                                                                   `json:"start,omitempty"`
		Uri                   *string                                                                `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberLocalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberLocalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberMachineToMachineResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMachineToMachine `json:"available_phone_numbers,omitempty"`
		End                   *int                                                                              `json:"end,omitempty"`
		FirstPageUri          *string                                                                           `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                                                           `json:"next_page_uri,omitempty"`
		Page                  *int                                                                              `json:"page,omitempty"`
		PageSize              *int                                                                              `json:"page_size,omitempty"`
		PreviousPageUri       *string                                                                           `json:"previous_page_uri,omitempty"`
		Start                 *int                                                                              `json:"start,omitempty"`
		Uri                   *string                                                                           `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberMachineToMachineResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberMachineToMachineResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberMobileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMobile `json:"available_phone_numbers,omitempty"`
		End                   *int                                                                    `json:"end,omitempty"`
		FirstPageUri          *string                                                                 `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                                                 `json:"next_page_uri,omitempty"`
		Page                  *int                                                                    `json:"page,omitempty"`
		PageSize              *int                                                                    `json:"page_size,omitempty"`
		PreviousPageUri       *string                                                                 `json:"previous_page_uri,omitempty"`
		Start                 *int                                                                    `json:"start,omitempty"`
		Uri                   *string                                                                 `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberMobileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberMobileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberNationalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberNational `json:"available_phone_numbers,omitempty"`
		End                   *int                                                                      `json:"end,omitempty"`
		FirstPageUri          *string                                                                   `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                                                   `json:"next_page_uri,omitempty"`
		Page                  *int                                                                      `json:"page,omitempty"`
		PageSize              *int                                                                      `json:"page_size,omitempty"`
		PreviousPageUri       *string                                                                   `json:"previous_page_uri,omitempty"`
		Start                 *int                                                                      `json:"start,omitempty"`
		Uri                   *string                                                                   `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberNationalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberNationalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberSharedCostResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost `json:"available_phone_numbers,omitempty"`
		End                   *int                                                                        `json:"end,omitempty"`
		FirstPageUri          *string                                                                     `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                                                     `json:"next_page_uri,omitempty"`
		Page                  *int                                                                        `json:"page,omitempty"`
		PageSize              *int                                                                        `json:"page_size,omitempty"`
		PreviousPageUri       *string                                                                     `json:"previous_page_uri,omitempty"`
		Start                 *int                                                                        `json:"start,omitempty"`
		Uri                   *string                                                                     `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberSharedCostResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberSharedCostResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberTollFreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberTollFree `json:"available_phone_numbers,omitempty"`
		End                   *int                                                                      `json:"end,omitempty"`
		FirstPageUri          *string                                                                   `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                                                   `json:"next_page_uri,omitempty"`
		Page                  *int                                                                      `json:"page,omitempty"`
		PageSize              *int                                                                      `json:"page_size,omitempty"`
		PreviousPageUri       *string                                                                   `json:"previous_page_uri,omitempty"`
		Start                 *int                                                                      `json:"start,omitempty"`
		Uri                   *string                                                                   `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberTollFreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberTollFreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListAvailablePhoneNumberVoipResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberVoip `json:"available_phone_numbers,omitempty"`
		End                   *int                                                                  `json:"end,omitempty"`
		FirstPageUri          *string                                                               `json:"first_page_uri,omitempty"`
		NextPageUri           *string                                                               `json:"next_page_uri,omitempty"`
		Page                  *int                                                                  `json:"page,omitempty"`
		PageSize              *int                                                                  `json:"page_size,omitempty"`
		PreviousPageUri       *string                                                               `json:"previous_page_uri,omitempty"`
		Start                 *int                                                                  `json:"start,omitempty"`
		Uri                   *string                                                               `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListAvailablePhoneNumberVoipResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListAvailablePhoneNumberVoipResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchBalanceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountBalance
}

// Status returns HTTPResponse.Status
func (r FetchBalanceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchBalanceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Calls           *[]ApiV2010AccountCall `json:"calls,omitempty"`
		End             *int                   `json:"end,omitempty"`
		FirstPageUri    *string                `json:"first_page_uri,omitempty"`
		NextPageUri     *string                `json:"next_page_uri,omitempty"`
		Page            *int                   `json:"page,omitempty"`
		PageSize        *int                   `json:"page_size,omitempty"`
		PreviousPageUri *string                `json:"previous_page_uri,omitempty"`
		Start           *int                   `json:"start,omitempty"`
		Uri             *string                `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountCall
}

// Status returns HTTPResponse.Status
func (r CreateCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCallFeedbackSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountCallCallFeedbackSummary
}

// Status returns HTTPResponse.Status
func (r CreateCallFeedbackSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCallFeedbackSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallFeedbackSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallFeedbackSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallFeedbackSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCallFeedbackSummaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallCallFeedbackSummary
}

// Status returns HTTPResponse.Status
func (r FetchCallFeedbackSummaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCallFeedbackSummaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCallEventResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                            `json:"end,omitempty"`
		Events          *[]ApiV2010AccountCallCallEvent `json:"events,omitempty"`
		FirstPageUri    *string                         `json:"first_page_uri,omitempty"`
		NextPageUri     *string                         `json:"next_page_uri,omitempty"`
		Page            *int                            `json:"page,omitempty"`
		PageSize        *int                            `json:"page_size,omitempty"`
		PreviousPageUri *string                         `json:"previous_page_uri,omitempty"`
		Start           *int                            `json:"start,omitempty"`
		Uri             *string                         `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCallEventResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCallEventResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCallFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallCallFeedback
}

// Status returns HTTPResponse.Status
func (r FetchCallFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCallFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCallFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallCallFeedback
}

// Status returns HTTPResponse.Status
func (r UpdateCallFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCallFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCallNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                   `json:"end,omitempty"`
		FirstPageUri    *string                                `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                `json:"next_page_uri,omitempty"`
		Notifications   *[]ApiV2010AccountCallCallNotification `json:"notifications,omitempty"`
		Page            *int                                   `json:"page,omitempty"`
		PageSize        *int                                   `json:"page_size,omitempty"`
		PreviousPageUri *string                                `json:"previous_page_uri,omitempty"`
		Start           *int                                   `json:"start,omitempty"`
		Uri             *string                                `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCallNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCallNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCallNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallCallNotificationInstance
}

// Status returns HTTPResponse.Status
func (r FetchCallNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCallNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreatePaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountCallPayments
}

// Status returns HTTPResponse.Status
func (r CreatePaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreatePaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdatePaymentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON202      *ApiV2010AccountCallPayments
}

// Status returns HTTPResponse.Status
func (r UpdatePaymentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdatePaymentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListCallRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                `json:"end,omitempty"`
		FirstPageUri    *string                             `json:"first_page_uri,omitempty"`
		NextPageUri     *string                             `json:"next_page_uri,omitempty"`
		Page            *int                                `json:"page,omitempty"`
		PageSize        *int                                `json:"page_size,omitempty"`
		PreviousPageUri *string                             `json:"previous_page_uri,omitempty"`
		Recordings      *[]ApiV2010AccountCallCallRecording `json:"recordings,omitempty"`
		Start           *int                                `json:"start,omitempty"`
		Uri             *string                             `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListCallRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListCallRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateCallRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountCallCallRecording
}

// Status returns HTTPResponse.Status
func (r CreateCallRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateCallRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCallRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallCallRecording
}

// Status returns HTTPResponse.Status
func (r FetchCallRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCallRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCallRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallCallRecording
}

// Status returns HTTPResponse.Status
func (r UpdateCallRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCallRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSiprecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountCallSiprec
}

// Status returns HTTPResponse.Status
func (r CreateSiprecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSiprecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSiprecResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallSiprec
}

// Status returns HTTPResponse.Status
func (r UpdateSiprecResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSiprecResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountCallStream
}

// Status returns HTTPResponse.Status
func (r CreateStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateStreamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCallStream
}

// Status returns HTTPResponse.Status
func (r UpdateStreamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateStreamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCall
}

// Status returns HTTPResponse.Status
func (r FetchCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateCallResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountCall
}

// Status returns HTTPResponse.Status
func (r UpdateCallResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateCallResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Conferences     *[]ApiV2010AccountConference `json:"conferences,omitempty"`
		End             *int                         `json:"end,omitempty"`
		FirstPageUri    *string                      `json:"first_page_uri,omitempty"`
		NextPageUri     *string                      `json:"next_page_uri,omitempty"`
		Page            *int                         `json:"page,omitempty"`
		PageSize        *int                         `json:"page_size,omitempty"`
		PreviousPageUri *string                      `json:"previous_page_uri,omitempty"`
		Start           *int                         `json:"start,omitempty"`
		Uri             *string                      `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListConferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListParticipantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                    `json:"end,omitempty"`
		FirstPageUri    *string                                 `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                 `json:"next_page_uri,omitempty"`
		Page            *int                                    `json:"page,omitempty"`
		PageSize        *int                                    `json:"page_size,omitempty"`
		Participants    *[]ApiV2010AccountConferenceParticipant `json:"participants,omitempty"`
		PreviousPageUri *string                                 `json:"previous_page_uri,omitempty"`
		Start           *int                                    `json:"start,omitempty"`
		Uri             *string                                 `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListParticipantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListParticipantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateParticipantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountConferenceParticipant
}

// Status returns HTTPResponse.Status
func (r CreateParticipantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateParticipantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteParticipantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteParticipantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteParticipantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchParticipantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConferenceParticipant
}

// Status returns HTTPResponse.Status
func (r FetchParticipantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchParticipantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateParticipantResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConferenceParticipant
}

// Status returns HTTPResponse.Status
func (r UpdateParticipantResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateParticipantResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConferenceRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                            `json:"end,omitempty"`
		FirstPageUri    *string                                         `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                         `json:"next_page_uri,omitempty"`
		Page            *int                                            `json:"page,omitempty"`
		PageSize        *int                                            `json:"page_size,omitempty"`
		PreviousPageUri *string                                         `json:"previous_page_uri,omitempty"`
		Recordings      *[]ApiV2010AccountConferenceConferenceRecording `json:"recordings,omitempty"`
		Start           *int                                            `json:"start,omitempty"`
		Uri             *string                                         `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListConferenceRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConferenceRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConferenceRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConferenceRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConferenceRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchConferenceRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConferenceConferenceRecording
}

// Status returns HTTPResponse.Status
func (r FetchConferenceRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchConferenceRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConferenceRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConferenceConferenceRecording
}

// Status returns HTTPResponse.Status
func (r UpdateConferenceRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConferenceRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchConferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConference
}

// Status returns HTTPResponse.Status
func (r FetchConferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchConferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConference
}

// Status returns HTTPResponse.Status
func (r UpdateConferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListConnectAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		ConnectApps     *[]ApiV2010AccountConnectApp `json:"connect_apps,omitempty"`
		End             *int                         `json:"end,omitempty"`
		FirstPageUri    *string                      `json:"first_page_uri,omitempty"`
		NextPageUri     *string                      `json:"next_page_uri,omitempty"`
		Page            *int                         `json:"page,omitempty"`
		PageSize        *int                         `json:"page_size,omitempty"`
		PreviousPageUri *string                      `json:"previous_page_uri,omitempty"`
		Start           *int                         `json:"start,omitempty"`
		Uri             *string                      `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListConnectAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListConnectAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteConnectAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteConnectAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteConnectAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchConnectAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConnectApp
}

// Status returns HTTPResponse.Status
func (r FetchConnectAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchConnectAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateConnectAppResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountConnectApp
}

// Status returns HTTPResponse.Status
func (r UpdateConnectAppResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateConnectAppResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncomingPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End                  *int                                  `json:"end,omitempty"`
		FirstPageUri         *string                               `json:"first_page_uri,omitempty"`
		IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumber `json:"incoming_phone_numbers,omitempty"`
		NextPageUri          *string                               `json:"next_page_uri,omitempty"`
		Page                 *int                                  `json:"page,omitempty"`
		PageSize             *int                                  `json:"page_size,omitempty"`
		PreviousPageUri      *string                               `json:"previous_page_uri,omitempty"`
		Start                *int                                  `json:"start,omitempty"`
		Uri                  *string                               `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListIncomingPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncomingPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncomingPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountIncomingPhoneNumber
}

// Status returns HTTPResponse.Status
func (r CreateIncomingPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncomingPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncomingPhoneNumberLocalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End                  *int                                                          `json:"end,omitempty"`
		FirstPageUri         *string                                                       `json:"first_page_uri,omitempty"`
		IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal `json:"incoming_phone_numbers,omitempty"`
		NextPageUri          *string                                                       `json:"next_page_uri,omitempty"`
		Page                 *int                                                          `json:"page,omitempty"`
		PageSize             *int                                                          `json:"page_size,omitempty"`
		PreviousPageUri      *string                                                       `json:"previous_page_uri,omitempty"`
		Start                *int                                                          `json:"start,omitempty"`
		Uri                  *string                                                       `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListIncomingPhoneNumberLocalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncomingPhoneNumberLocalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncomingPhoneNumberLocalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal
}

// Status returns HTTPResponse.Status
func (r CreateIncomingPhoneNumberLocalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncomingPhoneNumberLocalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncomingPhoneNumberMobileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End                  *int                                                           `json:"end,omitempty"`
		FirstPageUri         *string                                                        `json:"first_page_uri,omitempty"`
		IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile `json:"incoming_phone_numbers,omitempty"`
		NextPageUri          *string                                                        `json:"next_page_uri,omitempty"`
		Page                 *int                                                           `json:"page,omitempty"`
		PageSize             *int                                                           `json:"page_size,omitempty"`
		PreviousPageUri      *string                                                        `json:"previous_page_uri,omitempty"`
		Start                *int                                                           `json:"start,omitempty"`
		Uri                  *string                                                        `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListIncomingPhoneNumberMobileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncomingPhoneNumberMobileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncomingPhoneNumberMobileResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile
}

// Status returns HTTPResponse.Status
func (r CreateIncomingPhoneNumberMobileResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncomingPhoneNumberMobileResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncomingPhoneNumberTollFreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End                  *int                                                             `json:"end,omitempty"`
		FirstPageUri         *string                                                          `json:"first_page_uri,omitempty"`
		IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree `json:"incoming_phone_numbers,omitempty"`
		NextPageUri          *string                                                          `json:"next_page_uri,omitempty"`
		Page                 *int                                                             `json:"page,omitempty"`
		PageSize             *int                                                             `json:"page_size,omitempty"`
		PreviousPageUri      *string                                                          `json:"previous_page_uri,omitempty"`
		Start                *int                                                             `json:"start,omitempty"`
		Uri                  *string                                                          `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListIncomingPhoneNumberTollFreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncomingPhoneNumberTollFreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncomingPhoneNumberTollFreeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree
}

// Status returns HTTPResponse.Status
func (r CreateIncomingPhoneNumberTollFreeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncomingPhoneNumberTollFreeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncomingPhoneNumberAssignedAddOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AssignedAddOns  *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn `json:"assigned_add_ons,omitempty"`
		End             *int                                                                  `json:"end,omitempty"`
		FirstPageUri    *string                                                               `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                               `json:"next_page_uri,omitempty"`
		Page            *int                                                                  `json:"page,omitempty"`
		PageSize        *int                                                                  `json:"page_size,omitempty"`
		PreviousPageUri *string                                                               `json:"previous_page_uri,omitempty"`
		Start           *int                                                                  `json:"start,omitempty"`
		Uri             *string                                                               `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListIncomingPhoneNumberAssignedAddOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncomingPhoneNumberAssignedAddOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateIncomingPhoneNumberAssignedAddOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
}

// Status returns HTTPResponse.Status
func (r CreateIncomingPhoneNumberAssignedAddOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateIncomingPhoneNumberAssignedAddOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListIncomingPhoneNumberAssignedAddOnExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                                                                           `json:"end,omitempty"`
		Extensions      *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension `json:"extensions,omitempty"`
		FirstPageUri    *string                                                                                                        `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                                                                        `json:"next_page_uri,omitempty"`
		Page            *int                                                                                                           `json:"page,omitempty"`
		PageSize        *int                                                                                                           `json:"page_size,omitempty"`
		PreviousPageUri *string                                                                                                        `json:"previous_page_uri,omitempty"`
		Start           *int                                                                                                           `json:"start,omitempty"`
		Uri             *string                                                                                                        `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListIncomingPhoneNumberAssignedAddOnExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListIncomingPhoneNumberAssignedAddOnExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchIncomingPhoneNumberAssignedAddOnExtensionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension
}

// Status returns HTTPResponse.Status
func (r FetchIncomingPhoneNumberAssignedAddOnExtensionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchIncomingPhoneNumberAssignedAddOnExtensionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncomingPhoneNumberAssignedAddOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncomingPhoneNumberAssignedAddOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncomingPhoneNumberAssignedAddOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchIncomingPhoneNumberAssignedAddOnResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
}

// Status returns HTTPResponse.Status
func (r FetchIncomingPhoneNumberAssignedAddOnResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchIncomingPhoneNumberAssignedAddOnResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteIncomingPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteIncomingPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteIncomingPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchIncomingPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountIncomingPhoneNumber
}

// Status returns HTTPResponse.Status
func (r FetchIncomingPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchIncomingPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateIncomingPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountIncomingPhoneNumber
}

// Status returns HTTPResponse.Status
func (r UpdateIncomingPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateIncomingPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                  `json:"end,omitempty"`
		FirstPageUri    *string               `json:"first_page_uri,omitempty"`
		Keys            *[]ApiV2010AccountKey `json:"keys,omitempty"`
		NextPageUri     *string               `json:"next_page_uri,omitempty"`
		Page            *int                  `json:"page,omitempty"`
		PageSize        *int                  `json:"page_size,omitempty"`
		PreviousPageUri *string               `json:"previous_page_uri,omitempty"`
		Start           *int                  `json:"start,omitempty"`
		Uri             *string               `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNewKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountNewKey
}

// Status returns HTTPResponse.Status
func (r CreateNewKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountKey
}

// Status returns HTTPResponse.Status
func (r FetchKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountKey
}

// Status returns HTTPResponse.Status
func (r UpdateKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                      `json:"end,omitempty"`
		FirstPageUri    *string                   `json:"first_page_uri,omitempty"`
		Messages        *[]ApiV2010AccountMessage `json:"messages,omitempty"`
		NextPageUri     *string                   `json:"next_page_uri,omitempty"`
		Page            *int                      `json:"page,omitempty"`
		PageSize        *int                      `json:"page_size,omitempty"`
		PreviousPageUri *string                   `json:"previous_page_uri,omitempty"`
		Start           *int                      `json:"start,omitempty"`
		Uri             *string                   `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountMessage
}

// Status returns HTTPResponse.Status
func (r CreateMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMessageFeedbackResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountMessageMessageFeedback
}

// Status returns HTTPResponse.Status
func (r CreateMessageFeedbackResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMessageFeedbackResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                           `json:"end,omitempty"`
		FirstPageUri    *string                        `json:"first_page_uri,omitempty"`
		MediaList       *[]ApiV2010AccountMessageMedia `json:"media_list,omitempty"`
		NextPageUri     *string                        `json:"next_page_uri,omitempty"`
		Page            *int                           `json:"page,omitempty"`
		PageSize        *int                           `json:"page_size,omitempty"`
		PreviousPageUri *string                        `json:"previous_page_uri,omitempty"`
		Start           *int                           `json:"start,omitempty"`
		Uri             *string                        `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchMediaResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountMessageMedia
}

// Status returns HTTPResponse.Status
func (r FetchMediaResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchMediaResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountMessage
}

// Status returns HTTPResponse.Status
func (r FetchMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMessageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountMessage
}

// Status returns HTTPResponse.Status
func (r UpdateMessageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMessageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                           `json:"end,omitempty"`
		FirstPageUri    *string                        `json:"first_page_uri,omitempty"`
		NextPageUri     *string                        `json:"next_page_uri,omitempty"`
		Notifications   *[]ApiV2010AccountNotification `json:"notifications,omitempty"`
		Page            *int                           `json:"page,omitempty"`
		PageSize        *int                           `json:"page_size,omitempty"`
		PreviousPageUri *string                        `json:"previous_page_uri,omitempty"`
		Start           *int                           `json:"start,omitempty"`
		Uri             *string                        `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchNotificationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountNotificationInstance
}

// Status returns HTTPResponse.Status
func (r FetchNotificationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchNotificationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListOutgoingCallerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End               *int                               `json:"end,omitempty"`
		FirstPageUri      *string                            `json:"first_page_uri,omitempty"`
		NextPageUri       *string                            `json:"next_page_uri,omitempty"`
		OutgoingCallerIds *[]ApiV2010AccountOutgoingCallerId `json:"outgoing_caller_ids,omitempty"`
		Page              *int                               `json:"page,omitempty"`
		PageSize          *int                               `json:"page_size,omitempty"`
		PreviousPageUri   *string                            `json:"previous_page_uri,omitempty"`
		Start             *int                               `json:"start,omitempty"`
		Uri               *string                            `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListOutgoingCallerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListOutgoingCallerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateValidationRequestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountValidationRequest
}

// Status returns HTTPResponse.Status
func (r CreateValidationRequestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateValidationRequestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteOutgoingCallerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteOutgoingCallerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteOutgoingCallerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchOutgoingCallerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountOutgoingCallerId
}

// Status returns HTTPResponse.Status
func (r FetchOutgoingCallerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchOutgoingCallerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateOutgoingCallerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountOutgoingCallerId
}

// Status returns HTTPResponse.Status
func (r UpdateOutgoingCallerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateOutgoingCallerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                    `json:"end,omitempty"`
		FirstPageUri    *string                 `json:"first_page_uri,omitempty"`
		NextPageUri     *string                 `json:"next_page_uri,omitempty"`
		Page            *int                    `json:"page,omitempty"`
		PageSize        *int                    `json:"page_size,omitempty"`
		PreviousPageUri *string                 `json:"previous_page_uri,omitempty"`
		Queues          *[]ApiV2010AccountQueue `json:"queues,omitempty"`
		Start           *int                    `json:"start,omitempty"`
		Uri             *string                 `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountQueue
}

// Status returns HTTPResponse.Status
func (r CreateQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                          `json:"end,omitempty"`
		FirstPageUri    *string                       `json:"first_page_uri,omitempty"`
		NextPageUri     *string                       `json:"next_page_uri,omitempty"`
		Page            *int                          `json:"page,omitempty"`
		PageSize        *int                          `json:"page_size,omitempty"`
		PreviousPageUri *string                       `json:"previous_page_uri,omitempty"`
		QueueMembers    *[]ApiV2010AccountQueueMember `json:"queue_members,omitempty"`
		Start           *int                          `json:"start,omitempty"`
		Uri             *string                       `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountQueueMember
}

// Status returns HTTPResponse.Status
func (r FetchMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountQueueMember
}

// Status returns HTTPResponse.Status
func (r UpdateMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountQueue
}

// Status returns HTTPResponse.Status
func (r FetchQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateQueueResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountQueue
}

// Status returns HTTPResponse.Status
func (r UpdateQueueResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateQueueResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                        `json:"end,omitempty"`
		FirstPageUri    *string                     `json:"first_page_uri,omitempty"`
		NextPageUri     *string                     `json:"next_page_uri,omitempty"`
		Page            *int                        `json:"page,omitempty"`
		PageSize        *int                        `json:"page_size,omitempty"`
		PreviousPageUri *string                     `json:"previous_page_uri,omitempty"`
		Recordings      *[]ApiV2010AccountRecording `json:"recordings,omitempty"`
		Start           *int                        `json:"start,omitempty"`
		Uri             *string                     `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRecordingTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                              `json:"end,omitempty"`
		FirstPageUri    *string                                           `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                           `json:"next_page_uri,omitempty"`
		Page            *int                                              `json:"page,omitempty"`
		PageSize        *int                                              `json:"page_size,omitempty"`
		PreviousPageUri *string                                           `json:"previous_page_uri,omitempty"`
		Start           *int                                              `json:"start,omitempty"`
		Transcriptions  *[]ApiV2010AccountRecordingRecordingTranscription `json:"transcriptions,omitempty"`
		Uri             *string                                           `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRecordingTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRecordingTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordingTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecordingTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordingTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchRecordingTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountRecordingRecordingTranscription
}

// Status returns HTTPResponse.Status
func (r FetchRecordingTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchRecordingTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRecordingAddOnResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AddOnResults    *[]ApiV2010AccountRecordingRecordingAddOnResult `json:"add_on_results,omitempty"`
		End             *int                                            `json:"end,omitempty"`
		FirstPageUri    *string                                         `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                         `json:"next_page_uri,omitempty"`
		Page            *int                                            `json:"page,omitempty"`
		PageSize        *int                                            `json:"page_size,omitempty"`
		PreviousPageUri *string                                         `json:"previous_page_uri,omitempty"`
		Start           *int                                            `json:"start,omitempty"`
		Uri             *string                                         `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRecordingAddOnResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRecordingAddOnResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListRecordingAddOnResultPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                                       `json:"end,omitempty"`
		FirstPageUri    *string                                                                    `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                                    `json:"next_page_uri,omitempty"`
		Page            *int                                                                       `json:"page,omitempty"`
		PageSize        *int                                                                       `json:"page_size,omitempty"`
		Payloads        *[]ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload `json:"payloads,omitempty"`
		PreviousPageUri *string                                                                    `json:"previous_page_uri,omitempty"`
		Start           *int                                                                       `json:"start,omitempty"`
		Uri             *string                                                                    `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListRecordingAddOnResultPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListRecordingAddOnResultPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordingAddOnResultPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecordingAddOnResultPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordingAddOnResultPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchRecordingAddOnResultPayloadResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload
}

// Status returns HTTPResponse.Status
func (r FetchRecordingAddOnResultPayloadResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchRecordingAddOnResultPayloadResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordingAddOnResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecordingAddOnResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordingAddOnResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchRecordingAddOnResultResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountRecordingRecordingAddOnResult
}

// Status returns HTTPResponse.Status
func (r FetchRecordingAddOnResultResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchRecordingAddOnResultResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchRecordingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountRecording
}

// Status returns HTTPResponse.Status
func (r FetchRecordingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchRecordingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipCredentialListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CredentialLists *[]ApiV2010AccountSipSipCredentialList `json:"credential_lists,omitempty"`
		End             *int                                   `json:"end,omitempty"`
		FirstPageUri    *string                                `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                `json:"next_page_uri,omitempty"`
		Page            *int                                   `json:"page,omitempty"`
		PageSize        *int                                   `json:"page_size,omitempty"`
		PreviousPageUri *string                                `json:"previous_page_uri,omitempty"`
		Start           *int                                   `json:"start,omitempty"`
		Uri             *string                                `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipCredentialListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipCredentialListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipCredentialListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipCredentialList
}

// Status returns HTTPResponse.Status
func (r CreateSipCredentialListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipCredentialListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Credentials     *[]ApiV2010AccountSipSipCredentialListSipCredential `json:"credentials,omitempty"`
		End             *int                                                `json:"end,omitempty"`
		FirstPageUri    *string                                             `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                             `json:"next_page_uri,omitempty"`
		Page            *int                                                `json:"page,omitempty"`
		PageSize        *int                                                `json:"page_size,omitempty"`
		PreviousPageUri *string                                             `json:"previous_page_uri,omitempty"`
		Start           *int                                                `json:"start,omitempty"`
		Uri             *string                                             `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipCredentialListSipCredential
}

// Status returns HTTPResponse.Status
func (r CreateSipCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipCredentialListSipCredential
}

// Status returns HTTPResponse.Status
func (r FetchSipCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSipCredentialResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipCredentialListSipCredential
}

// Status returns HTTPResponse.Status
func (r UpdateSipCredentialResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSipCredentialResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipCredentialListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipCredentialListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipCredentialListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipCredentialListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipCredentialList
}

// Status returns HTTPResponse.Status
func (r FetchSipCredentialListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipCredentialListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSipCredentialListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipCredentialList
}

// Status returns HTTPResponse.Status
func (r UpdateSipCredentialListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSipCredentialListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Domains         *[]ApiV2010AccountSipSipDomain `json:"domains,omitempty"`
		End             *int                           `json:"end,omitempty"`
		FirstPageUri    *string                        `json:"first_page_uri,omitempty"`
		NextPageUri     *string                        `json:"next_page_uri,omitempty"`
		Page            *int                           `json:"page,omitempty"`
		PageSize        *int                           `json:"page_size,omitempty"`
		PreviousPageUri *string                        `json:"previous_page_uri,omitempty"`
		Start           *int                           `json:"start,omitempty"`
		Uri             *string                        `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipDomain
}

// Status returns HTTPResponse.Status
func (r CreateSipDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipAuthCallsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Contents        *[]ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping `json:"contents,omitempty"`
		End             *int                                                                               `json:"end,omitempty"`
		FirstPageUri    *string                                                                            `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                                            `json:"next_page_uri,omitempty"`
		Page            *int                                                                               `json:"page,omitempty"`
		PageSize        *int                                                                               `json:"page_size,omitempty"`
		PreviousPageUri *string                                                                            `json:"previous_page_uri,omitempty"`
		Start           *int                                                                               `json:"start,omitempty"`
		Uri             *string                                                                            `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipAuthCallsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipAuthCallsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipAuthCallsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
}

// Status returns HTTPResponse.Status
func (r CreateSipAuthCallsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipAuthCallsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipAuthCallsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipAuthCallsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipAuthCallsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipAuthCallsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
}

// Status returns HTTPResponse.Status
func (r FetchSipAuthCallsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipAuthCallsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipAuthCallsIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Contents        *[]ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping `json:"contents,omitempty"`
		End             *int                                                                                    `json:"end,omitempty"`
		FirstPageUri    *string                                                                                 `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                                                 `json:"next_page_uri,omitempty"`
		Page            *int                                                                                    `json:"page,omitempty"`
		PageSize        *int                                                                                    `json:"page_size,omitempty"`
		PreviousPageUri *string                                                                                 `json:"previous_page_uri,omitempty"`
		Start           *int                                                                                    `json:"start,omitempty"`
		Uri             *string                                                                                 `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipAuthCallsIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipAuthCallsIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipAuthCallsIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
}

// Status returns HTTPResponse.Status
func (r CreateSipAuthCallsIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipAuthCallsIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipAuthCallsIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipAuthCallsIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipAuthCallsIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipAuthCallsIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
}

// Status returns HTTPResponse.Status
func (r FetchSipAuthCallsIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipAuthCallsIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipAuthRegistrationsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Contents        *[]ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping `json:"contents,omitempty"`
		End             *int                                                                                               `json:"end,omitempty"`
		FirstPageUri    *string                                                                                            `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                                                            `json:"next_page_uri,omitempty"`
		Page            *int                                                                                               `json:"page,omitempty"`
		PageSize        *int                                                                                               `json:"page_size,omitempty"`
		PreviousPageUri *string                                                                                            `json:"previous_page_uri,omitempty"`
		Start           *int                                                                                               `json:"start,omitempty"`
		Uri             *string                                                                                            `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipAuthRegistrationsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipAuthRegistrationsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipAuthRegistrationsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
}

// Status returns HTTPResponse.Status
func (r CreateSipAuthRegistrationsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipAuthRegistrationsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipAuthRegistrationsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipAuthRegistrationsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipAuthRegistrationsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipAuthRegistrationsCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
}

// Status returns HTTPResponse.Status
func (r FetchSipAuthRegistrationsCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipAuthRegistrationsCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CredentialListMappings *[]ApiV2010AccountSipSipDomainSipCredentialListMapping `json:"credential_list_mappings,omitempty"`
		End                    *int                                                   `json:"end,omitempty"`
		FirstPageUri           *string                                                `json:"first_page_uri,omitempty"`
		NextPageUri            *string                                                `json:"next_page_uri,omitempty"`
		Page                   *int                                                   `json:"page,omitempty"`
		PageSize               *int                                                   `json:"page_size,omitempty"`
		PreviousPageUri        *string                                                `json:"previous_page_uri,omitempty"`
		Start                  *int                                                   `json:"start,omitempty"`
		Uri                    *string                                                `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipDomainSipCredentialListMapping
}

// Status returns HTTPResponse.Status
func (r CreateSipCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipCredentialListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipDomainSipCredentialListMapping
}

// Status returns HTTPResponse.Status
func (r FetchSipCredentialListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipCredentialListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End                         *int                                                        `json:"end,omitempty"`
		FirstPageUri                *string                                                     `json:"first_page_uri,omitempty"`
		IpAccessControlListMappings *[]ApiV2010AccountSipSipDomainSipIpAccessControlListMapping `json:"ip_access_control_list_mappings,omitempty"`
		NextPageUri                 *string                                                     `json:"next_page_uri,omitempty"`
		Page                        *int                                                        `json:"page,omitempty"`
		PageSize                    *int                                                        `json:"page_size,omitempty"`
		PreviousPageUri             *string                                                     `json:"previous_page_uri,omitempty"`
		Start                       *int                                                        `json:"start,omitempty"`
		Uri                         *string                                                     `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
}

// Status returns HTTPResponse.Status
func (r CreateSipIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipIpAccessControlListMappingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
}

// Status returns HTTPResponse.Status
func (r FetchSipIpAccessControlListMappingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipIpAccessControlListMappingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipDomain
}

// Status returns HTTPResponse.Status
func (r FetchSipDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSipDomainResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipDomain
}

// Status returns HTTPResponse.Status
func (r UpdateSipDomainResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSipDomainResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipIpAccessControlListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End                  *int                                        `json:"end,omitempty"`
		FirstPageUri         *string                                     `json:"first_page_uri,omitempty"`
		IpAccessControlLists *[]ApiV2010AccountSipSipIpAccessControlList `json:"ip_access_control_lists,omitempty"`
		NextPageUri          *string                                     `json:"next_page_uri,omitempty"`
		Page                 *int                                        `json:"page,omitempty"`
		PageSize             *int                                        `json:"page_size,omitempty"`
		PreviousPageUri      *string                                     `json:"previous_page_uri,omitempty"`
		Start                *int                                        `json:"start,omitempty"`
		Uri                  *string                                     `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipIpAccessControlListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipIpAccessControlListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipIpAccessControlListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipIpAccessControlList
}

// Status returns HTTPResponse.Status
func (r CreateSipIpAccessControlListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipIpAccessControlListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSipIpAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                    `json:"end,omitempty"`
		FirstPageUri    *string                                                 `json:"first_page_uri,omitempty"`
		IpAddresses     *[]ApiV2010AccountSipSipIpAccessControlListSipIpAddress `json:"ip_addresses,omitempty"`
		NextPageUri     *string                                                 `json:"next_page_uri,omitempty"`
		Page            *int                                                    `json:"page,omitempty"`
		PageSize        *int                                                    `json:"page_size,omitempty"`
		PreviousPageUri *string                                                 `json:"previous_page_uri,omitempty"`
		Start           *int                                                    `json:"start,omitempty"`
		Uri             *string                                                 `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSipIpAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSipIpAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateSipIpAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountSipSipIpAccessControlListSipIpAddress
}

// Status returns HTTPResponse.Status
func (r CreateSipIpAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateSipIpAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipIpAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipIpAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipIpAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipIpAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipIpAccessControlListSipIpAddress
}

// Status returns HTTPResponse.Status
func (r FetchSipIpAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipIpAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSipIpAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipIpAccessControlListSipIpAddress
}

// Status returns HTTPResponse.Status
func (r UpdateSipIpAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSipIpAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSipIpAccessControlListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSipIpAccessControlListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSipIpAccessControlListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSipIpAccessControlListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipIpAccessControlList
}

// Status returns HTTPResponse.Status
func (r FetchSipIpAccessControlListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSipIpAccessControlListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSipIpAccessControlListResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSipSipIpAccessControlList
}

// Status returns HTTPResponse.Status
func (r UpdateSipIpAccessControlListResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSipIpAccessControlListResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListShortCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                        `json:"end,omitempty"`
		FirstPageUri    *string                     `json:"first_page_uri,omitempty"`
		NextPageUri     *string                     `json:"next_page_uri,omitempty"`
		Page            *int                        `json:"page,omitempty"`
		PageSize        *int                        `json:"page_size,omitempty"`
		PreviousPageUri *string                     `json:"previous_page_uri,omitempty"`
		ShortCodes      *[]ApiV2010AccountShortCode `json:"short_codes,omitempty"`
		Start           *int                        `json:"start,omitempty"`
		Uri             *string                     `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListShortCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListShortCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchShortCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountShortCode
}

// Status returns HTTPResponse.Status
func (r FetchShortCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchShortCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateShortCodeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountShortCode
}

// Status returns HTTPResponse.Status
func (r UpdateShortCodeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateShortCodeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListSigningKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                         `json:"end,omitempty"`
		FirstPageUri    *string                      `json:"first_page_uri,omitempty"`
		NextPageUri     *string                      `json:"next_page_uri,omitempty"`
		Page            *int                         `json:"page,omitempty"`
		PageSize        *int                         `json:"page_size,omitempty"`
		PreviousPageUri *string                      `json:"previous_page_uri,omitempty"`
		SigningKeys     *[]ApiV2010AccountSigningKey `json:"signing_keys,omitempty"`
		Start           *int                         `json:"start,omitempty"`
		Uri             *string                      `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListSigningKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListSigningKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateNewSigningKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountNewSigningKey
}

// Status returns HTTPResponse.Status
func (r CreateNewSigningKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateNewSigningKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteSigningKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteSigningKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteSigningKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchSigningKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSigningKey
}

// Status returns HTTPResponse.Status
func (r FetchSigningKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchSigningKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateSigningKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountSigningKey
}

// Status returns HTTPResponse.Status
func (r UpdateSigningKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateSigningKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTokenResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountToken
}

// Status returns HTTPResponse.Status
func (r CreateTokenResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTokenResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                            `json:"end,omitempty"`
		FirstPageUri    *string                         `json:"first_page_uri,omitempty"`
		NextPageUri     *string                         `json:"next_page_uri,omitempty"`
		Page            *int                            `json:"page,omitempty"`
		PageSize        *int                            `json:"page_size,omitempty"`
		PreviousPageUri *string                         `json:"previous_page_uri,omitempty"`
		Start           *int                            `json:"start,omitempty"`
		Transcriptions  *[]ApiV2010AccountTranscription `json:"transcriptions,omitempty"`
		Uri             *string                         `json:"uri,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchTranscriptionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountTranscription
}

// Status returns HTTPResponse.Status
func (r FetchTranscriptionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchTranscriptionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                               `json:"end,omitempty"`
		FirstPageUri    *string                            `json:"first_page_uri,omitempty"`
		NextPageUri     *string                            `json:"next_page_uri,omitempty"`
		Page            *int                               `json:"page,omitempty"`
		PageSize        *int                               `json:"page_size,omitempty"`
		PreviousPageUri *string                            `json:"previous_page_uri,omitempty"`
		Start           *int                               `json:"start,omitempty"`
		Uri             *string                            `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecord `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordAllTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                 `json:"end,omitempty"`
		FirstPageUri    *string                                              `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                              `json:"next_page_uri,omitempty"`
		Page            *int                                                 `json:"page,omitempty"`
		PageSize        *int                                                 `json:"page_size,omitempty"`
		PreviousPageUri *string                                              `json:"previous_page_uri,omitempty"`
		Start           *int                                                 `json:"start,omitempty"`
		Uri             *string                                              `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordAllTime `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordAllTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordAllTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordDailyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                               `json:"end,omitempty"`
		FirstPageUri    *string                                            `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                            `json:"next_page_uri,omitempty"`
		Page            *int                                               `json:"page,omitempty"`
		PageSize        *int                                               `json:"page_size,omitempty"`
		PreviousPageUri *string                                            `json:"previous_page_uri,omitempty"`
		Start           *int                                               `json:"start,omitempty"`
		Uri             *string                                            `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordDaily `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordDailyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordDailyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordLastMonthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                   `json:"end,omitempty"`
		FirstPageUri    *string                                                `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                `json:"next_page_uri,omitempty"`
		Page            *int                                                   `json:"page,omitempty"`
		PageSize        *int                                                   `json:"page_size,omitempty"`
		PreviousPageUri *string                                                `json:"previous_page_uri,omitempty"`
		Start           *int                                                   `json:"start,omitempty"`
		Uri             *string                                                `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordLastMonth `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordLastMonthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordLastMonthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordMonthlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                 `json:"end,omitempty"`
		FirstPageUri    *string                                              `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                              `json:"next_page_uri,omitempty"`
		Page            *int                                                 `json:"page,omitempty"`
		PageSize        *int                                                 `json:"page_size,omitempty"`
		PreviousPageUri *string                                              `json:"previous_page_uri,omitempty"`
		Start           *int                                                 `json:"start,omitempty"`
		Uri             *string                                              `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordMonthly `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordMonthlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordMonthlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordThisMonthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                   `json:"end,omitempty"`
		FirstPageUri    *string                                                `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                `json:"next_page_uri,omitempty"`
		Page            *int                                                   `json:"page,omitempty"`
		PageSize        *int                                                   `json:"page_size,omitempty"`
		PreviousPageUri *string                                                `json:"previous_page_uri,omitempty"`
		Start           *int                                                   `json:"start,omitempty"`
		Uri             *string                                                `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordThisMonth `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordThisMonthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordThisMonthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordTodayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                               `json:"end,omitempty"`
		FirstPageUri    *string                                            `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                            `json:"next_page_uri,omitempty"`
		Page            *int                                               `json:"page,omitempty"`
		PageSize        *int                                               `json:"page_size,omitempty"`
		PreviousPageUri *string                                            `json:"previous_page_uri,omitempty"`
		Start           *int                                               `json:"start,omitempty"`
		Uri             *string                                            `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordToday `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordTodayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordTodayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordYearlyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                `json:"end,omitempty"`
		FirstPageUri    *string                                             `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                             `json:"next_page_uri,omitempty"`
		Page            *int                                                `json:"page,omitempty"`
		PageSize        *int                                                `json:"page_size,omitempty"`
		PreviousPageUri *string                                             `json:"previous_page_uri,omitempty"`
		Start           *int                                                `json:"start,omitempty"`
		Uri             *string                                             `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordYearly `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordYearlyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordYearlyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageRecordYesterdayResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                                   `json:"end,omitempty"`
		FirstPageUri    *string                                                `json:"first_page_uri,omitempty"`
		NextPageUri     *string                                                `json:"next_page_uri,omitempty"`
		Page            *int                                                   `json:"page,omitempty"`
		PageSize        *int                                                   `json:"page_size,omitempty"`
		PreviousPageUri *string                                                `json:"previous_page_uri,omitempty"`
		Start           *int                                                   `json:"start,omitempty"`
		Uri             *string                                                `json:"uri,omitempty"`
		UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordYesterday `json:"usage_records,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageRecordYesterdayResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageRecordYesterdayResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ListUsageTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		End             *int                                `json:"end,omitempty"`
		FirstPageUri    *string                             `json:"first_page_uri,omitempty"`
		NextPageUri     *string                             `json:"next_page_uri,omitempty"`
		Page            *int                                `json:"page,omitempty"`
		PageSize        *int                                `json:"page_size,omitempty"`
		PreviousPageUri *string                             `json:"previous_page_uri,omitempty"`
		Start           *int                                `json:"start,omitempty"`
		Uri             *string                             `json:"uri,omitempty"`
		UsageTriggers   *[]ApiV2010AccountUsageUsageTrigger `json:"usage_triggers,omitempty"`
	}
}

// Status returns HTTPResponse.Status
func (r ListUsageTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ListUsageTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateUsageTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON201      *ApiV2010AccountUsageUsageTrigger
}

// Status returns HTTPResponse.Status
func (r CreateUsageTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateUsageTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUsageTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteUsageTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUsageTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchUsageTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountUsageUsageTrigger
}

// Status returns HTTPResponse.Status
func (r FetchUsageTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchUsageTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateUsageTriggerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010AccountUsageUsageTrigger
}

// Status returns HTTPResponse.Status
func (r UpdateUsageTriggerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateUsageTriggerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type FetchAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010Account
}

// Status returns HTTPResponse.Status
func (r FetchAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r FetchAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ApiV2010Account
}

// Status returns HTTPResponse.Status
func (r UpdateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// ListAccountWithResponse request returning *ListAccountResponse
func (c *ClientWithResponses) ListAccountWithResponse(ctx context.Context, params *ListAccountParams, reqEditors ...RequestEditorFn) (*ListAccountResponse, error) {
	rsp, err := c.ListAccount(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAccountResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// ListAddressWithResponse request returning *ListAddressResponse
func (c *ClientWithResponses) ListAddressWithResponse(ctx context.Context, accountSid string, params *ListAddressParams, reqEditors ...RequestEditorFn) (*ListAddressResponse, error) {
	rsp, err := c.ListAddress(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAddressResponse(rsp)
}

// CreateAddressWithBodyWithResponse request with arbitrary body returning *CreateAddressResponse
func (c *ClientWithResponses) CreateAddressWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAddressResponse, error) {
	rsp, err := c.CreateAddressWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAddressResponse(rsp)
}

// ListDependentPhoneNumberWithResponse request returning *ListDependentPhoneNumberResponse
func (c *ClientWithResponses) ListDependentPhoneNumberWithResponse(ctx context.Context, accountSid string, addressSid string, params *ListDependentPhoneNumberParams, reqEditors ...RequestEditorFn) (*ListDependentPhoneNumberResponse, error) {
	rsp, err := c.ListDependentPhoneNumber(ctx, accountSid, addressSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListDependentPhoneNumberResponse(rsp)
}

// DeleteAddressWithResponse request returning *DeleteAddressResponse
func (c *ClientWithResponses) DeleteAddressWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteAddressResponse, error) {
	rsp, err := c.DeleteAddress(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAddressResponse(rsp)
}

// FetchAddressWithResponse request returning *FetchAddressResponse
func (c *ClientWithResponses) FetchAddressWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchAddressResponse, error) {
	rsp, err := c.FetchAddress(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchAddressResponse(rsp)
}

// UpdateAddressWithBodyWithResponse request with arbitrary body returning *UpdateAddressResponse
func (c *ClientWithResponses) UpdateAddressWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAddressResponse, error) {
	rsp, err := c.UpdateAddressWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAddressResponse(rsp)
}

// ListApplicationWithResponse request returning *ListApplicationResponse
func (c *ClientWithResponses) ListApplicationWithResponse(ctx context.Context, accountSid string, params *ListApplicationParams, reqEditors ...RequestEditorFn) (*ListApplicationResponse, error) {
	rsp, err := c.ListApplication(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListApplicationResponse(rsp)
}

// CreateApplicationWithBodyWithResponse request with arbitrary body returning *CreateApplicationResponse
func (c *ClientWithResponses) CreateApplicationWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateApplicationResponse, error) {
	rsp, err := c.CreateApplicationWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateApplicationResponse(rsp)
}

// DeleteApplicationWithResponse request returning *DeleteApplicationResponse
func (c *ClientWithResponses) DeleteApplicationWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteApplicationResponse, error) {
	rsp, err := c.DeleteApplication(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApplicationResponse(rsp)
}

// FetchApplicationWithResponse request returning *FetchApplicationResponse
func (c *ClientWithResponses) FetchApplicationWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchApplicationResponse, error) {
	rsp, err := c.FetchApplication(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchApplicationResponse(rsp)
}

// UpdateApplicationWithBodyWithResponse request with arbitrary body returning *UpdateApplicationResponse
func (c *ClientWithResponses) UpdateApplicationWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateApplicationResponse, error) {
	rsp, err := c.UpdateApplicationWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateApplicationResponse(rsp)
}

// ListAuthorizedConnectAppWithResponse request returning *ListAuthorizedConnectAppResponse
func (c *ClientWithResponses) ListAuthorizedConnectAppWithResponse(ctx context.Context, accountSid string, params *ListAuthorizedConnectAppParams, reqEditors ...RequestEditorFn) (*ListAuthorizedConnectAppResponse, error) {
	rsp, err := c.ListAuthorizedConnectApp(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAuthorizedConnectAppResponse(rsp)
}

// FetchAuthorizedConnectAppWithResponse request returning *FetchAuthorizedConnectAppResponse
func (c *ClientWithResponses) FetchAuthorizedConnectAppWithResponse(ctx context.Context, accountSid string, connectAppSid string, reqEditors ...RequestEditorFn) (*FetchAuthorizedConnectAppResponse, error) {
	rsp, err := c.FetchAuthorizedConnectApp(ctx, accountSid, connectAppSid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchAuthorizedConnectAppResponse(rsp)
}

// ListAvailablePhoneNumberCountryWithResponse request returning *ListAvailablePhoneNumberCountryResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberCountryWithResponse(ctx context.Context, accountSid string, params *ListAvailablePhoneNumberCountryParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberCountryResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberCountry(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberCountryResponse(rsp)
}

// FetchAvailablePhoneNumberCountryWithResponse request returning *FetchAvailablePhoneNumberCountryResponse
func (c *ClientWithResponses) FetchAvailablePhoneNumberCountryWithResponse(ctx context.Context, accountSid string, countryCode string, reqEditors ...RequestEditorFn) (*FetchAvailablePhoneNumberCountryResponse, error) {
	rsp, err := c.FetchAvailablePhoneNumberCountry(ctx, accountSid, countryCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchAvailablePhoneNumberCountryResponse(rsp)
}

// ListAvailablePhoneNumberLocalWithResponse request returning *ListAvailablePhoneNumberLocalResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberLocalWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberLocalResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberLocal(ctx, accountSid, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberLocalResponse(rsp)
}

// ListAvailablePhoneNumberMachineToMachineWithResponse request returning *ListAvailablePhoneNumberMachineToMachineResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberMachineToMachineWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMachineToMachineParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberMachineToMachineResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberMachineToMachine(ctx, accountSid, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberMachineToMachineResponse(rsp)
}

// ListAvailablePhoneNumberMobileWithResponse request returning *ListAvailablePhoneNumberMobileResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberMobileWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberMobileResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberMobile(ctx, accountSid, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberMobileResponse(rsp)
}

// ListAvailablePhoneNumberNationalWithResponse request returning *ListAvailablePhoneNumberNationalResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberNationalWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberNationalParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberNationalResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberNational(ctx, accountSid, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberNationalResponse(rsp)
}

// ListAvailablePhoneNumberSharedCostWithResponse request returning *ListAvailablePhoneNumberSharedCostResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberSharedCostWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberSharedCostParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberSharedCostResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberSharedCost(ctx, accountSid, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberSharedCostResponse(rsp)
}

// ListAvailablePhoneNumberTollFreeWithResponse request returning *ListAvailablePhoneNumberTollFreeResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberTollFreeWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberTollFreeResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberTollFree(ctx, accountSid, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberTollFreeResponse(rsp)
}

// ListAvailablePhoneNumberVoipWithResponse request returning *ListAvailablePhoneNumberVoipResponse
func (c *ClientWithResponses) ListAvailablePhoneNumberVoipWithResponse(ctx context.Context, accountSid string, countryCode string, params *ListAvailablePhoneNumberVoipParams, reqEditors ...RequestEditorFn) (*ListAvailablePhoneNumberVoipResponse, error) {
	rsp, err := c.ListAvailablePhoneNumberVoip(ctx, accountSid, countryCode, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListAvailablePhoneNumberVoipResponse(rsp)
}

// FetchBalanceWithResponse request returning *FetchBalanceResponse
func (c *ClientWithResponses) FetchBalanceWithResponse(ctx context.Context, accountSid string, reqEditors ...RequestEditorFn) (*FetchBalanceResponse, error) {
	rsp, err := c.FetchBalance(ctx, accountSid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchBalanceResponse(rsp)
}

// ListCallWithResponse request returning *ListCallResponse
func (c *ClientWithResponses) ListCallWithResponse(ctx context.Context, accountSid string, params *ListCallParams, reqEditors ...RequestEditorFn) (*ListCallResponse, error) {
	rsp, err := c.ListCall(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCallResponse(rsp)
}

// CreateCallWithBodyWithResponse request with arbitrary body returning *CreateCallResponse
func (c *ClientWithResponses) CreateCallWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallResponse, error) {
	rsp, err := c.CreateCallWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCallResponse(rsp)
}

// CreateCallFeedbackSummaryWithBodyWithResponse request with arbitrary body returning *CreateCallFeedbackSummaryResponse
func (c *ClientWithResponses) CreateCallFeedbackSummaryWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallFeedbackSummaryResponse, error) {
	rsp, err := c.CreateCallFeedbackSummaryWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCallFeedbackSummaryResponse(rsp)
}

// DeleteCallFeedbackSummaryWithResponse request returning *DeleteCallFeedbackSummaryResponse
func (c *ClientWithResponses) DeleteCallFeedbackSummaryWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteCallFeedbackSummaryResponse, error) {
	rsp, err := c.DeleteCallFeedbackSummary(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallFeedbackSummaryResponse(rsp)
}

// FetchCallFeedbackSummaryWithResponse request returning *FetchCallFeedbackSummaryResponse
func (c *ClientWithResponses) FetchCallFeedbackSummaryWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallFeedbackSummaryResponse, error) {
	rsp, err := c.FetchCallFeedbackSummary(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCallFeedbackSummaryResponse(rsp)
}

// ListCallEventWithResponse request returning *ListCallEventResponse
func (c *ClientWithResponses) ListCallEventWithResponse(ctx context.Context, accountSid string, callSid string, params *ListCallEventParams, reqEditors ...RequestEditorFn) (*ListCallEventResponse, error) {
	rsp, err := c.ListCallEvent(ctx, accountSid, callSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCallEventResponse(rsp)
}

// FetchCallFeedbackWithResponse request returning *FetchCallFeedbackResponse
func (c *ClientWithResponses) FetchCallFeedbackWithResponse(ctx context.Context, accountSid string, callSid string, reqEditors ...RequestEditorFn) (*FetchCallFeedbackResponse, error) {
	rsp, err := c.FetchCallFeedback(ctx, accountSid, callSid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCallFeedbackResponse(rsp)
}

// UpdateCallFeedbackWithBodyWithResponse request with arbitrary body returning *UpdateCallFeedbackResponse
func (c *ClientWithResponses) UpdateCallFeedbackWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCallFeedbackResponse, error) {
	rsp, err := c.UpdateCallFeedbackWithBody(ctx, accountSid, callSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCallFeedbackResponse(rsp)
}

// ListCallNotificationWithResponse request returning *ListCallNotificationResponse
func (c *ClientWithResponses) ListCallNotificationWithResponse(ctx context.Context, accountSid string, callSid string, params *ListCallNotificationParams, reqEditors ...RequestEditorFn) (*ListCallNotificationResponse, error) {
	rsp, err := c.ListCallNotification(ctx, accountSid, callSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCallNotificationResponse(rsp)
}

// FetchCallNotificationWithResponse request returning *FetchCallNotificationResponse
func (c *ClientWithResponses) FetchCallNotificationWithResponse(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallNotificationResponse, error) {
	rsp, err := c.FetchCallNotification(ctx, accountSid, callSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCallNotificationResponse(rsp)
}

// CreatePaymentsWithBodyWithResponse request with arbitrary body returning *CreatePaymentsResponse
func (c *ClientWithResponses) CreatePaymentsWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreatePaymentsResponse, error) {
	rsp, err := c.CreatePaymentsWithBody(ctx, accountSid, callSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreatePaymentsResponse(rsp)
}

// UpdatePaymentsWithBodyWithResponse request with arbitrary body returning *UpdatePaymentsResponse
func (c *ClientWithResponses) UpdatePaymentsWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdatePaymentsResponse, error) {
	rsp, err := c.UpdatePaymentsWithBody(ctx, accountSid, callSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdatePaymentsResponse(rsp)
}

// ListCallRecordingWithResponse request returning *ListCallRecordingResponse
func (c *ClientWithResponses) ListCallRecordingWithResponse(ctx context.Context, accountSid string, callSid string, params *ListCallRecordingParams, reqEditors ...RequestEditorFn) (*ListCallRecordingResponse, error) {
	rsp, err := c.ListCallRecording(ctx, accountSid, callSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListCallRecordingResponse(rsp)
}

// CreateCallRecordingWithBodyWithResponse request with arbitrary body returning *CreateCallRecordingResponse
func (c *ClientWithResponses) CreateCallRecordingWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateCallRecordingResponse, error) {
	rsp, err := c.CreateCallRecordingWithBody(ctx, accountSid, callSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateCallRecordingResponse(rsp)
}

// DeleteCallRecordingWithResponse request returning *DeleteCallRecordingResponse
func (c *ClientWithResponses) DeleteCallRecordingWithResponse(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteCallRecordingResponse, error) {
	rsp, err := c.DeleteCallRecording(ctx, accountSid, callSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallRecordingResponse(rsp)
}

// FetchCallRecordingWithResponse request returning *FetchCallRecordingResponse
func (c *ClientWithResponses) FetchCallRecordingWithResponse(ctx context.Context, accountSid string, callSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallRecordingResponse, error) {
	rsp, err := c.FetchCallRecording(ctx, accountSid, callSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCallRecordingResponse(rsp)
}

// UpdateCallRecordingWithBodyWithResponse request with arbitrary body returning *UpdateCallRecordingResponse
func (c *ClientWithResponses) UpdateCallRecordingWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCallRecordingResponse, error) {
	rsp, err := c.UpdateCallRecordingWithBody(ctx, accountSid, callSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCallRecordingResponse(rsp)
}

// CreateSiprecWithBodyWithResponse request with arbitrary body returning *CreateSiprecResponse
func (c *ClientWithResponses) CreateSiprecWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSiprecResponse, error) {
	rsp, err := c.CreateSiprecWithBody(ctx, accountSid, callSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSiprecResponse(rsp)
}

// UpdateSiprecWithBodyWithResponse request with arbitrary body returning *UpdateSiprecResponse
func (c *ClientWithResponses) UpdateSiprecWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSiprecResponse, error) {
	rsp, err := c.UpdateSiprecWithBody(ctx, accountSid, callSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSiprecResponse(rsp)
}

// CreateStreamWithBodyWithResponse request with arbitrary body returning *CreateStreamResponse
func (c *ClientWithResponses) CreateStreamWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateStreamResponse, error) {
	rsp, err := c.CreateStreamWithBody(ctx, accountSid, callSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateStreamResponse(rsp)
}

// UpdateStreamWithBodyWithResponse request with arbitrary body returning *UpdateStreamResponse
func (c *ClientWithResponses) UpdateStreamWithBodyWithResponse(ctx context.Context, accountSid string, callSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateStreamResponse, error) {
	rsp, err := c.UpdateStreamWithBody(ctx, accountSid, callSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateStreamResponse(rsp)
}

// DeleteCallWithResponse request returning *DeleteCallResponse
func (c *ClientWithResponses) DeleteCallWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteCallResponse, error) {
	rsp, err := c.DeleteCall(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteCallResponse(rsp)
}

// FetchCallWithResponse request returning *FetchCallResponse
func (c *ClientWithResponses) FetchCallWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchCallResponse, error) {
	rsp, err := c.FetchCall(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchCallResponse(rsp)
}

// UpdateCallWithBodyWithResponse request with arbitrary body returning *UpdateCallResponse
func (c *ClientWithResponses) UpdateCallWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateCallResponse, error) {
	rsp, err := c.UpdateCallWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateCallResponse(rsp)
}

// ListConferenceWithResponse request returning *ListConferenceResponse
func (c *ClientWithResponses) ListConferenceWithResponse(ctx context.Context, accountSid string, params *ListConferenceParams, reqEditors ...RequestEditorFn) (*ListConferenceResponse, error) {
	rsp, err := c.ListConference(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConferenceResponse(rsp)
}

// ListParticipantWithResponse request returning *ListParticipantResponse
func (c *ClientWithResponses) ListParticipantWithResponse(ctx context.Context, accountSid string, conferenceSid string, params *ListParticipantParams, reqEditors ...RequestEditorFn) (*ListParticipantResponse, error) {
	rsp, err := c.ListParticipant(ctx, accountSid, conferenceSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListParticipantResponse(rsp)
}

// CreateParticipantWithBodyWithResponse request with arbitrary body returning *CreateParticipantResponse
func (c *ClientWithResponses) CreateParticipantWithBodyWithResponse(ctx context.Context, accountSid string, conferenceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateParticipantResponse, error) {
	rsp, err := c.CreateParticipantWithBody(ctx, accountSid, conferenceSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateParticipantResponse(rsp)
}

// DeleteParticipantWithResponse request returning *DeleteParticipantResponse
func (c *ClientWithResponses) DeleteParticipantWithResponse(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*DeleteParticipantResponse, error) {
	rsp, err := c.DeleteParticipant(ctx, accountSid, conferenceSid, callSid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteParticipantResponse(rsp)
}

// FetchParticipantWithResponse request returning *FetchParticipantResponse
func (c *ClientWithResponses) FetchParticipantWithResponse(ctx context.Context, accountSid string, conferenceSid string, callSid string, reqEditors ...RequestEditorFn) (*FetchParticipantResponse, error) {
	rsp, err := c.FetchParticipant(ctx, accountSid, conferenceSid, callSid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchParticipantResponse(rsp)
}

// UpdateParticipantWithBodyWithResponse request with arbitrary body returning *UpdateParticipantResponse
func (c *ClientWithResponses) UpdateParticipantWithBodyWithResponse(ctx context.Context, accountSid string, conferenceSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateParticipantResponse, error) {
	rsp, err := c.UpdateParticipantWithBody(ctx, accountSid, conferenceSid, callSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateParticipantResponse(rsp)
}

// ListConferenceRecordingWithResponse request returning *ListConferenceRecordingResponse
func (c *ClientWithResponses) ListConferenceRecordingWithResponse(ctx context.Context, accountSid string, conferenceSid string, params *ListConferenceRecordingParams, reqEditors ...RequestEditorFn) (*ListConferenceRecordingResponse, error) {
	rsp, err := c.ListConferenceRecording(ctx, accountSid, conferenceSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConferenceRecordingResponse(rsp)
}

// DeleteConferenceRecordingWithResponse request returning *DeleteConferenceRecordingResponse
func (c *ClientWithResponses) DeleteConferenceRecordingWithResponse(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteConferenceRecordingResponse, error) {
	rsp, err := c.DeleteConferenceRecording(ctx, accountSid, conferenceSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConferenceRecordingResponse(rsp)
}

// FetchConferenceRecordingWithResponse request returning *FetchConferenceRecordingResponse
func (c *ClientWithResponses) FetchConferenceRecordingWithResponse(ctx context.Context, accountSid string, conferenceSid string, sid string, reqEditors ...RequestEditorFn) (*FetchConferenceRecordingResponse, error) {
	rsp, err := c.FetchConferenceRecording(ctx, accountSid, conferenceSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchConferenceRecordingResponse(rsp)
}

// UpdateConferenceRecordingWithBodyWithResponse request with arbitrary body returning *UpdateConferenceRecordingResponse
func (c *ClientWithResponses) UpdateConferenceRecordingWithBodyWithResponse(ctx context.Context, accountSid string, conferenceSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConferenceRecordingResponse, error) {
	rsp, err := c.UpdateConferenceRecordingWithBody(ctx, accountSid, conferenceSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConferenceRecordingResponse(rsp)
}

// FetchConferenceWithResponse request returning *FetchConferenceResponse
func (c *ClientWithResponses) FetchConferenceWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchConferenceResponse, error) {
	rsp, err := c.FetchConference(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchConferenceResponse(rsp)
}

// UpdateConferenceWithBodyWithResponse request with arbitrary body returning *UpdateConferenceResponse
func (c *ClientWithResponses) UpdateConferenceWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConferenceResponse, error) {
	rsp, err := c.UpdateConferenceWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConferenceResponse(rsp)
}

// ListConnectAppWithResponse request returning *ListConnectAppResponse
func (c *ClientWithResponses) ListConnectAppWithResponse(ctx context.Context, accountSid string, params *ListConnectAppParams, reqEditors ...RequestEditorFn) (*ListConnectAppResponse, error) {
	rsp, err := c.ListConnectApp(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListConnectAppResponse(rsp)
}

// DeleteConnectAppWithResponse request returning *DeleteConnectAppResponse
func (c *ClientWithResponses) DeleteConnectAppWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteConnectAppResponse, error) {
	rsp, err := c.DeleteConnectApp(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteConnectAppResponse(rsp)
}

// FetchConnectAppWithResponse request returning *FetchConnectAppResponse
func (c *ClientWithResponses) FetchConnectAppWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchConnectAppResponse, error) {
	rsp, err := c.FetchConnectApp(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchConnectAppResponse(rsp)
}

// UpdateConnectAppWithBodyWithResponse request with arbitrary body returning *UpdateConnectAppResponse
func (c *ClientWithResponses) UpdateConnectAppWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateConnectAppResponse, error) {
	rsp, err := c.UpdateConnectAppWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateConnectAppResponse(rsp)
}

// ListIncomingPhoneNumberWithResponse request returning *ListIncomingPhoneNumberResponse
func (c *ClientWithResponses) ListIncomingPhoneNumberWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberResponse, error) {
	rsp, err := c.ListIncomingPhoneNumber(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncomingPhoneNumberResponse(rsp)
}

// CreateIncomingPhoneNumberWithBodyWithResponse request with arbitrary body returning *CreateIncomingPhoneNumberResponse
func (c *ClientWithResponses) CreateIncomingPhoneNumberWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberResponse, error) {
	rsp, err := c.CreateIncomingPhoneNumberWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncomingPhoneNumberResponse(rsp)
}

// ListIncomingPhoneNumberLocalWithResponse request returning *ListIncomingPhoneNumberLocalResponse
func (c *ClientWithResponses) ListIncomingPhoneNumberLocalWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberLocalParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberLocalResponse, error) {
	rsp, err := c.ListIncomingPhoneNumberLocal(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncomingPhoneNumberLocalResponse(rsp)
}

// CreateIncomingPhoneNumberLocalWithBodyWithResponse request with arbitrary body returning *CreateIncomingPhoneNumberLocalResponse
func (c *ClientWithResponses) CreateIncomingPhoneNumberLocalWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberLocalResponse, error) {
	rsp, err := c.CreateIncomingPhoneNumberLocalWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncomingPhoneNumberLocalResponse(rsp)
}

// ListIncomingPhoneNumberMobileWithResponse request returning *ListIncomingPhoneNumberMobileResponse
func (c *ClientWithResponses) ListIncomingPhoneNumberMobileWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberMobileParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberMobileResponse, error) {
	rsp, err := c.ListIncomingPhoneNumberMobile(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncomingPhoneNumberMobileResponse(rsp)
}

// CreateIncomingPhoneNumberMobileWithBodyWithResponse request with arbitrary body returning *CreateIncomingPhoneNumberMobileResponse
func (c *ClientWithResponses) CreateIncomingPhoneNumberMobileWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberMobileResponse, error) {
	rsp, err := c.CreateIncomingPhoneNumberMobileWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncomingPhoneNumberMobileResponse(rsp)
}

// ListIncomingPhoneNumberTollFreeWithResponse request returning *ListIncomingPhoneNumberTollFreeResponse
func (c *ClientWithResponses) ListIncomingPhoneNumberTollFreeWithResponse(ctx context.Context, accountSid string, params *ListIncomingPhoneNumberTollFreeParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberTollFreeResponse, error) {
	rsp, err := c.ListIncomingPhoneNumberTollFree(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncomingPhoneNumberTollFreeResponse(rsp)
}

// CreateIncomingPhoneNumberTollFreeWithBodyWithResponse request with arbitrary body returning *CreateIncomingPhoneNumberTollFreeResponse
func (c *ClientWithResponses) CreateIncomingPhoneNumberTollFreeWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberTollFreeResponse, error) {
	rsp, err := c.CreateIncomingPhoneNumberTollFreeWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncomingPhoneNumberTollFreeResponse(rsp)
}

// ListIncomingPhoneNumberAssignedAddOnWithResponse request returning *ListIncomingPhoneNumberAssignedAddOnResponse
func (c *ClientWithResponses) ListIncomingPhoneNumberAssignedAddOnWithResponse(ctx context.Context, accountSid string, resourceSid string, params *ListIncomingPhoneNumberAssignedAddOnParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberAssignedAddOnResponse, error) {
	rsp, err := c.ListIncomingPhoneNumberAssignedAddOn(ctx, accountSid, resourceSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncomingPhoneNumberAssignedAddOnResponse(rsp)
}

// CreateIncomingPhoneNumberAssignedAddOnWithBodyWithResponse request with arbitrary body returning *CreateIncomingPhoneNumberAssignedAddOnResponse
func (c *ClientWithResponses) CreateIncomingPhoneNumberAssignedAddOnWithBodyWithResponse(ctx context.Context, accountSid string, resourceSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateIncomingPhoneNumberAssignedAddOnResponse, error) {
	rsp, err := c.CreateIncomingPhoneNumberAssignedAddOnWithBody(ctx, accountSid, resourceSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateIncomingPhoneNumberAssignedAddOnResponse(rsp)
}

// ListIncomingPhoneNumberAssignedAddOnExtensionWithResponse request returning *ListIncomingPhoneNumberAssignedAddOnExtensionResponse
func (c *ClientWithResponses) ListIncomingPhoneNumberAssignedAddOnExtensionWithResponse(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, params *ListIncomingPhoneNumberAssignedAddOnExtensionParams, reqEditors ...RequestEditorFn) (*ListIncomingPhoneNumberAssignedAddOnExtensionResponse, error) {
	rsp, err := c.ListIncomingPhoneNumberAssignedAddOnExtension(ctx, accountSid, resourceSid, assignedAddOnSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListIncomingPhoneNumberAssignedAddOnExtensionResponse(rsp)
}

// FetchIncomingPhoneNumberAssignedAddOnExtensionWithResponse request returning *FetchIncomingPhoneNumberAssignedAddOnExtensionResponse
func (c *ClientWithResponses) FetchIncomingPhoneNumberAssignedAddOnExtensionWithResponse(ctx context.Context, accountSid string, resourceSid string, assignedAddOnSid string, sid string, reqEditors ...RequestEditorFn) (*FetchIncomingPhoneNumberAssignedAddOnExtensionResponse, error) {
	rsp, err := c.FetchIncomingPhoneNumberAssignedAddOnExtension(ctx, accountSid, resourceSid, assignedAddOnSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchIncomingPhoneNumberAssignedAddOnExtensionResponse(rsp)
}

// DeleteIncomingPhoneNumberAssignedAddOnWithResponse request returning *DeleteIncomingPhoneNumberAssignedAddOnResponse
func (c *ClientWithResponses) DeleteIncomingPhoneNumberAssignedAddOnWithResponse(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteIncomingPhoneNumberAssignedAddOnResponse, error) {
	rsp, err := c.DeleteIncomingPhoneNumberAssignedAddOn(ctx, accountSid, resourceSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncomingPhoneNumberAssignedAddOnResponse(rsp)
}

// FetchIncomingPhoneNumberAssignedAddOnWithResponse request returning *FetchIncomingPhoneNumberAssignedAddOnResponse
func (c *ClientWithResponses) FetchIncomingPhoneNumberAssignedAddOnWithResponse(ctx context.Context, accountSid string, resourceSid string, sid string, reqEditors ...RequestEditorFn) (*FetchIncomingPhoneNumberAssignedAddOnResponse, error) {
	rsp, err := c.FetchIncomingPhoneNumberAssignedAddOn(ctx, accountSid, resourceSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchIncomingPhoneNumberAssignedAddOnResponse(rsp)
}

// DeleteIncomingPhoneNumberWithResponse request returning *DeleteIncomingPhoneNumberResponse
func (c *ClientWithResponses) DeleteIncomingPhoneNumberWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteIncomingPhoneNumberResponse, error) {
	rsp, err := c.DeleteIncomingPhoneNumber(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteIncomingPhoneNumberResponse(rsp)
}

// FetchIncomingPhoneNumberWithResponse request returning *FetchIncomingPhoneNumberResponse
func (c *ClientWithResponses) FetchIncomingPhoneNumberWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchIncomingPhoneNumberResponse, error) {
	rsp, err := c.FetchIncomingPhoneNumber(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchIncomingPhoneNumberResponse(rsp)
}

// UpdateIncomingPhoneNumberWithBodyWithResponse request with arbitrary body returning *UpdateIncomingPhoneNumberResponse
func (c *ClientWithResponses) UpdateIncomingPhoneNumberWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateIncomingPhoneNumberResponse, error) {
	rsp, err := c.UpdateIncomingPhoneNumberWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateIncomingPhoneNumberResponse(rsp)
}

// ListKeyWithResponse request returning *ListKeyResponse
func (c *ClientWithResponses) ListKeyWithResponse(ctx context.Context, accountSid string, params *ListKeyParams, reqEditors ...RequestEditorFn) (*ListKeyResponse, error) {
	rsp, err := c.ListKey(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListKeyResponse(rsp)
}

// CreateNewKeyWithBodyWithResponse request with arbitrary body returning *CreateNewKeyResponse
func (c *ClientWithResponses) CreateNewKeyWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewKeyResponse, error) {
	rsp, err := c.CreateNewKeyWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewKeyResponse(rsp)
}

// DeleteKeyWithResponse request returning *DeleteKeyResponse
func (c *ClientWithResponses) DeleteKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteKeyResponse, error) {
	rsp, err := c.DeleteKey(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteKeyResponse(rsp)
}

// FetchKeyWithResponse request returning *FetchKeyResponse
func (c *ClientWithResponses) FetchKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchKeyResponse, error) {
	rsp, err := c.FetchKey(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchKeyResponse(rsp)
}

// UpdateKeyWithBodyWithResponse request with arbitrary body returning *UpdateKeyResponse
func (c *ClientWithResponses) UpdateKeyWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateKeyResponse, error) {
	rsp, err := c.UpdateKeyWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateKeyResponse(rsp)
}

// ListMessageWithResponse request returning *ListMessageResponse
func (c *ClientWithResponses) ListMessageWithResponse(ctx context.Context, accountSid string, params *ListMessageParams, reqEditors ...RequestEditorFn) (*ListMessageResponse, error) {
	rsp, err := c.ListMessage(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMessageResponse(rsp)
}

// CreateMessageWithBodyWithResponse request with arbitrary body returning *CreateMessageResponse
func (c *ClientWithResponses) CreateMessageWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageResponse, error) {
	rsp, err := c.CreateMessageWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageResponse(rsp)
}

// CreateMessageFeedbackWithBodyWithResponse request with arbitrary body returning *CreateMessageFeedbackResponse
func (c *ClientWithResponses) CreateMessageFeedbackWithBodyWithResponse(ctx context.Context, accountSid string, messageSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMessageFeedbackResponse, error) {
	rsp, err := c.CreateMessageFeedbackWithBody(ctx, accountSid, messageSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMessageFeedbackResponse(rsp)
}

// ListMediaWithResponse request returning *ListMediaResponse
func (c *ClientWithResponses) ListMediaWithResponse(ctx context.Context, accountSid string, messageSid string, params *ListMediaParams, reqEditors ...RequestEditorFn) (*ListMediaResponse, error) {
	rsp, err := c.ListMedia(ctx, accountSid, messageSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMediaResponse(rsp)
}

// DeleteMediaWithResponse request returning *DeleteMediaResponse
func (c *ClientWithResponses) DeleteMediaWithResponse(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteMediaResponse, error) {
	rsp, err := c.DeleteMedia(ctx, accountSid, messageSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMediaResponse(rsp)
}

// FetchMediaWithResponse request returning *FetchMediaResponse
func (c *ClientWithResponses) FetchMediaWithResponse(ctx context.Context, accountSid string, messageSid string, sid string, reqEditors ...RequestEditorFn) (*FetchMediaResponse, error) {
	rsp, err := c.FetchMedia(ctx, accountSid, messageSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchMediaResponse(rsp)
}

// DeleteMessageWithResponse request returning *DeleteMessageResponse
func (c *ClientWithResponses) DeleteMessageWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteMessageResponse, error) {
	rsp, err := c.DeleteMessage(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMessageResponse(rsp)
}

// FetchMessageWithResponse request returning *FetchMessageResponse
func (c *ClientWithResponses) FetchMessageWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchMessageResponse, error) {
	rsp, err := c.FetchMessage(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchMessageResponse(rsp)
}

// UpdateMessageWithBodyWithResponse request with arbitrary body returning *UpdateMessageResponse
func (c *ClientWithResponses) UpdateMessageWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMessageResponse, error) {
	rsp, err := c.UpdateMessageWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMessageResponse(rsp)
}

// ListNotificationWithResponse request returning *ListNotificationResponse
func (c *ClientWithResponses) ListNotificationWithResponse(ctx context.Context, accountSid string, params *ListNotificationParams, reqEditors ...RequestEditorFn) (*ListNotificationResponse, error) {
	rsp, err := c.ListNotification(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListNotificationResponse(rsp)
}

// FetchNotificationWithResponse request returning *FetchNotificationResponse
func (c *ClientWithResponses) FetchNotificationWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchNotificationResponse, error) {
	rsp, err := c.FetchNotification(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchNotificationResponse(rsp)
}

// ListOutgoingCallerIdWithResponse request returning *ListOutgoingCallerIdResponse
func (c *ClientWithResponses) ListOutgoingCallerIdWithResponse(ctx context.Context, accountSid string, params *ListOutgoingCallerIdParams, reqEditors ...RequestEditorFn) (*ListOutgoingCallerIdResponse, error) {
	rsp, err := c.ListOutgoingCallerId(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListOutgoingCallerIdResponse(rsp)
}

// CreateValidationRequestWithBodyWithResponse request with arbitrary body returning *CreateValidationRequestResponse
func (c *ClientWithResponses) CreateValidationRequestWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateValidationRequestResponse, error) {
	rsp, err := c.CreateValidationRequestWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateValidationRequestResponse(rsp)
}

// DeleteOutgoingCallerIdWithResponse request returning *DeleteOutgoingCallerIdResponse
func (c *ClientWithResponses) DeleteOutgoingCallerIdWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteOutgoingCallerIdResponse, error) {
	rsp, err := c.DeleteOutgoingCallerId(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteOutgoingCallerIdResponse(rsp)
}

// FetchOutgoingCallerIdWithResponse request returning *FetchOutgoingCallerIdResponse
func (c *ClientWithResponses) FetchOutgoingCallerIdWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchOutgoingCallerIdResponse, error) {
	rsp, err := c.FetchOutgoingCallerId(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchOutgoingCallerIdResponse(rsp)
}

// UpdateOutgoingCallerIdWithBodyWithResponse request with arbitrary body returning *UpdateOutgoingCallerIdResponse
func (c *ClientWithResponses) UpdateOutgoingCallerIdWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateOutgoingCallerIdResponse, error) {
	rsp, err := c.UpdateOutgoingCallerIdWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateOutgoingCallerIdResponse(rsp)
}

// ListQueueWithResponse request returning *ListQueueResponse
func (c *ClientWithResponses) ListQueueWithResponse(ctx context.Context, accountSid string, params *ListQueueParams, reqEditors ...RequestEditorFn) (*ListQueueResponse, error) {
	rsp, err := c.ListQueue(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListQueueResponse(rsp)
}

// CreateQueueWithBodyWithResponse request with arbitrary body returning *CreateQueueResponse
func (c *ClientWithResponses) CreateQueueWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateQueueResponse, error) {
	rsp, err := c.CreateQueueWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateQueueResponse(rsp)
}

// ListMemberWithResponse request returning *ListMemberResponse
func (c *ClientWithResponses) ListMemberWithResponse(ctx context.Context, accountSid string, queueSid string, params *ListMemberParams, reqEditors ...RequestEditorFn) (*ListMemberResponse, error) {
	rsp, err := c.ListMember(ctx, accountSid, queueSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListMemberResponse(rsp)
}

// FetchMemberWithResponse request returning *FetchMemberResponse
func (c *ClientWithResponses) FetchMemberWithResponse(ctx context.Context, accountSid string, queueSid string, callSid string, reqEditors ...RequestEditorFn) (*FetchMemberResponse, error) {
	rsp, err := c.FetchMember(ctx, accountSid, queueSid, callSid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchMemberResponse(rsp)
}

// UpdateMemberWithBodyWithResponse request with arbitrary body returning *UpdateMemberResponse
func (c *ClientWithResponses) UpdateMemberWithBodyWithResponse(ctx context.Context, accountSid string, queueSid string, callSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateMemberResponse, error) {
	rsp, err := c.UpdateMemberWithBody(ctx, accountSid, queueSid, callSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateMemberResponse(rsp)
}

// DeleteQueueWithResponse request returning *DeleteQueueResponse
func (c *ClientWithResponses) DeleteQueueWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteQueueResponse, error) {
	rsp, err := c.DeleteQueue(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteQueueResponse(rsp)
}

// FetchQueueWithResponse request returning *FetchQueueResponse
func (c *ClientWithResponses) FetchQueueWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchQueueResponse, error) {
	rsp, err := c.FetchQueue(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchQueueResponse(rsp)
}

// UpdateQueueWithBodyWithResponse request with arbitrary body returning *UpdateQueueResponse
func (c *ClientWithResponses) UpdateQueueWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateQueueResponse, error) {
	rsp, err := c.UpdateQueueWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateQueueResponse(rsp)
}

// ListRecordingWithResponse request returning *ListRecordingResponse
func (c *ClientWithResponses) ListRecordingWithResponse(ctx context.Context, accountSid string, params *ListRecordingParams, reqEditors ...RequestEditorFn) (*ListRecordingResponse, error) {
	rsp, err := c.ListRecording(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRecordingResponse(rsp)
}

// ListRecordingTranscriptionWithResponse request returning *ListRecordingTranscriptionResponse
func (c *ClientWithResponses) ListRecordingTranscriptionWithResponse(ctx context.Context, accountSid string, recordingSid string, params *ListRecordingTranscriptionParams, reqEditors ...RequestEditorFn) (*ListRecordingTranscriptionResponse, error) {
	rsp, err := c.ListRecordingTranscription(ctx, accountSid, recordingSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRecordingTranscriptionResponse(rsp)
}

// DeleteRecordingTranscriptionWithResponse request returning *DeleteRecordingTranscriptionResponse
func (c *ClientWithResponses) DeleteRecordingTranscriptionWithResponse(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingTranscriptionResponse, error) {
	rsp, err := c.DeleteRecordingTranscription(ctx, accountSid, recordingSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingTranscriptionResponse(rsp)
}

// FetchRecordingTranscriptionWithResponse request returning *FetchRecordingTranscriptionResponse
func (c *ClientWithResponses) FetchRecordingTranscriptionWithResponse(ctx context.Context, accountSid string, recordingSid string, sid string, reqEditors ...RequestEditorFn) (*FetchRecordingTranscriptionResponse, error) {
	rsp, err := c.FetchRecordingTranscription(ctx, accountSid, recordingSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchRecordingTranscriptionResponse(rsp)
}

// ListRecordingAddOnResultWithResponse request returning *ListRecordingAddOnResultResponse
func (c *ClientWithResponses) ListRecordingAddOnResultWithResponse(ctx context.Context, accountSid string, referenceSid string, params *ListRecordingAddOnResultParams, reqEditors ...RequestEditorFn) (*ListRecordingAddOnResultResponse, error) {
	rsp, err := c.ListRecordingAddOnResult(ctx, accountSid, referenceSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRecordingAddOnResultResponse(rsp)
}

// ListRecordingAddOnResultPayloadWithResponse request returning *ListRecordingAddOnResultPayloadResponse
func (c *ClientWithResponses) ListRecordingAddOnResultPayloadWithResponse(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, params *ListRecordingAddOnResultPayloadParams, reqEditors ...RequestEditorFn) (*ListRecordingAddOnResultPayloadResponse, error) {
	rsp, err := c.ListRecordingAddOnResultPayload(ctx, accountSid, referenceSid, addOnResultSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListRecordingAddOnResultPayloadResponse(rsp)
}

// DeleteRecordingAddOnResultPayloadWithResponse request returning *DeleteRecordingAddOnResultPayloadResponse
func (c *ClientWithResponses) DeleteRecordingAddOnResultPayloadWithResponse(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingAddOnResultPayloadResponse, error) {
	rsp, err := c.DeleteRecordingAddOnResultPayload(ctx, accountSid, referenceSid, addOnResultSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingAddOnResultPayloadResponse(rsp)
}

// FetchRecordingAddOnResultPayloadWithResponse request returning *FetchRecordingAddOnResultPayloadResponse
func (c *ClientWithResponses) FetchRecordingAddOnResultPayloadWithResponse(ctx context.Context, accountSid string, referenceSid string, addOnResultSid string, sid string, reqEditors ...RequestEditorFn) (*FetchRecordingAddOnResultPayloadResponse, error) {
	rsp, err := c.FetchRecordingAddOnResultPayload(ctx, accountSid, referenceSid, addOnResultSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchRecordingAddOnResultPayloadResponse(rsp)
}

// DeleteRecordingAddOnResultWithResponse request returning *DeleteRecordingAddOnResultResponse
func (c *ClientWithResponses) DeleteRecordingAddOnResultWithResponse(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingAddOnResultResponse, error) {
	rsp, err := c.DeleteRecordingAddOnResult(ctx, accountSid, referenceSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingAddOnResultResponse(rsp)
}

// FetchRecordingAddOnResultWithResponse request returning *FetchRecordingAddOnResultResponse
func (c *ClientWithResponses) FetchRecordingAddOnResultWithResponse(ctx context.Context, accountSid string, referenceSid string, sid string, reqEditors ...RequestEditorFn) (*FetchRecordingAddOnResultResponse, error) {
	rsp, err := c.FetchRecordingAddOnResult(ctx, accountSid, referenceSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchRecordingAddOnResultResponse(rsp)
}

// DeleteRecordingWithResponse request returning *DeleteRecordingResponse
func (c *ClientWithResponses) DeleteRecordingWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteRecordingResponse, error) {
	rsp, err := c.DeleteRecording(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRecordingResponse(rsp)
}

// FetchRecordingWithResponse request returning *FetchRecordingResponse
func (c *ClientWithResponses) FetchRecordingWithResponse(ctx context.Context, accountSid string, sid string, params *FetchRecordingParams, reqEditors ...RequestEditorFn) (*FetchRecordingResponse, error) {
	rsp, err := c.FetchRecording(ctx, accountSid, sid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchRecordingResponse(rsp)
}

// ListSipCredentialListWithResponse request returning *ListSipCredentialListResponse
func (c *ClientWithResponses) ListSipCredentialListWithResponse(ctx context.Context, accountSid string, params *ListSipCredentialListParams, reqEditors ...RequestEditorFn) (*ListSipCredentialListResponse, error) {
	rsp, err := c.ListSipCredentialList(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipCredentialListResponse(rsp)
}

// CreateSipCredentialListWithBodyWithResponse request with arbitrary body returning *CreateSipCredentialListResponse
func (c *ClientWithResponses) CreateSipCredentialListWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipCredentialListResponse, error) {
	rsp, err := c.CreateSipCredentialListWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipCredentialListResponse(rsp)
}

// ListSipCredentialWithResponse request returning *ListSipCredentialResponse
func (c *ClientWithResponses) ListSipCredentialWithResponse(ctx context.Context, accountSid string, credentialListSid string, params *ListSipCredentialParams, reqEditors ...RequestEditorFn) (*ListSipCredentialResponse, error) {
	rsp, err := c.ListSipCredential(ctx, accountSid, credentialListSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipCredentialResponse(rsp)
}

// CreateSipCredentialWithBodyWithResponse request with arbitrary body returning *CreateSipCredentialResponse
func (c *ClientWithResponses) CreateSipCredentialWithBodyWithResponse(ctx context.Context, accountSid string, credentialListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipCredentialResponse, error) {
	rsp, err := c.CreateSipCredentialWithBody(ctx, accountSid, credentialListSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipCredentialResponse(rsp)
}

// DeleteSipCredentialWithResponse request returning *DeleteSipCredentialResponse
func (c *ClientWithResponses) DeleteSipCredentialWithResponse(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipCredentialResponse, error) {
	rsp, err := c.DeleteSipCredential(ctx, accountSid, credentialListSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipCredentialResponse(rsp)
}

// FetchSipCredentialWithResponse request returning *FetchSipCredentialResponse
func (c *ClientWithResponses) FetchSipCredentialWithResponse(ctx context.Context, accountSid string, credentialListSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipCredentialResponse, error) {
	rsp, err := c.FetchSipCredential(ctx, accountSid, credentialListSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipCredentialResponse(rsp)
}

// UpdateSipCredentialWithBodyWithResponse request with arbitrary body returning *UpdateSipCredentialResponse
func (c *ClientWithResponses) UpdateSipCredentialWithBodyWithResponse(ctx context.Context, accountSid string, credentialListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipCredentialResponse, error) {
	rsp, err := c.UpdateSipCredentialWithBody(ctx, accountSid, credentialListSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSipCredentialResponse(rsp)
}

// DeleteSipCredentialListWithResponse request returning *DeleteSipCredentialListResponse
func (c *ClientWithResponses) DeleteSipCredentialListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipCredentialListResponse, error) {
	rsp, err := c.DeleteSipCredentialList(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipCredentialListResponse(rsp)
}

// FetchSipCredentialListWithResponse request returning *FetchSipCredentialListResponse
func (c *ClientWithResponses) FetchSipCredentialListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipCredentialListResponse, error) {
	rsp, err := c.FetchSipCredentialList(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipCredentialListResponse(rsp)
}

// UpdateSipCredentialListWithBodyWithResponse request with arbitrary body returning *UpdateSipCredentialListResponse
func (c *ClientWithResponses) UpdateSipCredentialListWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipCredentialListResponse, error) {
	rsp, err := c.UpdateSipCredentialListWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSipCredentialListResponse(rsp)
}

// ListSipDomainWithResponse request returning *ListSipDomainResponse
func (c *ClientWithResponses) ListSipDomainWithResponse(ctx context.Context, accountSid string, params *ListSipDomainParams, reqEditors ...RequestEditorFn) (*ListSipDomainResponse, error) {
	rsp, err := c.ListSipDomain(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipDomainResponse(rsp)
}

// CreateSipDomainWithBodyWithResponse request with arbitrary body returning *CreateSipDomainResponse
func (c *ClientWithResponses) CreateSipDomainWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipDomainResponse, error) {
	rsp, err := c.CreateSipDomainWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipDomainResponse(rsp)
}

// ListSipAuthCallsCredentialListMappingWithResponse request returning *ListSipAuthCallsCredentialListMappingResponse
func (c *ClientWithResponses) ListSipAuthCallsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*ListSipAuthCallsCredentialListMappingResponse, error) {
	rsp, err := c.ListSipAuthCallsCredentialListMapping(ctx, accountSid, domainSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipAuthCallsCredentialListMappingResponse(rsp)
}

// CreateSipAuthCallsCredentialListMappingWithBodyWithResponse request with arbitrary body returning *CreateSipAuthCallsCredentialListMappingResponse
func (c *ClientWithResponses) CreateSipAuthCallsCredentialListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipAuthCallsCredentialListMappingResponse, error) {
	rsp, err := c.CreateSipAuthCallsCredentialListMappingWithBody(ctx, accountSid, domainSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipAuthCallsCredentialListMappingResponse(rsp)
}

// DeleteSipAuthCallsCredentialListMappingWithResponse request returning *DeleteSipAuthCallsCredentialListMappingResponse
func (c *ClientWithResponses) DeleteSipAuthCallsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipAuthCallsCredentialListMappingResponse, error) {
	rsp, err := c.DeleteSipAuthCallsCredentialListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipAuthCallsCredentialListMappingResponse(rsp)
}

// FetchSipAuthCallsCredentialListMappingWithResponse request returning *FetchSipAuthCallsCredentialListMappingResponse
func (c *ClientWithResponses) FetchSipAuthCallsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipAuthCallsCredentialListMappingResponse, error) {
	rsp, err := c.FetchSipAuthCallsCredentialListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipAuthCallsCredentialListMappingResponse(rsp)
}

// ListSipAuthCallsIpAccessControlListMappingWithResponse request returning *ListSipAuthCallsIpAccessControlListMappingResponse
func (c *ClientWithResponses) ListSipAuthCallsIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthCallsIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*ListSipAuthCallsIpAccessControlListMappingResponse, error) {
	rsp, err := c.ListSipAuthCallsIpAccessControlListMapping(ctx, accountSid, domainSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipAuthCallsIpAccessControlListMappingResponse(rsp)
}

// CreateSipAuthCallsIpAccessControlListMappingWithBodyWithResponse request with arbitrary body returning *CreateSipAuthCallsIpAccessControlListMappingResponse
func (c *ClientWithResponses) CreateSipAuthCallsIpAccessControlListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipAuthCallsIpAccessControlListMappingResponse, error) {
	rsp, err := c.CreateSipAuthCallsIpAccessControlListMappingWithBody(ctx, accountSid, domainSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipAuthCallsIpAccessControlListMappingResponse(rsp)
}

// DeleteSipAuthCallsIpAccessControlListMappingWithResponse request returning *DeleteSipAuthCallsIpAccessControlListMappingResponse
func (c *ClientWithResponses) DeleteSipAuthCallsIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipAuthCallsIpAccessControlListMappingResponse, error) {
	rsp, err := c.DeleteSipAuthCallsIpAccessControlListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipAuthCallsIpAccessControlListMappingResponse(rsp)
}

// FetchSipAuthCallsIpAccessControlListMappingWithResponse request returning *FetchSipAuthCallsIpAccessControlListMappingResponse
func (c *ClientWithResponses) FetchSipAuthCallsIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipAuthCallsIpAccessControlListMappingResponse, error) {
	rsp, err := c.FetchSipAuthCallsIpAccessControlListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipAuthCallsIpAccessControlListMappingResponse(rsp)
}

// ListSipAuthRegistrationsCredentialListMappingWithResponse request returning *ListSipAuthRegistrationsCredentialListMappingResponse
func (c *ClientWithResponses) ListSipAuthRegistrationsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipAuthRegistrationsCredentialListMappingParams, reqEditors ...RequestEditorFn) (*ListSipAuthRegistrationsCredentialListMappingResponse, error) {
	rsp, err := c.ListSipAuthRegistrationsCredentialListMapping(ctx, accountSid, domainSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipAuthRegistrationsCredentialListMappingResponse(rsp)
}

// CreateSipAuthRegistrationsCredentialListMappingWithBodyWithResponse request with arbitrary body returning *CreateSipAuthRegistrationsCredentialListMappingResponse
func (c *ClientWithResponses) CreateSipAuthRegistrationsCredentialListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipAuthRegistrationsCredentialListMappingResponse, error) {
	rsp, err := c.CreateSipAuthRegistrationsCredentialListMappingWithBody(ctx, accountSid, domainSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipAuthRegistrationsCredentialListMappingResponse(rsp)
}

// DeleteSipAuthRegistrationsCredentialListMappingWithResponse request returning *DeleteSipAuthRegistrationsCredentialListMappingResponse
func (c *ClientWithResponses) DeleteSipAuthRegistrationsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipAuthRegistrationsCredentialListMappingResponse, error) {
	rsp, err := c.DeleteSipAuthRegistrationsCredentialListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipAuthRegistrationsCredentialListMappingResponse(rsp)
}

// FetchSipAuthRegistrationsCredentialListMappingWithResponse request returning *FetchSipAuthRegistrationsCredentialListMappingResponse
func (c *ClientWithResponses) FetchSipAuthRegistrationsCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipAuthRegistrationsCredentialListMappingResponse, error) {
	rsp, err := c.FetchSipAuthRegistrationsCredentialListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipAuthRegistrationsCredentialListMappingResponse(rsp)
}

// ListSipCredentialListMappingWithResponse request returning *ListSipCredentialListMappingResponse
func (c *ClientWithResponses) ListSipCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipCredentialListMappingParams, reqEditors ...RequestEditorFn) (*ListSipCredentialListMappingResponse, error) {
	rsp, err := c.ListSipCredentialListMapping(ctx, accountSid, domainSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipCredentialListMappingResponse(rsp)
}

// CreateSipCredentialListMappingWithBodyWithResponse request with arbitrary body returning *CreateSipCredentialListMappingResponse
func (c *ClientWithResponses) CreateSipCredentialListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipCredentialListMappingResponse, error) {
	rsp, err := c.CreateSipCredentialListMappingWithBody(ctx, accountSid, domainSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipCredentialListMappingResponse(rsp)
}

// DeleteSipCredentialListMappingWithResponse request returning *DeleteSipCredentialListMappingResponse
func (c *ClientWithResponses) DeleteSipCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipCredentialListMappingResponse, error) {
	rsp, err := c.DeleteSipCredentialListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipCredentialListMappingResponse(rsp)
}

// FetchSipCredentialListMappingWithResponse request returning *FetchSipCredentialListMappingResponse
func (c *ClientWithResponses) FetchSipCredentialListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipCredentialListMappingResponse, error) {
	rsp, err := c.FetchSipCredentialListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipCredentialListMappingResponse(rsp)
}

// ListSipIpAccessControlListMappingWithResponse request returning *ListSipIpAccessControlListMappingResponse
func (c *ClientWithResponses) ListSipIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, params *ListSipIpAccessControlListMappingParams, reqEditors ...RequestEditorFn) (*ListSipIpAccessControlListMappingResponse, error) {
	rsp, err := c.ListSipIpAccessControlListMapping(ctx, accountSid, domainSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipIpAccessControlListMappingResponse(rsp)
}

// CreateSipIpAccessControlListMappingWithBodyWithResponse request with arbitrary body returning *CreateSipIpAccessControlListMappingResponse
func (c *ClientWithResponses) CreateSipIpAccessControlListMappingWithBodyWithResponse(ctx context.Context, accountSid string, domainSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipIpAccessControlListMappingResponse, error) {
	rsp, err := c.CreateSipIpAccessControlListMappingWithBody(ctx, accountSid, domainSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipIpAccessControlListMappingResponse(rsp)
}

// DeleteSipIpAccessControlListMappingWithResponse request returning *DeleteSipIpAccessControlListMappingResponse
func (c *ClientWithResponses) DeleteSipIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipIpAccessControlListMappingResponse, error) {
	rsp, err := c.DeleteSipIpAccessControlListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipIpAccessControlListMappingResponse(rsp)
}

// FetchSipIpAccessControlListMappingWithResponse request returning *FetchSipIpAccessControlListMappingResponse
func (c *ClientWithResponses) FetchSipIpAccessControlListMappingWithResponse(ctx context.Context, accountSid string, domainSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipIpAccessControlListMappingResponse, error) {
	rsp, err := c.FetchSipIpAccessControlListMapping(ctx, accountSid, domainSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipIpAccessControlListMappingResponse(rsp)
}

// DeleteSipDomainWithResponse request returning *DeleteSipDomainResponse
func (c *ClientWithResponses) DeleteSipDomainWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipDomainResponse, error) {
	rsp, err := c.DeleteSipDomain(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipDomainResponse(rsp)
}

// FetchSipDomainWithResponse request returning *FetchSipDomainResponse
func (c *ClientWithResponses) FetchSipDomainWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipDomainResponse, error) {
	rsp, err := c.FetchSipDomain(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipDomainResponse(rsp)
}

// UpdateSipDomainWithBodyWithResponse request with arbitrary body returning *UpdateSipDomainResponse
func (c *ClientWithResponses) UpdateSipDomainWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipDomainResponse, error) {
	rsp, err := c.UpdateSipDomainWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSipDomainResponse(rsp)
}

// ListSipIpAccessControlListWithResponse request returning *ListSipIpAccessControlListResponse
func (c *ClientWithResponses) ListSipIpAccessControlListWithResponse(ctx context.Context, accountSid string, params *ListSipIpAccessControlListParams, reqEditors ...RequestEditorFn) (*ListSipIpAccessControlListResponse, error) {
	rsp, err := c.ListSipIpAccessControlList(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipIpAccessControlListResponse(rsp)
}

// CreateSipIpAccessControlListWithBodyWithResponse request with arbitrary body returning *CreateSipIpAccessControlListResponse
func (c *ClientWithResponses) CreateSipIpAccessControlListWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipIpAccessControlListResponse, error) {
	rsp, err := c.CreateSipIpAccessControlListWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipIpAccessControlListResponse(rsp)
}

// ListSipIpAddressWithResponse request returning *ListSipIpAddressResponse
func (c *ClientWithResponses) ListSipIpAddressWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, params *ListSipIpAddressParams, reqEditors ...RequestEditorFn) (*ListSipIpAddressResponse, error) {
	rsp, err := c.ListSipIpAddress(ctx, accountSid, ipAccessControlListSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSipIpAddressResponse(rsp)
}

// CreateSipIpAddressWithBodyWithResponse request with arbitrary body returning *CreateSipIpAddressResponse
func (c *ClientWithResponses) CreateSipIpAddressWithBodyWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateSipIpAddressResponse, error) {
	rsp, err := c.CreateSipIpAddressWithBody(ctx, accountSid, ipAccessControlListSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateSipIpAddressResponse(rsp)
}

// DeleteSipIpAddressWithResponse request returning *DeleteSipIpAddressResponse
func (c *ClientWithResponses) DeleteSipIpAddressWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipIpAddressResponse, error) {
	rsp, err := c.DeleteSipIpAddress(ctx, accountSid, ipAccessControlListSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipIpAddressResponse(rsp)
}

// FetchSipIpAddressWithResponse request returning *FetchSipIpAddressResponse
func (c *ClientWithResponses) FetchSipIpAddressWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipIpAddressResponse, error) {
	rsp, err := c.FetchSipIpAddress(ctx, accountSid, ipAccessControlListSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipIpAddressResponse(rsp)
}

// UpdateSipIpAddressWithBodyWithResponse request with arbitrary body returning *UpdateSipIpAddressResponse
func (c *ClientWithResponses) UpdateSipIpAddressWithBodyWithResponse(ctx context.Context, accountSid string, ipAccessControlListSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipIpAddressResponse, error) {
	rsp, err := c.UpdateSipIpAddressWithBody(ctx, accountSid, ipAccessControlListSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSipIpAddressResponse(rsp)
}

// DeleteSipIpAccessControlListWithResponse request returning *DeleteSipIpAccessControlListResponse
func (c *ClientWithResponses) DeleteSipIpAccessControlListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSipIpAccessControlListResponse, error) {
	rsp, err := c.DeleteSipIpAccessControlList(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSipIpAccessControlListResponse(rsp)
}

// FetchSipIpAccessControlListWithResponse request returning *FetchSipIpAccessControlListResponse
func (c *ClientWithResponses) FetchSipIpAccessControlListWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSipIpAccessControlListResponse, error) {
	rsp, err := c.FetchSipIpAccessControlList(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSipIpAccessControlListResponse(rsp)
}

// UpdateSipIpAccessControlListWithBodyWithResponse request with arbitrary body returning *UpdateSipIpAccessControlListResponse
func (c *ClientWithResponses) UpdateSipIpAccessControlListWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSipIpAccessControlListResponse, error) {
	rsp, err := c.UpdateSipIpAccessControlListWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSipIpAccessControlListResponse(rsp)
}

// ListShortCodeWithResponse request returning *ListShortCodeResponse
func (c *ClientWithResponses) ListShortCodeWithResponse(ctx context.Context, accountSid string, params *ListShortCodeParams, reqEditors ...RequestEditorFn) (*ListShortCodeResponse, error) {
	rsp, err := c.ListShortCode(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListShortCodeResponse(rsp)
}

// FetchShortCodeWithResponse request returning *FetchShortCodeResponse
func (c *ClientWithResponses) FetchShortCodeWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchShortCodeResponse, error) {
	rsp, err := c.FetchShortCode(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchShortCodeResponse(rsp)
}

// UpdateShortCodeWithBodyWithResponse request with arbitrary body returning *UpdateShortCodeResponse
func (c *ClientWithResponses) UpdateShortCodeWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateShortCodeResponse, error) {
	rsp, err := c.UpdateShortCodeWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateShortCodeResponse(rsp)
}

// ListSigningKeyWithResponse request returning *ListSigningKeyResponse
func (c *ClientWithResponses) ListSigningKeyWithResponse(ctx context.Context, accountSid string, params *ListSigningKeyParams, reqEditors ...RequestEditorFn) (*ListSigningKeyResponse, error) {
	rsp, err := c.ListSigningKey(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListSigningKeyResponse(rsp)
}

// CreateNewSigningKeyWithBodyWithResponse request with arbitrary body returning *CreateNewSigningKeyResponse
func (c *ClientWithResponses) CreateNewSigningKeyWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateNewSigningKeyResponse, error) {
	rsp, err := c.CreateNewSigningKeyWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateNewSigningKeyResponse(rsp)
}

// DeleteSigningKeyWithResponse request returning *DeleteSigningKeyResponse
func (c *ClientWithResponses) DeleteSigningKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteSigningKeyResponse, error) {
	rsp, err := c.DeleteSigningKey(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteSigningKeyResponse(rsp)
}

// FetchSigningKeyWithResponse request returning *FetchSigningKeyResponse
func (c *ClientWithResponses) FetchSigningKeyWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchSigningKeyResponse, error) {
	rsp, err := c.FetchSigningKey(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchSigningKeyResponse(rsp)
}

// UpdateSigningKeyWithBodyWithResponse request with arbitrary body returning *UpdateSigningKeyResponse
func (c *ClientWithResponses) UpdateSigningKeyWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateSigningKeyResponse, error) {
	rsp, err := c.UpdateSigningKeyWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateSigningKeyResponse(rsp)
}

// CreateTokenWithBodyWithResponse request with arbitrary body returning *CreateTokenResponse
func (c *ClientWithResponses) CreateTokenWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTokenResponse, error) {
	rsp, err := c.CreateTokenWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTokenResponse(rsp)
}

// ListTranscriptionWithResponse request returning *ListTranscriptionResponse
func (c *ClientWithResponses) ListTranscriptionWithResponse(ctx context.Context, accountSid string, params *ListTranscriptionParams, reqEditors ...RequestEditorFn) (*ListTranscriptionResponse, error) {
	rsp, err := c.ListTranscription(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListTranscriptionResponse(rsp)
}

// DeleteTranscriptionWithResponse request returning *DeleteTranscriptionResponse
func (c *ClientWithResponses) DeleteTranscriptionWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteTranscriptionResponse, error) {
	rsp, err := c.DeleteTranscription(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTranscriptionResponse(rsp)
}

// FetchTranscriptionWithResponse request returning *FetchTranscriptionResponse
func (c *ClientWithResponses) FetchTranscriptionWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchTranscriptionResponse, error) {
	rsp, err := c.FetchTranscription(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchTranscriptionResponse(rsp)
}

// ListUsageRecordWithResponse request returning *ListUsageRecordResponse
func (c *ClientWithResponses) ListUsageRecordWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordParams, reqEditors ...RequestEditorFn) (*ListUsageRecordResponse, error) {
	rsp, err := c.ListUsageRecord(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordResponse(rsp)
}

// ListUsageRecordAllTimeWithResponse request returning *ListUsageRecordAllTimeResponse
func (c *ClientWithResponses) ListUsageRecordAllTimeWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordAllTimeParams, reqEditors ...RequestEditorFn) (*ListUsageRecordAllTimeResponse, error) {
	rsp, err := c.ListUsageRecordAllTime(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordAllTimeResponse(rsp)
}

// ListUsageRecordDailyWithResponse request returning *ListUsageRecordDailyResponse
func (c *ClientWithResponses) ListUsageRecordDailyWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordDailyParams, reqEditors ...RequestEditorFn) (*ListUsageRecordDailyResponse, error) {
	rsp, err := c.ListUsageRecordDaily(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordDailyResponse(rsp)
}

// ListUsageRecordLastMonthWithResponse request returning *ListUsageRecordLastMonthResponse
func (c *ClientWithResponses) ListUsageRecordLastMonthWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordLastMonthParams, reqEditors ...RequestEditorFn) (*ListUsageRecordLastMonthResponse, error) {
	rsp, err := c.ListUsageRecordLastMonth(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordLastMonthResponse(rsp)
}

// ListUsageRecordMonthlyWithResponse request returning *ListUsageRecordMonthlyResponse
func (c *ClientWithResponses) ListUsageRecordMonthlyWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordMonthlyParams, reqEditors ...RequestEditorFn) (*ListUsageRecordMonthlyResponse, error) {
	rsp, err := c.ListUsageRecordMonthly(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordMonthlyResponse(rsp)
}

// ListUsageRecordThisMonthWithResponse request returning *ListUsageRecordThisMonthResponse
func (c *ClientWithResponses) ListUsageRecordThisMonthWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordThisMonthParams, reqEditors ...RequestEditorFn) (*ListUsageRecordThisMonthResponse, error) {
	rsp, err := c.ListUsageRecordThisMonth(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordThisMonthResponse(rsp)
}

// ListUsageRecordTodayWithResponse request returning *ListUsageRecordTodayResponse
func (c *ClientWithResponses) ListUsageRecordTodayWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordTodayParams, reqEditors ...RequestEditorFn) (*ListUsageRecordTodayResponse, error) {
	rsp, err := c.ListUsageRecordToday(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordTodayResponse(rsp)
}

// ListUsageRecordYearlyWithResponse request returning *ListUsageRecordYearlyResponse
func (c *ClientWithResponses) ListUsageRecordYearlyWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordYearlyParams, reqEditors ...RequestEditorFn) (*ListUsageRecordYearlyResponse, error) {
	rsp, err := c.ListUsageRecordYearly(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordYearlyResponse(rsp)
}

// ListUsageRecordYesterdayWithResponse request returning *ListUsageRecordYesterdayResponse
func (c *ClientWithResponses) ListUsageRecordYesterdayWithResponse(ctx context.Context, accountSid string, params *ListUsageRecordYesterdayParams, reqEditors ...RequestEditorFn) (*ListUsageRecordYesterdayResponse, error) {
	rsp, err := c.ListUsageRecordYesterday(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageRecordYesterdayResponse(rsp)
}

// ListUsageTriggerWithResponse request returning *ListUsageTriggerResponse
func (c *ClientWithResponses) ListUsageTriggerWithResponse(ctx context.Context, accountSid string, params *ListUsageTriggerParams, reqEditors ...RequestEditorFn) (*ListUsageTriggerResponse, error) {
	rsp, err := c.ListUsageTrigger(ctx, accountSid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseListUsageTriggerResponse(rsp)
}

// CreateUsageTriggerWithBodyWithResponse request with arbitrary body returning *CreateUsageTriggerResponse
func (c *ClientWithResponses) CreateUsageTriggerWithBodyWithResponse(ctx context.Context, accountSid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateUsageTriggerResponse, error) {
	rsp, err := c.CreateUsageTriggerWithBody(ctx, accountSid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateUsageTriggerResponse(rsp)
}

// DeleteUsageTriggerWithResponse request returning *DeleteUsageTriggerResponse
func (c *ClientWithResponses) DeleteUsageTriggerWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*DeleteUsageTriggerResponse, error) {
	rsp, err := c.DeleteUsageTrigger(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUsageTriggerResponse(rsp)
}

// FetchUsageTriggerWithResponse request returning *FetchUsageTriggerResponse
func (c *ClientWithResponses) FetchUsageTriggerWithResponse(ctx context.Context, accountSid string, sid string, reqEditors ...RequestEditorFn) (*FetchUsageTriggerResponse, error) {
	rsp, err := c.FetchUsageTrigger(ctx, accountSid, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchUsageTriggerResponse(rsp)
}

// UpdateUsageTriggerWithBodyWithResponse request with arbitrary body returning *UpdateUsageTriggerResponse
func (c *ClientWithResponses) UpdateUsageTriggerWithBodyWithResponse(ctx context.Context, accountSid string, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateUsageTriggerResponse, error) {
	rsp, err := c.UpdateUsageTriggerWithBody(ctx, accountSid, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateUsageTriggerResponse(rsp)
}

// FetchAccountWithResponse request returning *FetchAccountResponse
func (c *ClientWithResponses) FetchAccountWithResponse(ctx context.Context, sid string, reqEditors ...RequestEditorFn) (*FetchAccountResponse, error) {
	rsp, err := c.FetchAccount(ctx, sid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseFetchAccountResponse(rsp)
}

// UpdateAccountWithBodyWithResponse request with arbitrary body returning *UpdateAccountResponse
func (c *ClientWithResponses) UpdateAccountWithBodyWithResponse(ctx context.Context, sid string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAccountResponse, error) {
	rsp, err := c.UpdateAccountWithBody(ctx, sid, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAccountResponse(rsp)
}

// ParseListAccountResponse parses an HTTP response from a ListAccountWithResponse call
func ParseListAccountResponse(rsp *http.Response) (*ListAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Accounts        *[]ApiV2010Account `json:"accounts,omitempty"`
			End             *int               `json:"end,omitempty"`
			FirstPageUri    *string            `json:"first_page_uri,omitempty"`
			NextPageUri     *string            `json:"next_page_uri,omitempty"`
			Page            *int               `json:"page,omitempty"`
			PageSize        *int               `json:"page_size,omitempty"`
			PreviousPageUri *string            `json:"previous_page_uri,omitempty"`
			Start           *int               `json:"start,omitempty"`
			Uri             *string            `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListAddressResponse parses an HTTP response from a ListAddressWithResponse call
func ParseListAddressResponse(rsp *http.Response) (*ListAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Addresses       *[]ApiV2010AccountAddress `json:"addresses,omitempty"`
			End             *int                      `json:"end,omitempty"`
			FirstPageUri    *string                   `json:"first_page_uri,omitempty"`
			NextPageUri     *string                   `json:"next_page_uri,omitempty"`
			Page            *int                      `json:"page,omitempty"`
			PageSize        *int                      `json:"page_size,omitempty"`
			PreviousPageUri *string                   `json:"previous_page_uri,omitempty"`
			Start           *int                      `json:"start,omitempty"`
			Uri             *string                   `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateAddressResponse parses an HTTP response from a CreateAddressWithResponse call
func ParseCreateAddressResponse(rsp *http.Response) (*CreateAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListDependentPhoneNumberResponse parses an HTTP response from a ListDependentPhoneNumberWithResponse call
func ParseListDependentPhoneNumberResponse(rsp *http.Response) (*ListDependentPhoneNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListDependentPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			DependentPhoneNumbers *[]ApiV2010AccountAddressDependentPhoneNumber `json:"dependent_phone_numbers,omitempty"`
			End                   *int                                          `json:"end,omitempty"`
			FirstPageUri          *string                                       `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                       `json:"next_page_uri,omitempty"`
			Page                  *int                                          `json:"page,omitempty"`
			PageSize              *int                                          `json:"page_size,omitempty"`
			PreviousPageUri       *string                                       `json:"previous_page_uri,omitempty"`
			Start                 *int                                          `json:"start,omitempty"`
			Uri                   *string                                       `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteAddressResponse parses an HTTP response from a DeleteAddressWithResponse call
func ParseDeleteAddressResponse(rsp *http.Response) (*DeleteAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchAddressResponse parses an HTTP response from a FetchAddressWithResponse call
func ParseFetchAddressResponse(rsp *http.Response) (*FetchAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAddressResponse parses an HTTP response from a UpdateAddressWithResponse call
func ParseUpdateAddressResponse(rsp *http.Response) (*UpdateAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListApplicationResponse parses an HTTP response from a ListApplicationWithResponse call
func ParseListApplicationResponse(rsp *http.Response) (*ListApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Applications    *[]ApiV2010AccountApplication `json:"applications,omitempty"`
			End             *int                          `json:"end,omitempty"`
			FirstPageUri    *string                       `json:"first_page_uri,omitempty"`
			NextPageUri     *string                       `json:"next_page_uri,omitempty"`
			Page            *int                          `json:"page,omitempty"`
			PageSize        *int                          `json:"page_size,omitempty"`
			PreviousPageUri *string                       `json:"previous_page_uri,omitempty"`
			Start           *int                          `json:"start,omitempty"`
			Uri             *string                       `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateApplicationResponse parses an HTTP response from a CreateApplicationWithResponse call
func ParseCreateApplicationResponse(rsp *http.Response) (*CreateApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteApplicationResponse parses an HTTP response from a DeleteApplicationWithResponse call
func ParseDeleteApplicationResponse(rsp *http.Response) (*DeleteApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchApplicationResponse parses an HTTP response from a FetchApplicationWithResponse call
func ParseFetchApplicationResponse(rsp *http.Response) (*FetchApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateApplicationResponse parses an HTTP response from a UpdateApplicationWithResponse call
func ParseUpdateApplicationResponse(rsp *http.Response) (*UpdateApplicationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateApplicationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountApplication
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAuthorizedConnectAppResponse parses an HTTP response from a ListAuthorizedConnectAppWithResponse call
func ParseListAuthorizedConnectAppResponse(rsp *http.Response) (*ListAuthorizedConnectAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAuthorizedConnectAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuthorizedConnectApps *[]ApiV2010AccountAuthorizedConnectApp `json:"authorized_connect_apps,omitempty"`
			End                   *int                                   `json:"end,omitempty"`
			FirstPageUri          *string                                `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                `json:"next_page_uri,omitempty"`
			Page                  *int                                   `json:"page,omitempty"`
			PageSize              *int                                   `json:"page_size,omitempty"`
			PreviousPageUri       *string                                `json:"previous_page_uri,omitempty"`
			Start                 *int                                   `json:"start,omitempty"`
			Uri                   *string                                `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchAuthorizedConnectAppResponse parses an HTTP response from a FetchAuthorizedConnectAppWithResponse call
func ParseFetchAuthorizedConnectAppResponse(rsp *http.Response) (*FetchAuthorizedConnectAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchAuthorizedConnectAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountAuthorizedConnectApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberCountryResponse parses an HTTP response from a ListAvailablePhoneNumberCountryWithResponse call
func ParseListAvailablePhoneNumberCountryResponse(rsp *http.Response) (*ListAvailablePhoneNumberCountryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberCountryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Countries       *[]ApiV2010AccountAvailablePhoneNumberCountry `json:"countries,omitempty"`
			End             *int                                          `json:"end,omitempty"`
			FirstPageUri    *string                                       `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                       `json:"next_page_uri,omitempty"`
			Page            *int                                          `json:"page,omitempty"`
			PageSize        *int                                          `json:"page_size,omitempty"`
			PreviousPageUri *string                                       `json:"previous_page_uri,omitempty"`
			Start           *int                                          `json:"start,omitempty"`
			Uri             *string                                       `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchAvailablePhoneNumberCountryResponse parses an HTTP response from a FetchAvailablePhoneNumberCountryWithResponse call
func ParseFetchAvailablePhoneNumberCountryResponse(rsp *http.Response) (*FetchAvailablePhoneNumberCountryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchAvailablePhoneNumberCountryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountAvailablePhoneNumberCountry
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberLocalResponse parses an HTTP response from a ListAvailablePhoneNumberLocalWithResponse call
func ParseListAvailablePhoneNumberLocalResponse(rsp *http.Response) (*ListAvailablePhoneNumberLocalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberLocalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocal `json:"available_phone_numbers,omitempty"`
			End                   *int                                                                   `json:"end,omitempty"`
			FirstPageUri          *string                                                                `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                                                `json:"next_page_uri,omitempty"`
			Page                  *int                                                                   `json:"page,omitempty"`
			PageSize              *int                                                                   `json:"page_size,omitempty"`
			PreviousPageUri       *string                                                                `json:"previous_page_uri,omitempty"`
			Start                 *int                                                                   `json:"start,omitempty"`
			Uri                   *string                                                                `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberMachineToMachineResponse parses an HTTP response from a ListAvailablePhoneNumberMachineToMachineWithResponse call
func ParseListAvailablePhoneNumberMachineToMachineResponse(rsp *http.Response) (*ListAvailablePhoneNumberMachineToMachineResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberMachineToMachineResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMachineToMachine `json:"available_phone_numbers,omitempty"`
			End                   *int                                                                              `json:"end,omitempty"`
			FirstPageUri          *string                                                                           `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                                                           `json:"next_page_uri,omitempty"`
			Page                  *int                                                                              `json:"page,omitempty"`
			PageSize              *int                                                                              `json:"page_size,omitempty"`
			PreviousPageUri       *string                                                                           `json:"previous_page_uri,omitempty"`
			Start                 *int                                                                              `json:"start,omitempty"`
			Uri                   *string                                                                           `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberMobileResponse parses an HTTP response from a ListAvailablePhoneNumberMobileWithResponse call
func ParseListAvailablePhoneNumberMobileResponse(rsp *http.Response) (*ListAvailablePhoneNumberMobileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberMobileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMobile `json:"available_phone_numbers,omitempty"`
			End                   *int                                                                    `json:"end,omitempty"`
			FirstPageUri          *string                                                                 `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                                                 `json:"next_page_uri,omitempty"`
			Page                  *int                                                                    `json:"page,omitempty"`
			PageSize              *int                                                                    `json:"page_size,omitempty"`
			PreviousPageUri       *string                                                                 `json:"previous_page_uri,omitempty"`
			Start                 *int                                                                    `json:"start,omitempty"`
			Uri                   *string                                                                 `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberNationalResponse parses an HTTP response from a ListAvailablePhoneNumberNationalWithResponse call
func ParseListAvailablePhoneNumberNationalResponse(rsp *http.Response) (*ListAvailablePhoneNumberNationalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberNationalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberNational `json:"available_phone_numbers,omitempty"`
			End                   *int                                                                      `json:"end,omitempty"`
			FirstPageUri          *string                                                                   `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                                                   `json:"next_page_uri,omitempty"`
			Page                  *int                                                                      `json:"page,omitempty"`
			PageSize              *int                                                                      `json:"page_size,omitempty"`
			PreviousPageUri       *string                                                                   `json:"previous_page_uri,omitempty"`
			Start                 *int                                                                      `json:"start,omitempty"`
			Uri                   *string                                                                   `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberSharedCostResponse parses an HTTP response from a ListAvailablePhoneNumberSharedCostWithResponse call
func ParseListAvailablePhoneNumberSharedCostResponse(rsp *http.Response) (*ListAvailablePhoneNumberSharedCostResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberSharedCostResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost `json:"available_phone_numbers,omitempty"`
			End                   *int                                                                        `json:"end,omitempty"`
			FirstPageUri          *string                                                                     `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                                                     `json:"next_page_uri,omitempty"`
			Page                  *int                                                                        `json:"page,omitempty"`
			PageSize              *int                                                                        `json:"page_size,omitempty"`
			PreviousPageUri       *string                                                                     `json:"previous_page_uri,omitempty"`
			Start                 *int                                                                        `json:"start,omitempty"`
			Uri                   *string                                                                     `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberTollFreeResponse parses an HTTP response from a ListAvailablePhoneNumberTollFreeWithResponse call
func ParseListAvailablePhoneNumberTollFreeResponse(rsp *http.Response) (*ListAvailablePhoneNumberTollFreeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberTollFreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberTollFree `json:"available_phone_numbers,omitempty"`
			End                   *int                                                                      `json:"end,omitempty"`
			FirstPageUri          *string                                                                   `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                                                   `json:"next_page_uri,omitempty"`
			Page                  *int                                                                      `json:"page,omitempty"`
			PageSize              *int                                                                      `json:"page_size,omitempty"`
			PreviousPageUri       *string                                                                   `json:"previous_page_uri,omitempty"`
			Start                 *int                                                                      `json:"start,omitempty"`
			Uri                   *string                                                                   `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListAvailablePhoneNumberVoipResponse parses an HTTP response from a ListAvailablePhoneNumberVoipWithResponse call
func ParseListAvailablePhoneNumberVoipResponse(rsp *http.Response) (*ListAvailablePhoneNumberVoipResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListAvailablePhoneNumberVoipResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AvailablePhoneNumbers *[]ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberVoip `json:"available_phone_numbers,omitempty"`
			End                   *int                                                                  `json:"end,omitempty"`
			FirstPageUri          *string                                                               `json:"first_page_uri,omitempty"`
			NextPageUri           *string                                                               `json:"next_page_uri,omitempty"`
			Page                  *int                                                                  `json:"page,omitempty"`
			PageSize              *int                                                                  `json:"page_size,omitempty"`
			PreviousPageUri       *string                                                               `json:"previous_page_uri,omitempty"`
			Start                 *int                                                                  `json:"start,omitempty"`
			Uri                   *string                                                               `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchBalanceResponse parses an HTTP response from a FetchBalanceWithResponse call
func ParseFetchBalanceResponse(rsp *http.Response) (*FetchBalanceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchBalanceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountBalance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCallResponse parses an HTTP response from a ListCallWithResponse call
func ParseListCallResponse(rsp *http.Response) (*ListCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Calls           *[]ApiV2010AccountCall `json:"calls,omitempty"`
			End             *int                   `json:"end,omitempty"`
			FirstPageUri    *string                `json:"first_page_uri,omitempty"`
			NextPageUri     *string                `json:"next_page_uri,omitempty"`
			Page            *int                   `json:"page,omitempty"`
			PageSize        *int                   `json:"page_size,omitempty"`
			PreviousPageUri *string                `json:"previous_page_uri,omitempty"`
			Start           *int                   `json:"start,omitempty"`
			Uri             *string                `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCallResponse parses an HTTP response from a CreateCallWithResponse call
func ParseCreateCallResponse(rsp *http.Response) (*CreateCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateCallFeedbackSummaryResponse parses an HTTP response from a CreateCallFeedbackSummaryWithResponse call
func ParseCreateCallFeedbackSummaryResponse(rsp *http.Response) (*CreateCallFeedbackSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCallFeedbackSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountCallCallFeedbackSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCallFeedbackSummaryResponse parses an HTTP response from a DeleteCallFeedbackSummaryWithResponse call
func ParseDeleteCallFeedbackSummaryResponse(rsp *http.Response) (*DeleteCallFeedbackSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallFeedbackSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchCallFeedbackSummaryResponse parses an HTTP response from a FetchCallFeedbackSummaryWithResponse call
func ParseFetchCallFeedbackSummaryResponse(rsp *http.Response) (*FetchCallFeedbackSummaryResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCallFeedbackSummaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallCallFeedbackSummary
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCallEventResponse parses an HTTP response from a ListCallEventWithResponse call
func ParseListCallEventResponse(rsp *http.Response) (*ListCallEventResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCallEventResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                            `json:"end,omitempty"`
			Events          *[]ApiV2010AccountCallCallEvent `json:"events,omitempty"`
			FirstPageUri    *string                         `json:"first_page_uri,omitempty"`
			NextPageUri     *string                         `json:"next_page_uri,omitempty"`
			Page            *int                            `json:"page,omitempty"`
			PageSize        *int                            `json:"page_size,omitempty"`
			PreviousPageUri *string                         `json:"previous_page_uri,omitempty"`
			Start           *int                            `json:"start,omitempty"`
			Uri             *string                         `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchCallFeedbackResponse parses an HTTP response from a FetchCallFeedbackWithResponse call
func ParseFetchCallFeedbackResponse(rsp *http.Response) (*FetchCallFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCallFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallCallFeedback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCallFeedbackResponse parses an HTTP response from a UpdateCallFeedbackWithResponse call
func ParseUpdateCallFeedbackResponse(rsp *http.Response) (*UpdateCallFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCallFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallCallFeedback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListCallNotificationResponse parses an HTTP response from a ListCallNotificationWithResponse call
func ParseListCallNotificationResponse(rsp *http.Response) (*ListCallNotificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCallNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                   `json:"end,omitempty"`
			FirstPageUri    *string                                `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                `json:"next_page_uri,omitempty"`
			Notifications   *[]ApiV2010AccountCallCallNotification `json:"notifications,omitempty"`
			Page            *int                                   `json:"page,omitempty"`
			PageSize        *int                                   `json:"page_size,omitempty"`
			PreviousPageUri *string                                `json:"previous_page_uri,omitempty"`
			Start           *int                                   `json:"start,omitempty"`
			Uri             *string                                `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchCallNotificationResponse parses an HTTP response from a FetchCallNotificationWithResponse call
func ParseFetchCallNotificationResponse(rsp *http.Response) (*FetchCallNotificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCallNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallCallNotificationInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreatePaymentsResponse parses an HTTP response from a CreatePaymentsWithResponse call
func ParseCreatePaymentsResponse(rsp *http.Response) (*CreatePaymentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreatePaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountCallPayments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdatePaymentsResponse parses an HTTP response from a UpdatePaymentsWithResponse call
func ParseUpdatePaymentsResponse(rsp *http.Response) (*UpdatePaymentsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdatePaymentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 202:
		var dest ApiV2010AccountCallPayments
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON202 = &dest

	}

	return response, nil
}

// ParseListCallRecordingResponse parses an HTTP response from a ListCallRecordingWithResponse call
func ParseListCallRecordingResponse(rsp *http.Response) (*ListCallRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListCallRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                `json:"end,omitempty"`
			FirstPageUri    *string                             `json:"first_page_uri,omitempty"`
			NextPageUri     *string                             `json:"next_page_uri,omitempty"`
			Page            *int                                `json:"page,omitempty"`
			PageSize        *int                                `json:"page_size,omitempty"`
			PreviousPageUri *string                             `json:"previous_page_uri,omitempty"`
			Recordings      *[]ApiV2010AccountCallCallRecording `json:"recordings,omitempty"`
			Start           *int                                `json:"start,omitempty"`
			Uri             *string                             `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateCallRecordingResponse parses an HTTP response from a CreateCallRecordingWithResponse call
func ParseCreateCallRecordingResponse(rsp *http.Response) (*CreateCallRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateCallRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountCallCallRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteCallRecordingResponse parses an HTTP response from a DeleteCallRecordingWithResponse call
func ParseDeleteCallRecordingResponse(rsp *http.Response) (*DeleteCallRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchCallRecordingResponse parses an HTTP response from a FetchCallRecordingWithResponse call
func ParseFetchCallRecordingResponse(rsp *http.Response) (*FetchCallRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCallRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallCallRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCallRecordingResponse parses an HTTP response from a UpdateCallRecordingWithResponse call
func ParseUpdateCallRecordingResponse(rsp *http.Response) (*UpdateCallRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCallRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallCallRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSiprecResponse parses an HTTP response from a CreateSiprecWithResponse call
func ParseCreateSiprecResponse(rsp *http.Response) (*CreateSiprecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSiprecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountCallSiprec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateSiprecResponse parses an HTTP response from a UpdateSiprecWithResponse call
func ParseUpdateSiprecResponse(rsp *http.Response) (*UpdateSiprecResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSiprecResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallSiprec
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateStreamResponse parses an HTTP response from a CreateStreamWithResponse call
func ParseCreateStreamResponse(rsp *http.Response) (*CreateStreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountCallStream
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseUpdateStreamResponse parses an HTTP response from a UpdateStreamWithResponse call
func ParseUpdateStreamResponse(rsp *http.Response) (*UpdateStreamResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateStreamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCallStream
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteCallResponse parses an HTTP response from a DeleteCallWithResponse call
func ParseDeleteCallResponse(rsp *http.Response) (*DeleteCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchCallResponse parses an HTTP response from a FetchCallWithResponse call
func ParseFetchCallResponse(rsp *http.Response) (*FetchCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateCallResponse parses an HTTP response from a UpdateCallWithResponse call
func ParseUpdateCallResponse(rsp *http.Response) (*UpdateCallResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateCallResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountCall
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListConferenceResponse parses an HTTP response from a ListConferenceWithResponse call
func ParseListConferenceResponse(rsp *http.Response) (*ListConferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Conferences     *[]ApiV2010AccountConference `json:"conferences,omitempty"`
			End             *int                         `json:"end,omitempty"`
			FirstPageUri    *string                      `json:"first_page_uri,omitempty"`
			NextPageUri     *string                      `json:"next_page_uri,omitempty"`
			Page            *int                         `json:"page,omitempty"`
			PageSize        *int                         `json:"page_size,omitempty"`
			PreviousPageUri *string                      `json:"previous_page_uri,omitempty"`
			Start           *int                         `json:"start,omitempty"`
			Uri             *string                      `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListParticipantResponse parses an HTTP response from a ListParticipantWithResponse call
func ParseListParticipantResponse(rsp *http.Response) (*ListParticipantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListParticipantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                    `json:"end,omitempty"`
			FirstPageUri    *string                                 `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                 `json:"next_page_uri,omitempty"`
			Page            *int                                    `json:"page,omitempty"`
			PageSize        *int                                    `json:"page_size,omitempty"`
			Participants    *[]ApiV2010AccountConferenceParticipant `json:"participants,omitempty"`
			PreviousPageUri *string                                 `json:"previous_page_uri,omitempty"`
			Start           *int                                    `json:"start,omitempty"`
			Uri             *string                                 `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateParticipantResponse parses an HTTP response from a CreateParticipantWithResponse call
func ParseCreateParticipantResponse(rsp *http.Response) (*CreateParticipantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateParticipantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountConferenceParticipant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteParticipantResponse parses an HTTP response from a DeleteParticipantWithResponse call
func ParseDeleteParticipantResponse(rsp *http.Response) (*DeleteParticipantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteParticipantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchParticipantResponse parses an HTTP response from a FetchParticipantWithResponse call
func ParseFetchParticipantResponse(rsp *http.Response) (*FetchParticipantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchParticipantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConferenceParticipant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateParticipantResponse parses an HTTP response from a UpdateParticipantWithResponse call
func ParseUpdateParticipantResponse(rsp *http.Response) (*UpdateParticipantResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateParticipantResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConferenceParticipant
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListConferenceRecordingResponse parses an HTTP response from a ListConferenceRecordingWithResponse call
func ParseListConferenceRecordingResponse(rsp *http.Response) (*ListConferenceRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConferenceRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                            `json:"end,omitempty"`
			FirstPageUri    *string                                         `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                         `json:"next_page_uri,omitempty"`
			Page            *int                                            `json:"page,omitempty"`
			PageSize        *int                                            `json:"page_size,omitempty"`
			PreviousPageUri *string                                         `json:"previous_page_uri,omitempty"`
			Recordings      *[]ApiV2010AccountConferenceConferenceRecording `json:"recordings,omitempty"`
			Start           *int                                            `json:"start,omitempty"`
			Uri             *string                                         `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConferenceRecordingResponse parses an HTTP response from a DeleteConferenceRecordingWithResponse call
func ParseDeleteConferenceRecordingResponse(rsp *http.Response) (*DeleteConferenceRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConferenceRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchConferenceRecordingResponse parses an HTTP response from a FetchConferenceRecordingWithResponse call
func ParseFetchConferenceRecordingResponse(rsp *http.Response) (*FetchConferenceRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchConferenceRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConferenceConferenceRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConferenceRecordingResponse parses an HTTP response from a UpdateConferenceRecordingWithResponse call
func ParseUpdateConferenceRecordingResponse(rsp *http.Response) (*UpdateConferenceRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConferenceRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConferenceConferenceRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchConferenceResponse parses an HTTP response from a FetchConferenceWithResponse call
func ParseFetchConferenceResponse(rsp *http.Response) (*FetchConferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchConferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConferenceResponse parses an HTTP response from a UpdateConferenceWithResponse call
func ParseUpdateConferenceResponse(rsp *http.Response) (*UpdateConferenceResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConference
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListConnectAppResponse parses an HTTP response from a ListConnectAppWithResponse call
func ParseListConnectAppResponse(rsp *http.Response) (*ListConnectAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListConnectAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			ConnectApps     *[]ApiV2010AccountConnectApp `json:"connect_apps,omitempty"`
			End             *int                         `json:"end,omitempty"`
			FirstPageUri    *string                      `json:"first_page_uri,omitempty"`
			NextPageUri     *string                      `json:"next_page_uri,omitempty"`
			Page            *int                         `json:"page,omitempty"`
			PageSize        *int                         `json:"page_size,omitempty"`
			PreviousPageUri *string                      `json:"previous_page_uri,omitempty"`
			Start           *int                         `json:"start,omitempty"`
			Uri             *string                      `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteConnectAppResponse parses an HTTP response from a DeleteConnectAppWithResponse call
func ParseDeleteConnectAppResponse(rsp *http.Response) (*DeleteConnectAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteConnectAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchConnectAppResponse parses an HTTP response from a FetchConnectAppWithResponse call
func ParseFetchConnectAppResponse(rsp *http.Response) (*FetchConnectAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchConnectAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConnectApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateConnectAppResponse parses an HTTP response from a UpdateConnectAppWithResponse call
func ParseUpdateConnectAppResponse(rsp *http.Response) (*UpdateConnectAppResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateConnectAppResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountConnectApp
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListIncomingPhoneNumberResponse parses an HTTP response from a ListIncomingPhoneNumberWithResponse call
func ParseListIncomingPhoneNumberResponse(rsp *http.Response) (*ListIncomingPhoneNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncomingPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End                  *int                                  `json:"end,omitempty"`
			FirstPageUri         *string                               `json:"first_page_uri,omitempty"`
			IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumber `json:"incoming_phone_numbers,omitempty"`
			NextPageUri          *string                               `json:"next_page_uri,omitempty"`
			Page                 *int                                  `json:"page,omitempty"`
			PageSize             *int                                  `json:"page_size,omitempty"`
			PreviousPageUri      *string                               `json:"previous_page_uri,omitempty"`
			Start                *int                                  `json:"start,omitempty"`
			Uri                  *string                               `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncomingPhoneNumberResponse parses an HTTP response from a CreateIncomingPhoneNumberWithResponse call
func ParseCreateIncomingPhoneNumberResponse(rsp *http.Response) (*CreateIncomingPhoneNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncomingPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountIncomingPhoneNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListIncomingPhoneNumberLocalResponse parses an HTTP response from a ListIncomingPhoneNumberLocalWithResponse call
func ParseListIncomingPhoneNumberLocalResponse(rsp *http.Response) (*ListIncomingPhoneNumberLocalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncomingPhoneNumberLocalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End                  *int                                                          `json:"end,omitempty"`
			FirstPageUri         *string                                                       `json:"first_page_uri,omitempty"`
			IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal `json:"incoming_phone_numbers,omitempty"`
			NextPageUri          *string                                                       `json:"next_page_uri,omitempty"`
			Page                 *int                                                          `json:"page,omitempty"`
			PageSize             *int                                                          `json:"page_size,omitempty"`
			PreviousPageUri      *string                                                       `json:"previous_page_uri,omitempty"`
			Start                *int                                                          `json:"start,omitempty"`
			Uri                  *string                                                       `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncomingPhoneNumberLocalResponse parses an HTTP response from a CreateIncomingPhoneNumberLocalWithResponse call
func ParseCreateIncomingPhoneNumberLocalResponse(rsp *http.Response) (*CreateIncomingPhoneNumberLocalResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncomingPhoneNumberLocalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListIncomingPhoneNumberMobileResponse parses an HTTP response from a ListIncomingPhoneNumberMobileWithResponse call
func ParseListIncomingPhoneNumberMobileResponse(rsp *http.Response) (*ListIncomingPhoneNumberMobileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncomingPhoneNumberMobileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End                  *int                                                           `json:"end,omitempty"`
			FirstPageUri         *string                                                        `json:"first_page_uri,omitempty"`
			IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile `json:"incoming_phone_numbers,omitempty"`
			NextPageUri          *string                                                        `json:"next_page_uri,omitempty"`
			Page                 *int                                                           `json:"page,omitempty"`
			PageSize             *int                                                           `json:"page_size,omitempty"`
			PreviousPageUri      *string                                                        `json:"previous_page_uri,omitempty"`
			Start                *int                                                           `json:"start,omitempty"`
			Uri                  *string                                                        `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncomingPhoneNumberMobileResponse parses an HTTP response from a CreateIncomingPhoneNumberMobileWithResponse call
func ParseCreateIncomingPhoneNumberMobileResponse(rsp *http.Response) (*CreateIncomingPhoneNumberMobileResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncomingPhoneNumberMobileResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListIncomingPhoneNumberTollFreeResponse parses an HTTP response from a ListIncomingPhoneNumberTollFreeWithResponse call
func ParseListIncomingPhoneNumberTollFreeResponse(rsp *http.Response) (*ListIncomingPhoneNumberTollFreeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncomingPhoneNumberTollFreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End                  *int                                                             `json:"end,omitempty"`
			FirstPageUri         *string                                                          `json:"first_page_uri,omitempty"`
			IncomingPhoneNumbers *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree `json:"incoming_phone_numbers,omitempty"`
			NextPageUri          *string                                                          `json:"next_page_uri,omitempty"`
			Page                 *int                                                             `json:"page,omitempty"`
			PageSize             *int                                                             `json:"page_size,omitempty"`
			PreviousPageUri      *string                                                          `json:"previous_page_uri,omitempty"`
			Start                *int                                                             `json:"start,omitempty"`
			Uri                  *string                                                          `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncomingPhoneNumberTollFreeResponse parses an HTTP response from a CreateIncomingPhoneNumberTollFreeWithResponse call
func ParseCreateIncomingPhoneNumberTollFreeResponse(rsp *http.Response) (*CreateIncomingPhoneNumberTollFreeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncomingPhoneNumberTollFreeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListIncomingPhoneNumberAssignedAddOnResponse parses an HTTP response from a ListIncomingPhoneNumberAssignedAddOnWithResponse call
func ParseListIncomingPhoneNumberAssignedAddOnResponse(rsp *http.Response) (*ListIncomingPhoneNumberAssignedAddOnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncomingPhoneNumberAssignedAddOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AssignedAddOns  *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn `json:"assigned_add_ons,omitempty"`
			End             *int                                                                  `json:"end,omitempty"`
			FirstPageUri    *string                                                               `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                               `json:"next_page_uri,omitempty"`
			Page            *int                                                                  `json:"page,omitempty"`
			PageSize        *int                                                                  `json:"page_size,omitempty"`
			PreviousPageUri *string                                                               `json:"previous_page_uri,omitempty"`
			Start           *int                                                                  `json:"start,omitempty"`
			Uri             *string                                                               `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateIncomingPhoneNumberAssignedAddOnResponse parses an HTTP response from a CreateIncomingPhoneNumberAssignedAddOnWithResponse call
func ParseCreateIncomingPhoneNumberAssignedAddOnResponse(rsp *http.Response) (*CreateIncomingPhoneNumberAssignedAddOnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateIncomingPhoneNumberAssignedAddOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListIncomingPhoneNumberAssignedAddOnExtensionResponse parses an HTTP response from a ListIncomingPhoneNumberAssignedAddOnExtensionWithResponse call
func ParseListIncomingPhoneNumberAssignedAddOnExtensionResponse(rsp *http.Response) (*ListIncomingPhoneNumberAssignedAddOnExtensionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListIncomingPhoneNumberAssignedAddOnExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                                                                           `json:"end,omitempty"`
			Extensions      *[]ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension `json:"extensions,omitempty"`
			FirstPageUri    *string                                                                                                        `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                                                                        `json:"next_page_uri,omitempty"`
			Page            *int                                                                                                           `json:"page,omitempty"`
			PageSize        *int                                                                                                           `json:"page_size,omitempty"`
			PreviousPageUri *string                                                                                                        `json:"previous_page_uri,omitempty"`
			Start           *int                                                                                                           `json:"start,omitempty"`
			Uri             *string                                                                                                        `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchIncomingPhoneNumberAssignedAddOnExtensionResponse parses an HTTP response from a FetchIncomingPhoneNumberAssignedAddOnExtensionWithResponse call
func ParseFetchIncomingPhoneNumberAssignedAddOnExtensionResponse(rsp *http.Response) (*FetchIncomingPhoneNumberAssignedAddOnExtensionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchIncomingPhoneNumberAssignedAddOnExtensionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIncomingPhoneNumberAssignedAddOnResponse parses an HTTP response from a DeleteIncomingPhoneNumberAssignedAddOnWithResponse call
func ParseDeleteIncomingPhoneNumberAssignedAddOnResponse(rsp *http.Response) (*DeleteIncomingPhoneNumberAssignedAddOnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncomingPhoneNumberAssignedAddOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchIncomingPhoneNumberAssignedAddOnResponse parses an HTTP response from a FetchIncomingPhoneNumberAssignedAddOnWithResponse call
func ParseFetchIncomingPhoneNumberAssignedAddOnResponse(rsp *http.Response) (*FetchIncomingPhoneNumberAssignedAddOnResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchIncomingPhoneNumberAssignedAddOnResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteIncomingPhoneNumberResponse parses an HTTP response from a DeleteIncomingPhoneNumberWithResponse call
func ParseDeleteIncomingPhoneNumberResponse(rsp *http.Response) (*DeleteIncomingPhoneNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteIncomingPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchIncomingPhoneNumberResponse parses an HTTP response from a FetchIncomingPhoneNumberWithResponse call
func ParseFetchIncomingPhoneNumberResponse(rsp *http.Response) (*FetchIncomingPhoneNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchIncomingPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountIncomingPhoneNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateIncomingPhoneNumberResponse parses an HTTP response from a UpdateIncomingPhoneNumberWithResponse call
func ParseUpdateIncomingPhoneNumberResponse(rsp *http.Response) (*UpdateIncomingPhoneNumberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateIncomingPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountIncomingPhoneNumber
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListKeyResponse parses an HTTP response from a ListKeyWithResponse call
func ParseListKeyResponse(rsp *http.Response) (*ListKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                  `json:"end,omitempty"`
			FirstPageUri    *string               `json:"first_page_uri,omitempty"`
			Keys            *[]ApiV2010AccountKey `json:"keys,omitempty"`
			NextPageUri     *string               `json:"next_page_uri,omitempty"`
			Page            *int                  `json:"page,omitempty"`
			PageSize        *int                  `json:"page_size,omitempty"`
			PreviousPageUri *string               `json:"previous_page_uri,omitempty"`
			Start           *int                  `json:"start,omitempty"`
			Uri             *string               `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNewKeyResponse parses an HTTP response from a CreateNewKeyWithResponse call
func ParseCreateNewKeyResponse(rsp *http.Response) (*CreateNewKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountNewKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteKeyResponse parses an HTTP response from a DeleteKeyWithResponse call
func ParseDeleteKeyResponse(rsp *http.Response) (*DeleteKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchKeyResponse parses an HTTP response from a FetchKeyWithResponse call
func ParseFetchKeyResponse(rsp *http.Response) (*FetchKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateKeyResponse parses an HTTP response from a UpdateKeyWithResponse call
func ParseUpdateKeyResponse(rsp *http.Response) (*UpdateKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListMessageResponse parses an HTTP response from a ListMessageWithResponse call
func ParseListMessageResponse(rsp *http.Response) (*ListMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                      `json:"end,omitempty"`
			FirstPageUri    *string                   `json:"first_page_uri,omitempty"`
			Messages        *[]ApiV2010AccountMessage `json:"messages,omitempty"`
			NextPageUri     *string                   `json:"next_page_uri,omitempty"`
			Page            *int                      `json:"page,omitempty"`
			PageSize        *int                      `json:"page_size,omitempty"`
			PreviousPageUri *string                   `json:"previous_page_uri,omitempty"`
			Start           *int                      `json:"start,omitempty"`
			Uri             *string                   `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateMessageResponse parses an HTTP response from a CreateMessageWithResponse call
func ParseCreateMessageResponse(rsp *http.Response) (*CreateMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseCreateMessageFeedbackResponse parses an HTTP response from a CreateMessageFeedbackWithResponse call
func ParseCreateMessageFeedbackResponse(rsp *http.Response) (*CreateMessageFeedbackResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMessageFeedbackResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountMessageMessageFeedback
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListMediaResponse parses an HTTP response from a ListMediaWithResponse call
func ParseListMediaResponse(rsp *http.Response) (*ListMediaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                           `json:"end,omitempty"`
			FirstPageUri    *string                        `json:"first_page_uri,omitempty"`
			MediaList       *[]ApiV2010AccountMessageMedia `json:"media_list,omitempty"`
			NextPageUri     *string                        `json:"next_page_uri,omitempty"`
			Page            *int                           `json:"page,omitempty"`
			PageSize        *int                           `json:"page_size,omitempty"`
			PreviousPageUri *string                        `json:"previous_page_uri,omitempty"`
			Start           *int                           `json:"start,omitempty"`
			Uri             *string                        `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMediaResponse parses an HTTP response from a DeleteMediaWithResponse call
func ParseDeleteMediaResponse(rsp *http.Response) (*DeleteMediaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchMediaResponse parses an HTTP response from a FetchMediaWithResponse call
func ParseFetchMediaResponse(rsp *http.Response) (*FetchMediaResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchMediaResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountMessageMedia
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteMessageResponse parses an HTTP response from a DeleteMessageWithResponse call
func ParseDeleteMessageResponse(rsp *http.Response) (*DeleteMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchMessageResponse parses an HTTP response from a FetchMessageWithResponse call
func ParseFetchMessageResponse(rsp *http.Response) (*FetchMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMessageResponse parses an HTTP response from a UpdateMessageWithResponse call
func ParseUpdateMessageResponse(rsp *http.Response) (*UpdateMessageResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMessageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListNotificationResponse parses an HTTP response from a ListNotificationWithResponse call
func ParseListNotificationResponse(rsp *http.Response) (*ListNotificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                           `json:"end,omitempty"`
			FirstPageUri    *string                        `json:"first_page_uri,omitempty"`
			NextPageUri     *string                        `json:"next_page_uri,omitempty"`
			Notifications   *[]ApiV2010AccountNotification `json:"notifications,omitempty"`
			Page            *int                           `json:"page,omitempty"`
			PageSize        *int                           `json:"page_size,omitempty"`
			PreviousPageUri *string                        `json:"previous_page_uri,omitempty"`
			Start           *int                           `json:"start,omitempty"`
			Uri             *string                        `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchNotificationResponse parses an HTTP response from a FetchNotificationWithResponse call
func ParseFetchNotificationResponse(rsp *http.Response) (*FetchNotificationResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchNotificationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountNotificationInstance
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListOutgoingCallerIdResponse parses an HTTP response from a ListOutgoingCallerIdWithResponse call
func ParseListOutgoingCallerIdResponse(rsp *http.Response) (*ListOutgoingCallerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListOutgoingCallerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End               *int                               `json:"end,omitempty"`
			FirstPageUri      *string                            `json:"first_page_uri,omitempty"`
			NextPageUri       *string                            `json:"next_page_uri,omitempty"`
			OutgoingCallerIds *[]ApiV2010AccountOutgoingCallerId `json:"outgoing_caller_ids,omitempty"`
			Page              *int                               `json:"page,omitempty"`
			PageSize          *int                               `json:"page_size,omitempty"`
			PreviousPageUri   *string                            `json:"previous_page_uri,omitempty"`
			Start             *int                               `json:"start,omitempty"`
			Uri               *string                            `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateValidationRequestResponse parses an HTTP response from a CreateValidationRequestWithResponse call
func ParseCreateValidationRequestResponse(rsp *http.Response) (*CreateValidationRequestResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateValidationRequestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountValidationRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteOutgoingCallerIdResponse parses an HTTP response from a DeleteOutgoingCallerIdWithResponse call
func ParseDeleteOutgoingCallerIdResponse(rsp *http.Response) (*DeleteOutgoingCallerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteOutgoingCallerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchOutgoingCallerIdResponse parses an HTTP response from a FetchOutgoingCallerIdWithResponse call
func ParseFetchOutgoingCallerIdResponse(rsp *http.Response) (*FetchOutgoingCallerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchOutgoingCallerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountOutgoingCallerId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateOutgoingCallerIdResponse parses an HTTP response from a UpdateOutgoingCallerIdWithResponse call
func ParseUpdateOutgoingCallerIdResponse(rsp *http.Response) (*UpdateOutgoingCallerIdResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateOutgoingCallerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountOutgoingCallerId
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListQueueResponse parses an HTTP response from a ListQueueWithResponse call
func ParseListQueueResponse(rsp *http.Response) (*ListQueueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                    `json:"end,omitempty"`
			FirstPageUri    *string                 `json:"first_page_uri,omitempty"`
			NextPageUri     *string                 `json:"next_page_uri,omitempty"`
			Page            *int                    `json:"page,omitempty"`
			PageSize        *int                    `json:"page_size,omitempty"`
			PreviousPageUri *string                 `json:"previous_page_uri,omitempty"`
			Queues          *[]ApiV2010AccountQueue `json:"queues,omitempty"`
			Start           *int                    `json:"start,omitempty"`
			Uri             *string                 `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateQueueResponse parses an HTTP response from a CreateQueueWithResponse call
func ParseCreateQueueResponse(rsp *http.Response) (*CreateQueueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListMemberResponse parses an HTTP response from a ListMemberWithResponse call
func ParseListMemberResponse(rsp *http.Response) (*ListMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                          `json:"end,omitempty"`
			FirstPageUri    *string                       `json:"first_page_uri,omitempty"`
			NextPageUri     *string                       `json:"next_page_uri,omitempty"`
			Page            *int                          `json:"page,omitempty"`
			PageSize        *int                          `json:"page_size,omitempty"`
			PreviousPageUri *string                       `json:"previous_page_uri,omitempty"`
			QueueMembers    *[]ApiV2010AccountQueueMember `json:"queue_members,omitempty"`
			Start           *int                          `json:"start,omitempty"`
			Uri             *string                       `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchMemberResponse parses an HTTP response from a FetchMemberWithResponse call
func ParseFetchMemberResponse(rsp *http.Response) (*FetchMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountQueueMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateMemberResponse parses an HTTP response from a UpdateMemberWithResponse call
func ParseUpdateMemberResponse(rsp *http.Response) (*UpdateMemberResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountQueueMember
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteQueueResponse parses an HTTP response from a DeleteQueueWithResponse call
func ParseDeleteQueueResponse(rsp *http.Response) (*DeleteQueueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchQueueResponse parses an HTTP response from a FetchQueueWithResponse call
func ParseFetchQueueResponse(rsp *http.Response) (*FetchQueueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateQueueResponse parses an HTTP response from a UpdateQueueWithResponse call
func ParseUpdateQueueResponse(rsp *http.Response) (*UpdateQueueResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateQueueResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountQueue
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRecordingResponse parses an HTTP response from a ListRecordingWithResponse call
func ParseListRecordingResponse(rsp *http.Response) (*ListRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                        `json:"end,omitempty"`
			FirstPageUri    *string                     `json:"first_page_uri,omitempty"`
			NextPageUri     *string                     `json:"next_page_uri,omitempty"`
			Page            *int                        `json:"page,omitempty"`
			PageSize        *int                        `json:"page_size,omitempty"`
			PreviousPageUri *string                     `json:"previous_page_uri,omitempty"`
			Recordings      *[]ApiV2010AccountRecording `json:"recordings,omitempty"`
			Start           *int                        `json:"start,omitempty"`
			Uri             *string                     `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRecordingTranscriptionResponse parses an HTTP response from a ListRecordingTranscriptionWithResponse call
func ParseListRecordingTranscriptionResponse(rsp *http.Response) (*ListRecordingTranscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRecordingTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                              `json:"end,omitempty"`
			FirstPageUri    *string                                           `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                           `json:"next_page_uri,omitempty"`
			Page            *int                                              `json:"page,omitempty"`
			PageSize        *int                                              `json:"page_size,omitempty"`
			PreviousPageUri *string                                           `json:"previous_page_uri,omitempty"`
			Start           *int                                              `json:"start,omitempty"`
			Transcriptions  *[]ApiV2010AccountRecordingRecordingTranscription `json:"transcriptions,omitempty"`
			Uri             *string                                           `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRecordingTranscriptionResponse parses an HTTP response from a DeleteRecordingTranscriptionWithResponse call
func ParseDeleteRecordingTranscriptionResponse(rsp *http.Response) (*DeleteRecordingTranscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordingTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchRecordingTranscriptionResponse parses an HTTP response from a FetchRecordingTranscriptionWithResponse call
func ParseFetchRecordingTranscriptionResponse(rsp *http.Response) (*FetchRecordingTranscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchRecordingTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountRecordingRecordingTranscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRecordingAddOnResultResponse parses an HTTP response from a ListRecordingAddOnResultWithResponse call
func ParseListRecordingAddOnResultResponse(rsp *http.Response) (*ListRecordingAddOnResultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRecordingAddOnResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AddOnResults    *[]ApiV2010AccountRecordingRecordingAddOnResult `json:"add_on_results,omitempty"`
			End             *int                                            `json:"end,omitempty"`
			FirstPageUri    *string                                         `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                         `json:"next_page_uri,omitempty"`
			Page            *int                                            `json:"page,omitempty"`
			PageSize        *int                                            `json:"page_size,omitempty"`
			PreviousPageUri *string                                         `json:"previous_page_uri,omitempty"`
			Start           *int                                            `json:"start,omitempty"`
			Uri             *string                                         `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListRecordingAddOnResultPayloadResponse parses an HTTP response from a ListRecordingAddOnResultPayloadWithResponse call
func ParseListRecordingAddOnResultPayloadResponse(rsp *http.Response) (*ListRecordingAddOnResultPayloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListRecordingAddOnResultPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                                       `json:"end,omitempty"`
			FirstPageUri    *string                                                                    `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                                    `json:"next_page_uri,omitempty"`
			Page            *int                                                                       `json:"page,omitempty"`
			PageSize        *int                                                                       `json:"page_size,omitempty"`
			Payloads        *[]ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload `json:"payloads,omitempty"`
			PreviousPageUri *string                                                                    `json:"previous_page_uri,omitempty"`
			Start           *int                                                                       `json:"start,omitempty"`
			Uri             *string                                                                    `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRecordingAddOnResultPayloadResponse parses an HTTP response from a DeleteRecordingAddOnResultPayloadWithResponse call
func ParseDeleteRecordingAddOnResultPayloadResponse(rsp *http.Response) (*DeleteRecordingAddOnResultPayloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordingAddOnResultPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchRecordingAddOnResultPayloadResponse parses an HTTP response from a FetchRecordingAddOnResultPayloadWithResponse call
func ParseFetchRecordingAddOnResultPayloadResponse(rsp *http.Response) (*FetchRecordingAddOnResultPayloadResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchRecordingAddOnResultPayloadResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRecordingAddOnResultResponse parses an HTTP response from a DeleteRecordingAddOnResultWithResponse call
func ParseDeleteRecordingAddOnResultResponse(rsp *http.Response) (*DeleteRecordingAddOnResultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordingAddOnResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchRecordingAddOnResultResponse parses an HTTP response from a FetchRecordingAddOnResultWithResponse call
func ParseFetchRecordingAddOnResultResponse(rsp *http.Response) (*FetchRecordingAddOnResultResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchRecordingAddOnResultResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountRecordingRecordingAddOnResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteRecordingResponse parses an HTTP response from a DeleteRecordingWithResponse call
func ParseDeleteRecordingResponse(rsp *http.Response) (*DeleteRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchRecordingResponse parses an HTTP response from a FetchRecordingWithResponse call
func ParseFetchRecordingResponse(rsp *http.Response) (*FetchRecordingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchRecordingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountRecording
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSipCredentialListResponse parses an HTTP response from a ListSipCredentialListWithResponse call
func ParseListSipCredentialListResponse(rsp *http.Response) (*ListSipCredentialListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipCredentialListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CredentialLists *[]ApiV2010AccountSipSipCredentialList `json:"credential_lists,omitempty"`
			End             *int                                   `json:"end,omitempty"`
			FirstPageUri    *string                                `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                `json:"next_page_uri,omitempty"`
			Page            *int                                   `json:"page,omitempty"`
			PageSize        *int                                   `json:"page_size,omitempty"`
			PreviousPageUri *string                                `json:"previous_page_uri,omitempty"`
			Start           *int                                   `json:"start,omitempty"`
			Uri             *string                                `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipCredentialListResponse parses an HTTP response from a CreateSipCredentialListWithResponse call
func ParseCreateSipCredentialListResponse(rsp *http.Response) (*CreateSipCredentialListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipCredentialListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipCredentialList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListSipCredentialResponse parses an HTTP response from a ListSipCredentialWithResponse call
func ParseListSipCredentialResponse(rsp *http.Response) (*ListSipCredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Credentials     *[]ApiV2010AccountSipSipCredentialListSipCredential `json:"credentials,omitempty"`
			End             *int                                                `json:"end,omitempty"`
			FirstPageUri    *string                                             `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                             `json:"next_page_uri,omitempty"`
			Page            *int                                                `json:"page,omitempty"`
			PageSize        *int                                                `json:"page_size,omitempty"`
			PreviousPageUri *string                                             `json:"previous_page_uri,omitempty"`
			Start           *int                                                `json:"start,omitempty"`
			Uri             *string                                             `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipCredentialResponse parses an HTTP response from a CreateSipCredentialWithResponse call
func ParseCreateSipCredentialResponse(rsp *http.Response) (*CreateSipCredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipCredentialListSipCredential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSipCredentialResponse parses an HTTP response from a DeleteSipCredentialWithResponse call
func ParseDeleteSipCredentialResponse(rsp *http.Response) (*DeleteSipCredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipCredentialResponse parses an HTTP response from a FetchSipCredentialWithResponse call
func ParseFetchSipCredentialResponse(rsp *http.Response) (*FetchSipCredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipCredentialListSipCredential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSipCredentialResponse parses an HTTP response from a UpdateSipCredentialWithResponse call
func ParseUpdateSipCredentialResponse(rsp *http.Response) (*UpdateSipCredentialResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSipCredentialResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipCredentialListSipCredential
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSipCredentialListResponse parses an HTTP response from a DeleteSipCredentialListWithResponse call
func ParseDeleteSipCredentialListResponse(rsp *http.Response) (*DeleteSipCredentialListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipCredentialListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipCredentialListResponse parses an HTTP response from a FetchSipCredentialListWithResponse call
func ParseFetchSipCredentialListResponse(rsp *http.Response) (*FetchSipCredentialListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipCredentialListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipCredentialList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSipCredentialListResponse parses an HTTP response from a UpdateSipCredentialListWithResponse call
func ParseUpdateSipCredentialListResponse(rsp *http.Response) (*UpdateSipCredentialListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSipCredentialListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipCredentialList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSipDomainResponse parses an HTTP response from a ListSipDomainWithResponse call
func ParseListSipDomainResponse(rsp *http.Response) (*ListSipDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Domains         *[]ApiV2010AccountSipSipDomain `json:"domains,omitempty"`
			End             *int                           `json:"end,omitempty"`
			FirstPageUri    *string                        `json:"first_page_uri,omitempty"`
			NextPageUri     *string                        `json:"next_page_uri,omitempty"`
			Page            *int                           `json:"page,omitempty"`
			PageSize        *int                           `json:"page_size,omitempty"`
			PreviousPageUri *string                        `json:"previous_page_uri,omitempty"`
			Start           *int                           `json:"start,omitempty"`
			Uri             *string                        `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipDomainResponse parses an HTTP response from a CreateSipDomainWithResponse call
func ParseCreateSipDomainResponse(rsp *http.Response) (*CreateSipDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListSipAuthCallsCredentialListMappingResponse parses an HTTP response from a ListSipAuthCallsCredentialListMappingWithResponse call
func ParseListSipAuthCallsCredentialListMappingResponse(rsp *http.Response) (*ListSipAuthCallsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipAuthCallsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Contents        *[]ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping `json:"contents,omitempty"`
			End             *int                                                                               `json:"end,omitempty"`
			FirstPageUri    *string                                                                            `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                                            `json:"next_page_uri,omitempty"`
			Page            *int                                                                               `json:"page,omitempty"`
			PageSize        *int                                                                               `json:"page_size,omitempty"`
			PreviousPageUri *string                                                                            `json:"previous_page_uri,omitempty"`
			Start           *int                                                                               `json:"start,omitempty"`
			Uri             *string                                                                            `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipAuthCallsCredentialListMappingResponse parses an HTTP response from a CreateSipAuthCallsCredentialListMappingWithResponse call
func ParseCreateSipAuthCallsCredentialListMappingResponse(rsp *http.Response) (*CreateSipAuthCallsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipAuthCallsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSipAuthCallsCredentialListMappingResponse parses an HTTP response from a DeleteSipAuthCallsCredentialListMappingWithResponse call
func ParseDeleteSipAuthCallsCredentialListMappingResponse(rsp *http.Response) (*DeleteSipAuthCallsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipAuthCallsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipAuthCallsCredentialListMappingResponse parses an HTTP response from a FetchSipAuthCallsCredentialListMappingWithResponse call
func ParseFetchSipAuthCallsCredentialListMappingResponse(rsp *http.Response) (*FetchSipAuthCallsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipAuthCallsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSipAuthCallsIpAccessControlListMappingResponse parses an HTTP response from a ListSipAuthCallsIpAccessControlListMappingWithResponse call
func ParseListSipAuthCallsIpAccessControlListMappingResponse(rsp *http.Response) (*ListSipAuthCallsIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipAuthCallsIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Contents        *[]ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping `json:"contents,omitempty"`
			End             *int                                                                                    `json:"end,omitempty"`
			FirstPageUri    *string                                                                                 `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                                                 `json:"next_page_uri,omitempty"`
			Page            *int                                                                                    `json:"page,omitempty"`
			PageSize        *int                                                                                    `json:"page_size,omitempty"`
			PreviousPageUri *string                                                                                 `json:"previous_page_uri,omitempty"`
			Start           *int                                                                                    `json:"start,omitempty"`
			Uri             *string                                                                                 `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipAuthCallsIpAccessControlListMappingResponse parses an HTTP response from a CreateSipAuthCallsIpAccessControlListMappingWithResponse call
func ParseCreateSipAuthCallsIpAccessControlListMappingResponse(rsp *http.Response) (*CreateSipAuthCallsIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipAuthCallsIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSipAuthCallsIpAccessControlListMappingResponse parses an HTTP response from a DeleteSipAuthCallsIpAccessControlListMappingWithResponse call
func ParseDeleteSipAuthCallsIpAccessControlListMappingResponse(rsp *http.Response) (*DeleteSipAuthCallsIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipAuthCallsIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipAuthCallsIpAccessControlListMappingResponse parses an HTTP response from a FetchSipAuthCallsIpAccessControlListMappingWithResponse call
func ParseFetchSipAuthCallsIpAccessControlListMappingResponse(rsp *http.Response) (*FetchSipAuthCallsIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipAuthCallsIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSipAuthRegistrationsCredentialListMappingResponse parses an HTTP response from a ListSipAuthRegistrationsCredentialListMappingWithResponse call
func ParseListSipAuthRegistrationsCredentialListMappingResponse(rsp *http.Response) (*ListSipAuthRegistrationsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipAuthRegistrationsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Contents        *[]ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping `json:"contents,omitempty"`
			End             *int                                                                                               `json:"end,omitempty"`
			FirstPageUri    *string                                                                                            `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                                                            `json:"next_page_uri,omitempty"`
			Page            *int                                                                                               `json:"page,omitempty"`
			PageSize        *int                                                                                               `json:"page_size,omitempty"`
			PreviousPageUri *string                                                                                            `json:"previous_page_uri,omitempty"`
			Start           *int                                                                                               `json:"start,omitempty"`
			Uri             *string                                                                                            `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipAuthRegistrationsCredentialListMappingResponse parses an HTTP response from a CreateSipAuthRegistrationsCredentialListMappingWithResponse call
func ParseCreateSipAuthRegistrationsCredentialListMappingResponse(rsp *http.Response) (*CreateSipAuthRegistrationsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipAuthRegistrationsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSipAuthRegistrationsCredentialListMappingResponse parses an HTTP response from a DeleteSipAuthRegistrationsCredentialListMappingWithResponse call
func ParseDeleteSipAuthRegistrationsCredentialListMappingResponse(rsp *http.Response) (*DeleteSipAuthRegistrationsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipAuthRegistrationsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipAuthRegistrationsCredentialListMappingResponse parses an HTTP response from a FetchSipAuthRegistrationsCredentialListMappingWithResponse call
func ParseFetchSipAuthRegistrationsCredentialListMappingResponse(rsp *http.Response) (*FetchSipAuthRegistrationsCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipAuthRegistrationsCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSipCredentialListMappingResponse parses an HTTP response from a ListSipCredentialListMappingWithResponse call
func ParseListSipCredentialListMappingResponse(rsp *http.Response) (*ListSipCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CredentialListMappings *[]ApiV2010AccountSipSipDomainSipCredentialListMapping `json:"credential_list_mappings,omitempty"`
			End                    *int                                                   `json:"end,omitempty"`
			FirstPageUri           *string                                                `json:"first_page_uri,omitempty"`
			NextPageUri            *string                                                `json:"next_page_uri,omitempty"`
			Page                   *int                                                   `json:"page,omitempty"`
			PageSize               *int                                                   `json:"page_size,omitempty"`
			PreviousPageUri        *string                                                `json:"previous_page_uri,omitempty"`
			Start                  *int                                                   `json:"start,omitempty"`
			Uri                    *string                                                `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipCredentialListMappingResponse parses an HTTP response from a CreateSipCredentialListMappingWithResponse call
func ParseCreateSipCredentialListMappingResponse(rsp *http.Response) (*CreateSipCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipDomainSipCredentialListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSipCredentialListMappingResponse parses an HTTP response from a DeleteSipCredentialListMappingWithResponse call
func ParseDeleteSipCredentialListMappingResponse(rsp *http.Response) (*DeleteSipCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipCredentialListMappingResponse parses an HTTP response from a FetchSipCredentialListMappingWithResponse call
func ParseFetchSipCredentialListMappingResponse(rsp *http.Response) (*FetchSipCredentialListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipCredentialListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipDomainSipCredentialListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSipIpAccessControlListMappingResponse parses an HTTP response from a ListSipIpAccessControlListMappingWithResponse call
func ParseListSipIpAccessControlListMappingResponse(rsp *http.Response) (*ListSipIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End                         *int                                                        `json:"end,omitempty"`
			FirstPageUri                *string                                                     `json:"first_page_uri,omitempty"`
			IpAccessControlListMappings *[]ApiV2010AccountSipSipDomainSipIpAccessControlListMapping `json:"ip_access_control_list_mappings,omitempty"`
			NextPageUri                 *string                                                     `json:"next_page_uri,omitempty"`
			Page                        *int                                                        `json:"page,omitempty"`
			PageSize                    *int                                                        `json:"page_size,omitempty"`
			PreviousPageUri             *string                                                     `json:"previous_page_uri,omitempty"`
			Start                       *int                                                        `json:"start,omitempty"`
			Uri                         *string                                                     `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipIpAccessControlListMappingResponse parses an HTTP response from a CreateSipIpAccessControlListMappingWithResponse call
func ParseCreateSipIpAccessControlListMappingResponse(rsp *http.Response) (*CreateSipIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSipIpAccessControlListMappingResponse parses an HTTP response from a DeleteSipIpAccessControlListMappingWithResponse call
func ParseDeleteSipIpAccessControlListMappingResponse(rsp *http.Response) (*DeleteSipIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipIpAccessControlListMappingResponse parses an HTTP response from a FetchSipIpAccessControlListMappingWithResponse call
func ParseFetchSipIpAccessControlListMappingResponse(rsp *http.Response) (*FetchSipIpAccessControlListMappingResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipIpAccessControlListMappingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipDomainSipIpAccessControlListMapping
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSipDomainResponse parses an HTTP response from a DeleteSipDomainWithResponse call
func ParseDeleteSipDomainResponse(rsp *http.Response) (*DeleteSipDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipDomainResponse parses an HTTP response from a FetchSipDomainWithResponse call
func ParseFetchSipDomainResponse(rsp *http.Response) (*FetchSipDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSipDomainResponse parses an HTTP response from a UpdateSipDomainWithResponse call
func ParseUpdateSipDomainResponse(rsp *http.Response) (*UpdateSipDomainResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSipDomainResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipDomain
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSipIpAccessControlListResponse parses an HTTP response from a ListSipIpAccessControlListWithResponse call
func ParseListSipIpAccessControlListResponse(rsp *http.Response) (*ListSipIpAccessControlListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipIpAccessControlListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End                  *int                                        `json:"end,omitempty"`
			FirstPageUri         *string                                     `json:"first_page_uri,omitempty"`
			IpAccessControlLists *[]ApiV2010AccountSipSipIpAccessControlList `json:"ip_access_control_lists,omitempty"`
			NextPageUri          *string                                     `json:"next_page_uri,omitempty"`
			Page                 *int                                        `json:"page,omitempty"`
			PageSize             *int                                        `json:"page_size,omitempty"`
			PreviousPageUri      *string                                     `json:"previous_page_uri,omitempty"`
			Start                *int                                        `json:"start,omitempty"`
			Uri                  *string                                     `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipIpAccessControlListResponse parses an HTTP response from a CreateSipIpAccessControlListWithResponse call
func ParseCreateSipIpAccessControlListResponse(rsp *http.Response) (*CreateSipIpAccessControlListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipIpAccessControlListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipIpAccessControlList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListSipIpAddressResponse parses an HTTP response from a ListSipIpAddressWithResponse call
func ParseListSipIpAddressResponse(rsp *http.Response) (*ListSipIpAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSipIpAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                    `json:"end,omitempty"`
			FirstPageUri    *string                                                 `json:"first_page_uri,omitempty"`
			IpAddresses     *[]ApiV2010AccountSipSipIpAccessControlListSipIpAddress `json:"ip_addresses,omitempty"`
			NextPageUri     *string                                                 `json:"next_page_uri,omitempty"`
			Page            *int                                                    `json:"page,omitempty"`
			PageSize        *int                                                    `json:"page_size,omitempty"`
			PreviousPageUri *string                                                 `json:"previous_page_uri,omitempty"`
			Start           *int                                                    `json:"start,omitempty"`
			Uri             *string                                                 `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateSipIpAddressResponse parses an HTTP response from a CreateSipIpAddressWithResponse call
func ParseCreateSipIpAddressResponse(rsp *http.Response) (*CreateSipIpAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateSipIpAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountSipSipIpAccessControlListSipIpAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSipIpAddressResponse parses an HTTP response from a DeleteSipIpAddressWithResponse call
func ParseDeleteSipIpAddressResponse(rsp *http.Response) (*DeleteSipIpAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipIpAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipIpAddressResponse parses an HTTP response from a FetchSipIpAddressWithResponse call
func ParseFetchSipIpAddressResponse(rsp *http.Response) (*FetchSipIpAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipIpAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipIpAccessControlListSipIpAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSipIpAddressResponse parses an HTTP response from a UpdateSipIpAddressWithResponse call
func ParseUpdateSipIpAddressResponse(rsp *http.Response) (*UpdateSipIpAddressResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSipIpAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipIpAccessControlListSipIpAddress
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteSipIpAccessControlListResponse parses an HTTP response from a DeleteSipIpAccessControlListWithResponse call
func ParseDeleteSipIpAccessControlListResponse(rsp *http.Response) (*DeleteSipIpAccessControlListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSipIpAccessControlListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSipIpAccessControlListResponse parses an HTTP response from a FetchSipIpAccessControlListWithResponse call
func ParseFetchSipIpAccessControlListResponse(rsp *http.Response) (*FetchSipIpAccessControlListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSipIpAccessControlListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipIpAccessControlList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSipIpAccessControlListResponse parses an HTTP response from a UpdateSipIpAccessControlListWithResponse call
func ParseUpdateSipIpAccessControlListResponse(rsp *http.Response) (*UpdateSipIpAccessControlListResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSipIpAccessControlListResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSipSipIpAccessControlList
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListShortCodeResponse parses an HTTP response from a ListShortCodeWithResponse call
func ParseListShortCodeResponse(rsp *http.Response) (*ListShortCodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListShortCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                        `json:"end,omitempty"`
			FirstPageUri    *string                     `json:"first_page_uri,omitempty"`
			NextPageUri     *string                     `json:"next_page_uri,omitempty"`
			Page            *int                        `json:"page,omitempty"`
			PageSize        *int                        `json:"page_size,omitempty"`
			PreviousPageUri *string                     `json:"previous_page_uri,omitempty"`
			ShortCodes      *[]ApiV2010AccountShortCode `json:"short_codes,omitempty"`
			Start           *int                        `json:"start,omitempty"`
			Uri             *string                     `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchShortCodeResponse parses an HTTP response from a FetchShortCodeWithResponse call
func ParseFetchShortCodeResponse(rsp *http.Response) (*FetchShortCodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchShortCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountShortCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateShortCodeResponse parses an HTTP response from a UpdateShortCodeWithResponse call
func ParseUpdateShortCodeResponse(rsp *http.Response) (*UpdateShortCodeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateShortCodeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountShortCode
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListSigningKeyResponse parses an HTTP response from a ListSigningKeyWithResponse call
func ParseListSigningKeyResponse(rsp *http.Response) (*ListSigningKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListSigningKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                         `json:"end,omitempty"`
			FirstPageUri    *string                      `json:"first_page_uri,omitempty"`
			NextPageUri     *string                      `json:"next_page_uri,omitempty"`
			Page            *int                         `json:"page,omitempty"`
			PageSize        *int                         `json:"page_size,omitempty"`
			PreviousPageUri *string                      `json:"previous_page_uri,omitempty"`
			SigningKeys     *[]ApiV2010AccountSigningKey `json:"signing_keys,omitempty"`
			Start           *int                         `json:"start,omitempty"`
			Uri             *string                      `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateNewSigningKeyResponse parses an HTTP response from a CreateNewSigningKeyWithResponse call
func ParseCreateNewSigningKeyResponse(rsp *http.Response) (*CreateNewSigningKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateNewSigningKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountNewSigningKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteSigningKeyResponse parses an HTTP response from a DeleteSigningKeyWithResponse call
func ParseDeleteSigningKeyResponse(rsp *http.Response) (*DeleteSigningKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteSigningKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchSigningKeyResponse parses an HTTP response from a FetchSigningKeyWithResponse call
func ParseFetchSigningKeyResponse(rsp *http.Response) (*FetchSigningKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchSigningKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSigningKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateSigningKeyResponse parses an HTTP response from a UpdateSigningKeyWithResponse call
func ParseUpdateSigningKeyResponse(rsp *http.Response) (*UpdateSigningKeyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateSigningKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountSigningKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateTokenResponse parses an HTTP response from a CreateTokenWithResponse call
func ParseCreateTokenResponse(rsp *http.Response) (*CreateTokenResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTokenResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountToken
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseListTranscriptionResponse parses an HTTP response from a ListTranscriptionWithResponse call
func ParseListTranscriptionResponse(rsp *http.Response) (*ListTranscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                            `json:"end,omitempty"`
			FirstPageUri    *string                         `json:"first_page_uri,omitempty"`
			NextPageUri     *string                         `json:"next_page_uri,omitempty"`
			Page            *int                            `json:"page,omitempty"`
			PageSize        *int                            `json:"page_size,omitempty"`
			PreviousPageUri *string                         `json:"previous_page_uri,omitempty"`
			Start           *int                            `json:"start,omitempty"`
			Transcriptions  *[]ApiV2010AccountTranscription `json:"transcriptions,omitempty"`
			Uri             *string                         `json:"uri,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteTranscriptionResponse parses an HTTP response from a DeleteTranscriptionWithResponse call
func ParseDeleteTranscriptionResponse(rsp *http.Response) (*DeleteTranscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchTranscriptionResponse parses an HTTP response from a FetchTranscriptionWithResponse call
func ParseFetchTranscriptionResponse(rsp *http.Response) (*FetchTranscriptionResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchTranscriptionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountTranscription
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordResponse parses an HTTP response from a ListUsageRecordWithResponse call
func ParseListUsageRecordResponse(rsp *http.Response) (*ListUsageRecordResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                               `json:"end,omitempty"`
			FirstPageUri    *string                            `json:"first_page_uri,omitempty"`
			NextPageUri     *string                            `json:"next_page_uri,omitempty"`
			Page            *int                               `json:"page,omitempty"`
			PageSize        *int                               `json:"page_size,omitempty"`
			PreviousPageUri *string                            `json:"previous_page_uri,omitempty"`
			Start           *int                               `json:"start,omitempty"`
			Uri             *string                            `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecord `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordAllTimeResponse parses an HTTP response from a ListUsageRecordAllTimeWithResponse call
func ParseListUsageRecordAllTimeResponse(rsp *http.Response) (*ListUsageRecordAllTimeResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordAllTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                 `json:"end,omitempty"`
			FirstPageUri    *string                                              `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                              `json:"next_page_uri,omitempty"`
			Page            *int                                                 `json:"page,omitempty"`
			PageSize        *int                                                 `json:"page_size,omitempty"`
			PreviousPageUri *string                                              `json:"previous_page_uri,omitempty"`
			Start           *int                                                 `json:"start,omitempty"`
			Uri             *string                                              `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordAllTime `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordDailyResponse parses an HTTP response from a ListUsageRecordDailyWithResponse call
func ParseListUsageRecordDailyResponse(rsp *http.Response) (*ListUsageRecordDailyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordDailyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                               `json:"end,omitempty"`
			FirstPageUri    *string                                            `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                            `json:"next_page_uri,omitempty"`
			Page            *int                                               `json:"page,omitempty"`
			PageSize        *int                                               `json:"page_size,omitempty"`
			PreviousPageUri *string                                            `json:"previous_page_uri,omitempty"`
			Start           *int                                               `json:"start,omitempty"`
			Uri             *string                                            `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordDaily `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordLastMonthResponse parses an HTTP response from a ListUsageRecordLastMonthWithResponse call
func ParseListUsageRecordLastMonthResponse(rsp *http.Response) (*ListUsageRecordLastMonthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordLastMonthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                   `json:"end,omitempty"`
			FirstPageUri    *string                                                `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                `json:"next_page_uri,omitempty"`
			Page            *int                                                   `json:"page,omitempty"`
			PageSize        *int                                                   `json:"page_size,omitempty"`
			PreviousPageUri *string                                                `json:"previous_page_uri,omitempty"`
			Start           *int                                                   `json:"start,omitempty"`
			Uri             *string                                                `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordLastMonth `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordMonthlyResponse parses an HTTP response from a ListUsageRecordMonthlyWithResponse call
func ParseListUsageRecordMonthlyResponse(rsp *http.Response) (*ListUsageRecordMonthlyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordMonthlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                 `json:"end,omitempty"`
			FirstPageUri    *string                                              `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                              `json:"next_page_uri,omitempty"`
			Page            *int                                                 `json:"page,omitempty"`
			PageSize        *int                                                 `json:"page_size,omitempty"`
			PreviousPageUri *string                                              `json:"previous_page_uri,omitempty"`
			Start           *int                                                 `json:"start,omitempty"`
			Uri             *string                                              `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordMonthly `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordThisMonthResponse parses an HTTP response from a ListUsageRecordThisMonthWithResponse call
func ParseListUsageRecordThisMonthResponse(rsp *http.Response) (*ListUsageRecordThisMonthResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordThisMonthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                   `json:"end,omitempty"`
			FirstPageUri    *string                                                `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                `json:"next_page_uri,omitempty"`
			Page            *int                                                   `json:"page,omitempty"`
			PageSize        *int                                                   `json:"page_size,omitempty"`
			PreviousPageUri *string                                                `json:"previous_page_uri,omitempty"`
			Start           *int                                                   `json:"start,omitempty"`
			Uri             *string                                                `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordThisMonth `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordTodayResponse parses an HTTP response from a ListUsageRecordTodayWithResponse call
func ParseListUsageRecordTodayResponse(rsp *http.Response) (*ListUsageRecordTodayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordTodayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                               `json:"end,omitempty"`
			FirstPageUri    *string                                            `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                            `json:"next_page_uri,omitempty"`
			Page            *int                                               `json:"page,omitempty"`
			PageSize        *int                                               `json:"page_size,omitempty"`
			PreviousPageUri *string                                            `json:"previous_page_uri,omitempty"`
			Start           *int                                               `json:"start,omitempty"`
			Uri             *string                                            `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordToday `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordYearlyResponse parses an HTTP response from a ListUsageRecordYearlyWithResponse call
func ParseListUsageRecordYearlyResponse(rsp *http.Response) (*ListUsageRecordYearlyResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordYearlyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                `json:"end,omitempty"`
			FirstPageUri    *string                                             `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                             `json:"next_page_uri,omitempty"`
			Page            *int                                                `json:"page,omitempty"`
			PageSize        *int                                                `json:"page_size,omitempty"`
			PreviousPageUri *string                                             `json:"previous_page_uri,omitempty"`
			Start           *int                                                `json:"start,omitempty"`
			Uri             *string                                             `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordYearly `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageRecordYesterdayResponse parses an HTTP response from a ListUsageRecordYesterdayWithResponse call
func ParseListUsageRecordYesterdayResponse(rsp *http.Response) (*ListUsageRecordYesterdayResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageRecordYesterdayResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                                   `json:"end,omitempty"`
			FirstPageUri    *string                                                `json:"first_page_uri,omitempty"`
			NextPageUri     *string                                                `json:"next_page_uri,omitempty"`
			Page            *int                                                   `json:"page,omitempty"`
			PageSize        *int                                                   `json:"page_size,omitempty"`
			PreviousPageUri *string                                                `json:"previous_page_uri,omitempty"`
			Start           *int                                                   `json:"start,omitempty"`
			Uri             *string                                                `json:"uri,omitempty"`
			UsageRecords    *[]ApiV2010AccountUsageUsageRecordUsageRecordYesterday `json:"usage_records,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseListUsageTriggerResponse parses an HTTP response from a ListUsageTriggerWithResponse call
func ParseListUsageTriggerResponse(rsp *http.Response) (*ListUsageTriggerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ListUsageTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			End             *int                                `json:"end,omitempty"`
			FirstPageUri    *string                             `json:"first_page_uri,omitempty"`
			NextPageUri     *string                             `json:"next_page_uri,omitempty"`
			Page            *int                                `json:"page,omitempty"`
			PageSize        *int                                `json:"page_size,omitempty"`
			PreviousPageUri *string                             `json:"previous_page_uri,omitempty"`
			Start           *int                                `json:"start,omitempty"`
			Uri             *string                             `json:"uri,omitempty"`
			UsageTriggers   *[]ApiV2010AccountUsageUsageTrigger `json:"usage_triggers,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseCreateUsageTriggerResponse parses an HTTP response from a CreateUsageTriggerWithResponse call
func ParseCreateUsageTriggerResponse(rsp *http.Response) (*CreateUsageTriggerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateUsageTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 201:
		var dest ApiV2010AccountUsageUsageTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON201 = &dest

	}

	return response, nil
}

// ParseDeleteUsageTriggerResponse parses an HTTP response from a DeleteUsageTriggerWithResponse call
func ParseDeleteUsageTriggerResponse(rsp *http.Response) (*DeleteUsageTriggerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUsageTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseFetchUsageTriggerResponse parses an HTTP response from a FetchUsageTriggerWithResponse call
func ParseFetchUsageTriggerResponse(rsp *http.Response) (*FetchUsageTriggerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchUsageTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountUsageUsageTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateUsageTriggerResponse parses an HTTP response from a UpdateUsageTriggerWithResponse call
func ParseUpdateUsageTriggerResponse(rsp *http.Response) (*UpdateUsageTriggerResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateUsageTriggerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010AccountUsageUsageTrigger
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseFetchAccountResponse parses an HTTP response from a FetchAccountWithResponse call
func ParseFetchAccountResponse(rsp *http.Response) (*FetchAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &FetchAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseUpdateAccountResponse parses an HTTP response from a UpdateAccountWithResponse call
func ParseUpdateAccountResponse(rsp *http.Response) (*UpdateAccountResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ApiV2010Account
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
