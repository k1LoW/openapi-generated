// Package server provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.11.0 DO NOT EDIT.
package server

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	AccountSid_authTokenScopes = "accountSid_authToken.Scopes"
)

// Defines values for ApiV2010AccountStatus.
const (
	ApiV2010AccountStatusActive    ApiV2010AccountStatus = "active"
	ApiV2010AccountStatusClosed    ApiV2010AccountStatus = "closed"
	ApiV2010AccountStatusSuspended ApiV2010AccountStatus = "suspended"
)

// Defines values for ApiV2010AccountType.
const (
	Full  ApiV2010AccountType = "Full"
	Trial ApiV2010AccountType = "Trial"
)

// Defines values for ApiV2010AccountAddressDependentPhoneNumberAddressRequirements.
const (
	ApiV2010AccountAddressDependentPhoneNumberAddressRequirementsAny     ApiV2010AccountAddressDependentPhoneNumberAddressRequirements = "any"
	ApiV2010AccountAddressDependentPhoneNumberAddressRequirementsForeign ApiV2010AccountAddressDependentPhoneNumberAddressRequirements = "foreign"
	ApiV2010AccountAddressDependentPhoneNumberAddressRequirementsLocal   ApiV2010AccountAddressDependentPhoneNumberAddressRequirements = "local"
	ApiV2010AccountAddressDependentPhoneNumberAddressRequirementsNone    ApiV2010AccountAddressDependentPhoneNumberAddressRequirements = "none"
)

// Defines values for ApiV2010AccountAddressDependentPhoneNumberEmergencyStatus.
const (
	ApiV2010AccountAddressDependentPhoneNumberEmergencyStatusActive   ApiV2010AccountAddressDependentPhoneNumberEmergencyStatus = "Active"
	ApiV2010AccountAddressDependentPhoneNumberEmergencyStatusInactive ApiV2010AccountAddressDependentPhoneNumberEmergencyStatus = "Inactive"
)

// Defines values for ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod.
const (
	ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethodDELETE ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod = "DELETE"
	ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethodGET    ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod = "GET"
	ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethodHEAD   ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod = "HEAD"
	ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethodPATCH  ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod = "PATCH"
	ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethodPOST   ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod = "POST"
	ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethodPUT    ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountAddressDependentPhoneNumberSmsMethod.
const (
	ApiV2010AccountAddressDependentPhoneNumberSmsMethodDELETE ApiV2010AccountAddressDependentPhoneNumberSmsMethod = "DELETE"
	ApiV2010AccountAddressDependentPhoneNumberSmsMethodGET    ApiV2010AccountAddressDependentPhoneNumberSmsMethod = "GET"
	ApiV2010AccountAddressDependentPhoneNumberSmsMethodHEAD   ApiV2010AccountAddressDependentPhoneNumberSmsMethod = "HEAD"
	ApiV2010AccountAddressDependentPhoneNumberSmsMethodPATCH  ApiV2010AccountAddressDependentPhoneNumberSmsMethod = "PATCH"
	ApiV2010AccountAddressDependentPhoneNumberSmsMethodPOST   ApiV2010AccountAddressDependentPhoneNumberSmsMethod = "POST"
	ApiV2010AccountAddressDependentPhoneNumberSmsMethodPUT    ApiV2010AccountAddressDependentPhoneNumberSmsMethod = "PUT"
)

// Defines values for ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod.
const (
	ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethodDELETE ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod = "DELETE"
	ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethodGET    ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod = "GET"
	ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethodHEAD   ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod = "HEAD"
	ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethodPATCH  ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod = "PATCH"
	ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethodPOST   ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod = "POST"
	ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethodPUT    ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod.
const (
	ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethodDELETE ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod = "DELETE"
	ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethodGET    ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod = "GET"
	ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethodHEAD   ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod = "HEAD"
	ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethodPATCH  ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod = "PATCH"
	ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethodPOST   ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod = "POST"
	ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethodPUT    ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountAddressDependentPhoneNumberVoiceMethod.
const (
	ApiV2010AccountAddressDependentPhoneNumberVoiceMethodDELETE ApiV2010AccountAddressDependentPhoneNumberVoiceMethod = "DELETE"
	ApiV2010AccountAddressDependentPhoneNumberVoiceMethodGET    ApiV2010AccountAddressDependentPhoneNumberVoiceMethod = "GET"
	ApiV2010AccountAddressDependentPhoneNumberVoiceMethodHEAD   ApiV2010AccountAddressDependentPhoneNumberVoiceMethod = "HEAD"
	ApiV2010AccountAddressDependentPhoneNumberVoiceMethodPATCH  ApiV2010AccountAddressDependentPhoneNumberVoiceMethod = "PATCH"
	ApiV2010AccountAddressDependentPhoneNumberVoiceMethodPOST   ApiV2010AccountAddressDependentPhoneNumberVoiceMethod = "POST"
	ApiV2010AccountAddressDependentPhoneNumberVoiceMethodPUT    ApiV2010AccountAddressDependentPhoneNumberVoiceMethod = "PUT"
)

// Defines values for ApiV2010AccountApplicationSmsFallbackMethod.
const (
	ApiV2010AccountApplicationSmsFallbackMethodDELETE ApiV2010AccountApplicationSmsFallbackMethod = "DELETE"
	ApiV2010AccountApplicationSmsFallbackMethodGET    ApiV2010AccountApplicationSmsFallbackMethod = "GET"
	ApiV2010AccountApplicationSmsFallbackMethodHEAD   ApiV2010AccountApplicationSmsFallbackMethod = "HEAD"
	ApiV2010AccountApplicationSmsFallbackMethodPATCH  ApiV2010AccountApplicationSmsFallbackMethod = "PATCH"
	ApiV2010AccountApplicationSmsFallbackMethodPOST   ApiV2010AccountApplicationSmsFallbackMethod = "POST"
	ApiV2010AccountApplicationSmsFallbackMethodPUT    ApiV2010AccountApplicationSmsFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountApplicationSmsMethod.
const (
	ApiV2010AccountApplicationSmsMethodDELETE ApiV2010AccountApplicationSmsMethod = "DELETE"
	ApiV2010AccountApplicationSmsMethodGET    ApiV2010AccountApplicationSmsMethod = "GET"
	ApiV2010AccountApplicationSmsMethodHEAD   ApiV2010AccountApplicationSmsMethod = "HEAD"
	ApiV2010AccountApplicationSmsMethodPATCH  ApiV2010AccountApplicationSmsMethod = "PATCH"
	ApiV2010AccountApplicationSmsMethodPOST   ApiV2010AccountApplicationSmsMethod = "POST"
	ApiV2010AccountApplicationSmsMethodPUT    ApiV2010AccountApplicationSmsMethod = "PUT"
)

// Defines values for ApiV2010AccountApplicationStatusCallbackMethod.
const (
	ApiV2010AccountApplicationStatusCallbackMethodDELETE ApiV2010AccountApplicationStatusCallbackMethod = "DELETE"
	ApiV2010AccountApplicationStatusCallbackMethodGET    ApiV2010AccountApplicationStatusCallbackMethod = "GET"
	ApiV2010AccountApplicationStatusCallbackMethodHEAD   ApiV2010AccountApplicationStatusCallbackMethod = "HEAD"
	ApiV2010AccountApplicationStatusCallbackMethodPATCH  ApiV2010AccountApplicationStatusCallbackMethod = "PATCH"
	ApiV2010AccountApplicationStatusCallbackMethodPOST   ApiV2010AccountApplicationStatusCallbackMethod = "POST"
	ApiV2010AccountApplicationStatusCallbackMethodPUT    ApiV2010AccountApplicationStatusCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountApplicationVoiceFallbackMethod.
const (
	ApiV2010AccountApplicationVoiceFallbackMethodDELETE ApiV2010AccountApplicationVoiceFallbackMethod = "DELETE"
	ApiV2010AccountApplicationVoiceFallbackMethodGET    ApiV2010AccountApplicationVoiceFallbackMethod = "GET"
	ApiV2010AccountApplicationVoiceFallbackMethodHEAD   ApiV2010AccountApplicationVoiceFallbackMethod = "HEAD"
	ApiV2010AccountApplicationVoiceFallbackMethodPATCH  ApiV2010AccountApplicationVoiceFallbackMethod = "PATCH"
	ApiV2010AccountApplicationVoiceFallbackMethodPOST   ApiV2010AccountApplicationVoiceFallbackMethod = "POST"
	ApiV2010AccountApplicationVoiceFallbackMethodPUT    ApiV2010AccountApplicationVoiceFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountApplicationVoiceMethod.
const (
	ApiV2010AccountApplicationVoiceMethodDELETE ApiV2010AccountApplicationVoiceMethod = "DELETE"
	ApiV2010AccountApplicationVoiceMethodGET    ApiV2010AccountApplicationVoiceMethod = "GET"
	ApiV2010AccountApplicationVoiceMethodHEAD   ApiV2010AccountApplicationVoiceMethod = "HEAD"
	ApiV2010AccountApplicationVoiceMethodPATCH  ApiV2010AccountApplicationVoiceMethod = "PATCH"
	ApiV2010AccountApplicationVoiceMethodPOST   ApiV2010AccountApplicationVoiceMethod = "POST"
	ApiV2010AccountApplicationVoiceMethodPUT    ApiV2010AccountApplicationVoiceMethod = "PUT"
)

// Defines values for ApiV2010AccountAuthorizedConnectAppPermissions.
const (
	ApiV2010AccountAuthorizedConnectAppPermissionsGetAll  ApiV2010AccountAuthorizedConnectAppPermissions = "get-all"
	ApiV2010AccountAuthorizedConnectAppPermissionsPostAll ApiV2010AccountAuthorizedConnectAppPermissions = "post-all"
)

// Defines values for ApiV2010AccountCallStatus.
const (
	ApiV2010AccountCallStatusBusy       ApiV2010AccountCallStatus = "busy"
	ApiV2010AccountCallStatusCanceled   ApiV2010AccountCallStatus = "canceled"
	ApiV2010AccountCallStatusCompleted  ApiV2010AccountCallStatus = "completed"
	ApiV2010AccountCallStatusFailed     ApiV2010AccountCallStatus = "failed"
	ApiV2010AccountCallStatusInProgress ApiV2010AccountCallStatus = "in-progress"
	ApiV2010AccountCallStatusNoAnswer   ApiV2010AccountCallStatus = "no-answer"
	ApiV2010AccountCallStatusQueued     ApiV2010AccountCallStatus = "queued"
	ApiV2010AccountCallStatusRinging    ApiV2010AccountCallStatus = "ringing"
)

// Defines values for ApiV2010AccountCallCallFeedbackIssues.
const (
	AudioLatency      ApiV2010AccountCallCallFeedbackIssues = "audio-latency"
	DigitsNotCaptured ApiV2010AccountCallCallFeedbackIssues = "digits-not-captured"
	DroppedCall       ApiV2010AccountCallCallFeedbackIssues = "dropped-call"
	ImperfectAudio    ApiV2010AccountCallCallFeedbackIssues = "imperfect-audio"
	IncorrectCallerId ApiV2010AccountCallCallFeedbackIssues = "incorrect-caller-id"
	OneWayAudio       ApiV2010AccountCallCallFeedbackIssues = "one-way-audio"
	PostDialDelay     ApiV2010AccountCallCallFeedbackIssues = "post-dial-delay"
	UnsolicitedCall   ApiV2010AccountCallCallFeedbackIssues = "unsolicited-call"
)

// Defines values for ApiV2010AccountCallCallFeedbackSummaryStatus.
const (
	ApiV2010AccountCallCallFeedbackSummaryStatusCompleted  ApiV2010AccountCallCallFeedbackSummaryStatus = "completed"
	ApiV2010AccountCallCallFeedbackSummaryStatusFailed     ApiV2010AccountCallCallFeedbackSummaryStatus = "failed"
	ApiV2010AccountCallCallFeedbackSummaryStatusInProgress ApiV2010AccountCallCallFeedbackSummaryStatus = "in-progress"
	ApiV2010AccountCallCallFeedbackSummaryStatusQueued     ApiV2010AccountCallCallFeedbackSummaryStatus = "queued"
)

// Defines values for ApiV2010AccountCallCallNotificationRequestMethod.
const (
	ApiV2010AccountCallCallNotificationRequestMethodDELETE ApiV2010AccountCallCallNotificationRequestMethod = "DELETE"
	ApiV2010AccountCallCallNotificationRequestMethodGET    ApiV2010AccountCallCallNotificationRequestMethod = "GET"
	ApiV2010AccountCallCallNotificationRequestMethodHEAD   ApiV2010AccountCallCallNotificationRequestMethod = "HEAD"
	ApiV2010AccountCallCallNotificationRequestMethodPATCH  ApiV2010AccountCallCallNotificationRequestMethod = "PATCH"
	ApiV2010AccountCallCallNotificationRequestMethodPOST   ApiV2010AccountCallCallNotificationRequestMethod = "POST"
	ApiV2010AccountCallCallNotificationRequestMethodPUT    ApiV2010AccountCallCallNotificationRequestMethod = "PUT"
)

// Defines values for ApiV2010AccountCallCallNotificationInstanceRequestMethod.
const (
	ApiV2010AccountCallCallNotificationInstanceRequestMethodDELETE ApiV2010AccountCallCallNotificationInstanceRequestMethod = "DELETE"
	ApiV2010AccountCallCallNotificationInstanceRequestMethodGET    ApiV2010AccountCallCallNotificationInstanceRequestMethod = "GET"
	ApiV2010AccountCallCallNotificationInstanceRequestMethodHEAD   ApiV2010AccountCallCallNotificationInstanceRequestMethod = "HEAD"
	ApiV2010AccountCallCallNotificationInstanceRequestMethodPATCH  ApiV2010AccountCallCallNotificationInstanceRequestMethod = "PATCH"
	ApiV2010AccountCallCallNotificationInstanceRequestMethodPOST   ApiV2010AccountCallCallNotificationInstanceRequestMethod = "POST"
	ApiV2010AccountCallCallNotificationInstanceRequestMethodPUT    ApiV2010AccountCallCallNotificationInstanceRequestMethod = "PUT"
)

// Defines values for ApiV2010AccountCallCallRecordingSource.
const (
	ApiV2010AccountCallCallRecordingSourceConference                  ApiV2010AccountCallCallRecordingSource = "Conference"
	ApiV2010AccountCallCallRecordingSourceDialVerb                    ApiV2010AccountCallCallRecordingSource = "DialVerb"
	ApiV2010AccountCallCallRecordingSourceOutboundAPI                 ApiV2010AccountCallCallRecordingSource = "OutboundAPI"
	ApiV2010AccountCallCallRecordingSourceRecordVerb                  ApiV2010AccountCallCallRecordingSource = "RecordVerb"
	ApiV2010AccountCallCallRecordingSourceStartCallRecordingAPI       ApiV2010AccountCallCallRecordingSource = "StartCallRecordingAPI"
	ApiV2010AccountCallCallRecordingSourceStartConferenceRecordingAPI ApiV2010AccountCallCallRecordingSource = "StartConferenceRecordingAPI"
	ApiV2010AccountCallCallRecordingSourceTrunking                    ApiV2010AccountCallCallRecordingSource = "Trunking"
)

// Defines values for ApiV2010AccountCallCallRecordingStatus.
const (
	ApiV2010AccountCallCallRecordingStatusAbsent     ApiV2010AccountCallCallRecordingStatus = "absent"
	ApiV2010AccountCallCallRecordingStatusCompleted  ApiV2010AccountCallCallRecordingStatus = "completed"
	ApiV2010AccountCallCallRecordingStatusInProgress ApiV2010AccountCallCallRecordingStatus = "in-progress"
	ApiV2010AccountCallCallRecordingStatusPaused     ApiV2010AccountCallCallRecordingStatus = "paused"
	ApiV2010AccountCallCallRecordingStatusProcessing ApiV2010AccountCallCallRecordingStatus = "processing"
	ApiV2010AccountCallCallRecordingStatusStopped    ApiV2010AccountCallCallRecordingStatus = "stopped"
)

// Defines values for ApiV2010AccountCallSiprecStatus.
const (
	ApiV2010AccountCallSiprecStatusInProgress ApiV2010AccountCallSiprecStatus = "in-progress"
	ApiV2010AccountCallSiprecStatusStopped    ApiV2010AccountCallSiprecStatus = "stopped"
)

// Defines values for ApiV2010AccountCallStreamStatus.
const (
	ApiV2010AccountCallStreamStatusInProgress ApiV2010AccountCallStreamStatus = "in-progress"
	ApiV2010AccountCallStreamStatusStopped    ApiV2010AccountCallStreamStatus = "stopped"
)

// Defines values for ApiV2010AccountConferenceReasonConferenceEnded.
const (
	ConferenceEndedViaApi                    ApiV2010AccountConferenceReasonConferenceEnded = "conference-ended-via-api"
	LastParticipantKicked                    ApiV2010AccountConferenceReasonConferenceEnded = "last-participant-kicked"
	LastParticipantLeft                      ApiV2010AccountConferenceReasonConferenceEnded = "last-participant-left"
	ParticipantWithEndConferenceOnExitKicked ApiV2010AccountConferenceReasonConferenceEnded = "participant-with-end-conference-on-exit-kicked"
	ParticipantWithEndConferenceOnExitLeft   ApiV2010AccountConferenceReasonConferenceEnded = "participant-with-end-conference-on-exit-left"
)

// Defines values for ApiV2010AccountConferenceStatus.
const (
	ApiV2010AccountConferenceStatusCompleted  ApiV2010AccountConferenceStatus = "completed"
	ApiV2010AccountConferenceStatusInProgress ApiV2010AccountConferenceStatus = "in-progress"
	ApiV2010AccountConferenceStatusInit       ApiV2010AccountConferenceStatus = "init"
)

// Defines values for ApiV2010AccountConferenceConferenceRecordingSource.
const (
	ApiV2010AccountConferenceConferenceRecordingSourceConference                  ApiV2010AccountConferenceConferenceRecordingSource = "Conference"
	ApiV2010AccountConferenceConferenceRecordingSourceDialVerb                    ApiV2010AccountConferenceConferenceRecordingSource = "DialVerb"
	ApiV2010AccountConferenceConferenceRecordingSourceOutboundAPI                 ApiV2010AccountConferenceConferenceRecordingSource = "OutboundAPI"
	ApiV2010AccountConferenceConferenceRecordingSourceRecordVerb                  ApiV2010AccountConferenceConferenceRecordingSource = "RecordVerb"
	ApiV2010AccountConferenceConferenceRecordingSourceStartCallRecordingAPI       ApiV2010AccountConferenceConferenceRecordingSource = "StartCallRecordingAPI"
	ApiV2010AccountConferenceConferenceRecordingSourceStartConferenceRecordingAPI ApiV2010AccountConferenceConferenceRecordingSource = "StartConferenceRecordingAPI"
	ApiV2010AccountConferenceConferenceRecordingSourceTrunking                    ApiV2010AccountConferenceConferenceRecordingSource = "Trunking"
)

// Defines values for ApiV2010AccountConferenceConferenceRecordingStatus.
const (
	ApiV2010AccountConferenceConferenceRecordingStatusAbsent     ApiV2010AccountConferenceConferenceRecordingStatus = "absent"
	ApiV2010AccountConferenceConferenceRecordingStatusCompleted  ApiV2010AccountConferenceConferenceRecordingStatus = "completed"
	ApiV2010AccountConferenceConferenceRecordingStatusInProgress ApiV2010AccountConferenceConferenceRecordingStatus = "in-progress"
	ApiV2010AccountConferenceConferenceRecordingStatusPaused     ApiV2010AccountConferenceConferenceRecordingStatus = "paused"
	ApiV2010AccountConferenceConferenceRecordingStatusProcessing ApiV2010AccountConferenceConferenceRecordingStatus = "processing"
	ApiV2010AccountConferenceConferenceRecordingStatusStopped    ApiV2010AccountConferenceConferenceRecordingStatus = "stopped"
)

// Defines values for ApiV2010AccountConferenceParticipantStatus.
const (
	ApiV2010AccountConferenceParticipantStatusComplete   ApiV2010AccountConferenceParticipantStatus = "complete"
	ApiV2010AccountConferenceParticipantStatusConnected  ApiV2010AccountConferenceParticipantStatus = "connected"
	ApiV2010AccountConferenceParticipantStatusConnecting ApiV2010AccountConferenceParticipantStatus = "connecting"
	ApiV2010AccountConferenceParticipantStatusFailed     ApiV2010AccountConferenceParticipantStatus = "failed"
	ApiV2010AccountConferenceParticipantStatusQueued     ApiV2010AccountConferenceParticipantStatus = "queued"
	ApiV2010AccountConferenceParticipantStatusRinging    ApiV2010AccountConferenceParticipantStatus = "ringing"
)

// Defines values for ApiV2010AccountConnectAppDeauthorizeCallbackMethod.
const (
	ApiV2010AccountConnectAppDeauthorizeCallbackMethodDELETE ApiV2010AccountConnectAppDeauthorizeCallbackMethod = "DELETE"
	ApiV2010AccountConnectAppDeauthorizeCallbackMethodGET    ApiV2010AccountConnectAppDeauthorizeCallbackMethod = "GET"
	ApiV2010AccountConnectAppDeauthorizeCallbackMethodHEAD   ApiV2010AccountConnectAppDeauthorizeCallbackMethod = "HEAD"
	ApiV2010AccountConnectAppDeauthorizeCallbackMethodPATCH  ApiV2010AccountConnectAppDeauthorizeCallbackMethod = "PATCH"
	ApiV2010AccountConnectAppDeauthorizeCallbackMethodPOST   ApiV2010AccountConnectAppDeauthorizeCallbackMethod = "POST"
	ApiV2010AccountConnectAppDeauthorizeCallbackMethodPUT    ApiV2010AccountConnectAppDeauthorizeCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountConnectAppPermissions.
const (
	ApiV2010AccountConnectAppPermissionsGetAll  ApiV2010AccountConnectAppPermissions = "get-all"
	ApiV2010AccountConnectAppPermissionsPostAll ApiV2010AccountConnectAppPermissions = "post-all"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberAddressRequirements.
const (
	ApiV2010AccountIncomingPhoneNumberAddressRequirementsAny     ApiV2010AccountIncomingPhoneNumberAddressRequirements = "any"
	ApiV2010AccountIncomingPhoneNumberAddressRequirementsForeign ApiV2010AccountIncomingPhoneNumberAddressRequirements = "foreign"
	ApiV2010AccountIncomingPhoneNumberAddressRequirementsLocal   ApiV2010AccountIncomingPhoneNumberAddressRequirements = "local"
	ApiV2010AccountIncomingPhoneNumberAddressRequirementsNone    ApiV2010AccountIncomingPhoneNumberAddressRequirements = "none"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus.
const (
	ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatusPendingRegistration   ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus = "pending-registration"
	ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatusPendingUnregistration ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus = "pending-unregistration"
	ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatusRegistered            ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus = "registered"
	ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatusRegistrationFailure   ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus = "registration-failure"
	ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatusUnregistered          ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus = "unregistered"
	ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatusUnregistrationFailure ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus = "unregistration-failure"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberEmergencyStatus.
const (
	ApiV2010AccountIncomingPhoneNumberEmergencyStatusActive   ApiV2010AccountIncomingPhoneNumberEmergencyStatus = "Active"
	ApiV2010AccountIncomingPhoneNumberEmergencyStatusInactive ApiV2010AccountIncomingPhoneNumberEmergencyStatus = "Inactive"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberSmsFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberSmsFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberSmsFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberSmsFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberSmsFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberSmsFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberSmsMethod.
const (
	ApiV2010AccountIncomingPhoneNumberSmsMethodDELETE ApiV2010AccountIncomingPhoneNumberSmsMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberSmsMethodGET    ApiV2010AccountIncomingPhoneNumberSmsMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberSmsMethodHEAD   ApiV2010AccountIncomingPhoneNumberSmsMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberSmsMethodPATCH  ApiV2010AccountIncomingPhoneNumberSmsMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberSmsMethodPOST   ApiV2010AccountIncomingPhoneNumberSmsMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberSmsMethodPUT    ApiV2010AccountIncomingPhoneNumberSmsMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberStatusCallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberStatusCallbackMethodGET    ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberStatusCallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberStatusCallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberStatusCallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberStatusCallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberVoiceMethod.
const (
	ApiV2010AccountIncomingPhoneNumberVoiceMethodDELETE ApiV2010AccountIncomingPhoneNumberVoiceMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberVoiceMethodGET    ApiV2010AccountIncomingPhoneNumberVoiceMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberVoiceMethodHEAD   ApiV2010AccountIncomingPhoneNumberVoiceMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberVoiceMethodPATCH  ApiV2010AccountIncomingPhoneNumberVoiceMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberVoiceMethodPOST   ApiV2010AccountIncomingPhoneNumberVoiceMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberVoiceMethodPUT    ApiV2010AccountIncomingPhoneNumberVoiceMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberVoiceReceiveMode.
const (
	ApiV2010AccountIncomingPhoneNumberVoiceReceiveModeFax   ApiV2010AccountIncomingPhoneNumberVoiceReceiveMode = "fax"
	ApiV2010AccountIncomingPhoneNumberVoiceReceiveModeVoice ApiV2010AccountIncomingPhoneNumberVoiceReceiveMode = "voice"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirements.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirementsAny     ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirements = "any"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirementsForeign ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirements = "foreign"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirementsLocal   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirements = "local"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirementsNone    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirements = "none"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatusPendingRegistration   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus = "pending-registration"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatusPendingUnregistration ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus = "pending-unregistration"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatusRegistered            ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus = "registered"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatusRegistrationFailure   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus = "registration-failure"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatusUnregistered          ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus = "unregistered"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatusUnregistrationFailure ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus = "unregistration-failure"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyStatus.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyStatusActive   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyStatus = "Active"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyStatusInactive ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyStatus = "Inactive"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveMode.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveModeFax   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveMode = "fax"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveModeVoice ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveMode = "voice"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirements.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirementsAny     ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirements = "any"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirementsForeign ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirements = "foreign"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirementsLocal   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirements = "local"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirementsNone    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirements = "none"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatusPendingRegistration   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus = "pending-registration"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatusPendingUnregistration ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus = "pending-unregistration"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatusRegistered            ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus = "registered"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatusRegistrationFailure   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus = "registration-failure"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatusUnregistered          ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus = "unregistered"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatusUnregistrationFailure ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus = "unregistration-failure"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyStatus.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyStatusActive   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyStatus = "Active"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyStatusInactive ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyStatus = "Inactive"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveMode.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveModeFax   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveMode = "fax"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveModeVoice ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveMode = "voice"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeAddressRequirements.
const (
	Any     ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeAddressRequirements = "any"
	Foreign ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeAddressRequirements = "foreign"
	Local   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeAddressRequirements = "local"
	None    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeAddressRequirements = "none"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatusPendingRegistration   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus = "pending-registration"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatusPendingUnregistration ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus = "pending-unregistration"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatusRegistered            ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus = "registered"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatusRegistrationFailure   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus = "registration-failure"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatusUnregistered          ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus = "unregistered"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatusUnregistrationFailure ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus = "unregistration-failure"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyStatus.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyStatusActive   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyStatus = "Active"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyStatusInactive ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyStatus = "Inactive"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethodDELETE ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod = "DELETE"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethodGET    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod = "GET"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethodHEAD   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod = "HEAD"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethodPATCH  ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod = "PATCH"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethodPOST   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod = "POST"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethodPUT    ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod = "PUT"
)

// Defines values for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveMode.
const (
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveModeFax   ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveMode = "fax"
	ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveModeVoice ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveMode = "voice"
)

// Defines values for ApiV2010AccountMessageDirection.
const (
	Inbound       ApiV2010AccountMessageDirection = "inbound"
	OutboundApi   ApiV2010AccountMessageDirection = "outbound-api"
	OutboundCall  ApiV2010AccountMessageDirection = "outbound-call"
	OutboundReply ApiV2010AccountMessageDirection = "outbound-reply"
)

// Defines values for ApiV2010AccountMessageStatus.
const (
	ApiV2010AccountMessageStatusAccepted           ApiV2010AccountMessageStatus = "accepted"
	ApiV2010AccountMessageStatusCanceled           ApiV2010AccountMessageStatus = "canceled"
	ApiV2010AccountMessageStatusDelivered          ApiV2010AccountMessageStatus = "delivered"
	ApiV2010AccountMessageStatusFailed             ApiV2010AccountMessageStatus = "failed"
	ApiV2010AccountMessageStatusPartiallyDelivered ApiV2010AccountMessageStatus = "partially_delivered"
	ApiV2010AccountMessageStatusQueued             ApiV2010AccountMessageStatus = "queued"
	ApiV2010AccountMessageStatusRead               ApiV2010AccountMessageStatus = "read"
	ApiV2010AccountMessageStatusReceived           ApiV2010AccountMessageStatus = "received"
	ApiV2010AccountMessageStatusReceiving          ApiV2010AccountMessageStatus = "receiving"
	ApiV2010AccountMessageStatusScheduled          ApiV2010AccountMessageStatus = "scheduled"
	ApiV2010AccountMessageStatusSending            ApiV2010AccountMessageStatus = "sending"
	ApiV2010AccountMessageStatusSent               ApiV2010AccountMessageStatus = "sent"
	ApiV2010AccountMessageStatusUndelivered        ApiV2010AccountMessageStatus = "undelivered"
)

// Defines values for ApiV2010AccountMessageMessageFeedbackOutcome.
const (
	Confirmed   ApiV2010AccountMessageMessageFeedbackOutcome = "confirmed"
	Unconfirmed ApiV2010AccountMessageMessageFeedbackOutcome = "unconfirmed"
)

// Defines values for ApiV2010AccountNotificationRequestMethod.
const (
	ApiV2010AccountNotificationRequestMethodDELETE ApiV2010AccountNotificationRequestMethod = "DELETE"
	ApiV2010AccountNotificationRequestMethodGET    ApiV2010AccountNotificationRequestMethod = "GET"
	ApiV2010AccountNotificationRequestMethodHEAD   ApiV2010AccountNotificationRequestMethod = "HEAD"
	ApiV2010AccountNotificationRequestMethodPATCH  ApiV2010AccountNotificationRequestMethod = "PATCH"
	ApiV2010AccountNotificationRequestMethodPOST   ApiV2010AccountNotificationRequestMethod = "POST"
	ApiV2010AccountNotificationRequestMethodPUT    ApiV2010AccountNotificationRequestMethod = "PUT"
)

// Defines values for ApiV2010AccountNotificationInstanceRequestMethod.
const (
	ApiV2010AccountNotificationInstanceRequestMethodDELETE ApiV2010AccountNotificationInstanceRequestMethod = "DELETE"
	ApiV2010AccountNotificationInstanceRequestMethodGET    ApiV2010AccountNotificationInstanceRequestMethod = "GET"
	ApiV2010AccountNotificationInstanceRequestMethodHEAD   ApiV2010AccountNotificationInstanceRequestMethod = "HEAD"
	ApiV2010AccountNotificationInstanceRequestMethodPATCH  ApiV2010AccountNotificationInstanceRequestMethod = "PATCH"
	ApiV2010AccountNotificationInstanceRequestMethodPOST   ApiV2010AccountNotificationInstanceRequestMethod = "POST"
	ApiV2010AccountNotificationInstanceRequestMethodPUT    ApiV2010AccountNotificationInstanceRequestMethod = "PUT"
)

// Defines values for ApiV2010AccountRecordingSource.
const (
	Conference                  ApiV2010AccountRecordingSource = "Conference"
	DialVerb                    ApiV2010AccountRecordingSource = "DialVerb"
	OutboundAPI                 ApiV2010AccountRecordingSource = "OutboundAPI"
	RecordVerb                  ApiV2010AccountRecordingSource = "RecordVerb"
	StartCallRecordingAPI       ApiV2010AccountRecordingSource = "StartCallRecordingAPI"
	StartConferenceRecordingAPI ApiV2010AccountRecordingSource = "StartConferenceRecordingAPI"
	Trunking                    ApiV2010AccountRecordingSource = "Trunking"
)

// Defines values for ApiV2010AccountRecordingStatus.
const (
	ApiV2010AccountRecordingStatusAbsent     ApiV2010AccountRecordingStatus = "absent"
	ApiV2010AccountRecordingStatusCompleted  ApiV2010AccountRecordingStatus = "completed"
	ApiV2010AccountRecordingStatusDeleted    ApiV2010AccountRecordingStatus = "deleted"
	ApiV2010AccountRecordingStatusInProgress ApiV2010AccountRecordingStatus = "in-progress"
	ApiV2010AccountRecordingStatusPaused     ApiV2010AccountRecordingStatus = "paused"
	ApiV2010AccountRecordingStatusProcessing ApiV2010AccountRecordingStatus = "processing"
	ApiV2010AccountRecordingStatusStopped    ApiV2010AccountRecordingStatus = "stopped"
)

// Defines values for ApiV2010AccountRecordingRecordingAddOnResultStatus.
const (
	ApiV2010AccountRecordingRecordingAddOnResultStatusCanceled   ApiV2010AccountRecordingRecordingAddOnResultStatus = "canceled"
	ApiV2010AccountRecordingRecordingAddOnResultStatusCompleted  ApiV2010AccountRecordingRecordingAddOnResultStatus = "completed"
	ApiV2010AccountRecordingRecordingAddOnResultStatusDeleted    ApiV2010AccountRecordingRecordingAddOnResultStatus = "deleted"
	ApiV2010AccountRecordingRecordingAddOnResultStatusFailed     ApiV2010AccountRecordingRecordingAddOnResultStatus = "failed"
	ApiV2010AccountRecordingRecordingAddOnResultStatusInProgress ApiV2010AccountRecordingRecordingAddOnResultStatus = "in-progress"
	ApiV2010AccountRecordingRecordingAddOnResultStatusInit       ApiV2010AccountRecordingRecordingAddOnResultStatus = "init"
	ApiV2010AccountRecordingRecordingAddOnResultStatusProcessing ApiV2010AccountRecordingRecordingAddOnResultStatus = "processing"
	ApiV2010AccountRecordingRecordingAddOnResultStatusQueued     ApiV2010AccountRecordingRecordingAddOnResultStatus = "queued"
)

// Defines values for ApiV2010AccountRecordingRecordingTranscriptionStatus.
const (
	ApiV2010AccountRecordingRecordingTranscriptionStatusCompleted  ApiV2010AccountRecordingRecordingTranscriptionStatus = "completed"
	ApiV2010AccountRecordingRecordingTranscriptionStatusFailed     ApiV2010AccountRecordingRecordingTranscriptionStatus = "failed"
	ApiV2010AccountRecordingRecordingTranscriptionStatusInProgress ApiV2010AccountRecordingRecordingTranscriptionStatus = "in-progress"
)

// Defines values for ApiV2010AccountShortCodeSmsFallbackMethod.
const (
	ApiV2010AccountShortCodeSmsFallbackMethodDELETE ApiV2010AccountShortCodeSmsFallbackMethod = "DELETE"
	ApiV2010AccountShortCodeSmsFallbackMethodGET    ApiV2010AccountShortCodeSmsFallbackMethod = "GET"
	ApiV2010AccountShortCodeSmsFallbackMethodHEAD   ApiV2010AccountShortCodeSmsFallbackMethod = "HEAD"
	ApiV2010AccountShortCodeSmsFallbackMethodPATCH  ApiV2010AccountShortCodeSmsFallbackMethod = "PATCH"
	ApiV2010AccountShortCodeSmsFallbackMethodPOST   ApiV2010AccountShortCodeSmsFallbackMethod = "POST"
	ApiV2010AccountShortCodeSmsFallbackMethodPUT    ApiV2010AccountShortCodeSmsFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountShortCodeSmsMethod.
const (
	ApiV2010AccountShortCodeSmsMethodDELETE ApiV2010AccountShortCodeSmsMethod = "DELETE"
	ApiV2010AccountShortCodeSmsMethodGET    ApiV2010AccountShortCodeSmsMethod = "GET"
	ApiV2010AccountShortCodeSmsMethodHEAD   ApiV2010AccountShortCodeSmsMethod = "HEAD"
	ApiV2010AccountShortCodeSmsMethodPATCH  ApiV2010AccountShortCodeSmsMethod = "PATCH"
	ApiV2010AccountShortCodeSmsMethodPOST   ApiV2010AccountShortCodeSmsMethod = "POST"
	ApiV2010AccountShortCodeSmsMethodPUT    ApiV2010AccountShortCodeSmsMethod = "PUT"
)

// Defines values for ApiV2010AccountSipSipDomainVoiceFallbackMethod.
const (
	ApiV2010AccountSipSipDomainVoiceFallbackMethodDELETE ApiV2010AccountSipSipDomainVoiceFallbackMethod = "DELETE"
	ApiV2010AccountSipSipDomainVoiceFallbackMethodGET    ApiV2010AccountSipSipDomainVoiceFallbackMethod = "GET"
	ApiV2010AccountSipSipDomainVoiceFallbackMethodHEAD   ApiV2010AccountSipSipDomainVoiceFallbackMethod = "HEAD"
	ApiV2010AccountSipSipDomainVoiceFallbackMethodPATCH  ApiV2010AccountSipSipDomainVoiceFallbackMethod = "PATCH"
	ApiV2010AccountSipSipDomainVoiceFallbackMethodPOST   ApiV2010AccountSipSipDomainVoiceFallbackMethod = "POST"
	ApiV2010AccountSipSipDomainVoiceFallbackMethodPUT    ApiV2010AccountSipSipDomainVoiceFallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountSipSipDomainVoiceMethod.
const (
	ApiV2010AccountSipSipDomainVoiceMethodDELETE ApiV2010AccountSipSipDomainVoiceMethod = "DELETE"
	ApiV2010AccountSipSipDomainVoiceMethodGET    ApiV2010AccountSipSipDomainVoiceMethod = "GET"
	ApiV2010AccountSipSipDomainVoiceMethodHEAD   ApiV2010AccountSipSipDomainVoiceMethod = "HEAD"
	ApiV2010AccountSipSipDomainVoiceMethodPATCH  ApiV2010AccountSipSipDomainVoiceMethod = "PATCH"
	ApiV2010AccountSipSipDomainVoiceMethodPOST   ApiV2010AccountSipSipDomainVoiceMethod = "POST"
	ApiV2010AccountSipSipDomainVoiceMethodPUT    ApiV2010AccountSipSipDomainVoiceMethod = "PUT"
)

// Defines values for ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod.
const (
	ApiV2010AccountSipSipDomainVoiceStatusCallbackMethodDELETE ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod = "DELETE"
	ApiV2010AccountSipSipDomainVoiceStatusCallbackMethodGET    ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod = "GET"
	ApiV2010AccountSipSipDomainVoiceStatusCallbackMethodHEAD   ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod = "HEAD"
	ApiV2010AccountSipSipDomainVoiceStatusCallbackMethodPATCH  ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod = "PATCH"
	ApiV2010AccountSipSipDomainVoiceStatusCallbackMethodPOST   ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod = "POST"
	ApiV2010AccountSipSipDomainVoiceStatusCallbackMethodPUT    ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountTranscriptionStatus.
const (
	Completed  ApiV2010AccountTranscriptionStatus = "completed"
	Failed     ApiV2010AccountTranscriptionStatus = "failed"
	InProgress ApiV2010AccountTranscriptionStatus = "in-progress"
)

// Defines values for ApiV2010AccountUsageUsageRecordCategory.
const (
	ApiV2010AccountUsageUsageRecordCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordCategoryCalls                                             ApiV2010AccountUsageUsageRecordCategory = "calls"
	ApiV2010AccountUsageUsageRecordCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordCategoryConversations                                     ApiV2010AccountUsageUsageRecordCategory = "conversations"
	ApiV2010AccountUsageUsageRecordCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordCategoryCps                                               ApiV2010AccountUsageUsageRecordCategory = "cps"
	ApiV2010AccountUsageUsageRecordCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordCategoryLookups                                           ApiV2010AccountUsageUsageRecordCategory = "lookups"
	ApiV2010AccountUsageUsageRecordCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordCategoryMms                                               ApiV2010AccountUsageUsageRecordCategory = "mms"
	ApiV2010AccountUsageUsageRecordCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordCategoryNotify                                            ApiV2010AccountUsageUsageRecordCategory = "notify"
	ApiV2010AccountUsageUsageRecordCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordCategoryPchat                                             ApiV2010AccountUsageUsageRecordCategory = "pchat"
	ApiV2010AccountUsageUsageRecordCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordCategoryPfax                                              ApiV2010AccountUsageUsageRecordCategory = "pfax"
	ApiV2010AccountUsageUsageRecordCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordCategoryProxy                                             ApiV2010AccountUsageUsageRecordCategory = "proxy"
	ApiV2010AccountUsageUsageRecordCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordCategoryPv                                                ApiV2010AccountUsageUsageRecordCategory = "pv"
	ApiV2010AccountUsageUsageRecordCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordCategoryRecordings                                        ApiV2010AccountUsageUsageRecordCategory = "recordings"
	ApiV2010AccountUsageUsageRecordCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordCategorySms                                               ApiV2010AccountUsageUsageRecordCategory = "sms"
	ApiV2010AccountUsageUsageRecordCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordCategorySync                                              ApiV2010AccountUsageUsageRecordCategory = "sync"
	ApiV2010AccountUsageUsageRecordCategorySyncActions                                       ApiV2010AccountUsageUsageRecordCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordCategoryWireless                                          ApiV2010AccountUsageUsageRecordCategory = "wireless"
	ApiV2010AccountUsageUsageRecordCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordDailyCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordTodayCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory.
const (
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAgentConference                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "agent-conference"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "authy-authentications"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "call-progess-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCalleridlookups                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calleridlookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCalls                                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsClient                                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-client"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsInbound                                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsOutbound                                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsSip                                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-sip"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCallsTransfers                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "calls-transfers"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCarrierLookups                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryConversations                                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "conversations"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryConversationsEvents                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "conversations-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryConversationsParticipants                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "conversations-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryCps                                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "cps"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryFlexUsage                                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "flex-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryFraudLookups                                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRooms                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryImpV1Usage                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryLookups                                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplace                                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMediastorage                                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mediastorage"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMms                                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMonitorReads                                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "monitor-reads"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMonitorStorage                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "monitor-storage"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryMonitorWrites                                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "monitor-writes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryNotify                                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "notify"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryNotifyChannels                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "notify-channels"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPchat                                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pchat"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPchatUsers                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pchat-users"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPfax                                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pfax"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPfaxPages                                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pfax-pages"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPhonenumbers                                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "phonenumbers"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPremiumsupport                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "premiumsupport"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryProxy                                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "proxy"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPv                                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvRooms                                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryRecordings                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryRecordingstorage                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "recordingstorage"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryShortcodes                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "shortcodes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryShortcodesMps                                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryShortcodesUk                                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySms                                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsInbound                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-inbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsOutbound                                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-outbound"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySpeechRecognition                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "speech-recognition"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryStudioEngagements                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "studio-engagements"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySync                                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sync"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySyncActions                                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sync-actions"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTotalprice                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "totalprice"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTranscriptions                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "transcriptions"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingCps                                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-cps"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-origination"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-secure"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTrunkingTermination                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "trunking-termination"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVerifyPush                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "verify-push"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVerifyTotp                                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "verify-totp"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVideoRecordings                                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "video-recordings"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVoiceInsights                                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "voice-insights"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWireless                                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessOrders                                    ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-orders"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsage                                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory = "wireless-usage-voice"
)

// Defines values for ApiV2010AccountUsageUsageTriggerCallbackMethod.
const (
	DELETE ApiV2010AccountUsageUsageTriggerCallbackMethod = "DELETE"
	GET    ApiV2010AccountUsageUsageTriggerCallbackMethod = "GET"
	HEAD   ApiV2010AccountUsageUsageTriggerCallbackMethod = "HEAD"
	PATCH  ApiV2010AccountUsageUsageTriggerCallbackMethod = "PATCH"
	POST   ApiV2010AccountUsageUsageTriggerCallbackMethod = "POST"
	PUT    ApiV2010AccountUsageUsageTriggerCallbackMethod = "PUT"
)

// Defines values for ApiV2010AccountUsageUsageTriggerRecurring.
const (
	Alltime ApiV2010AccountUsageUsageTriggerRecurring = "alltime"
	Daily   ApiV2010AccountUsageUsageTriggerRecurring = "daily"
	Monthly ApiV2010AccountUsageUsageTriggerRecurring = "monthly"
	Yearly  ApiV2010AccountUsageUsageTriggerRecurring = "yearly"
)

// Defines values for ApiV2010AccountUsageUsageTriggerTriggerBy.
const (
	Count ApiV2010AccountUsageUsageTriggerTriggerBy = "count"
	Price ApiV2010AccountUsageUsageTriggerTriggerBy = "price"
	Usage ApiV2010AccountUsageUsageTriggerTriggerBy = "usage"
)

// Defines values for ApiV2010AccountUsageUsageTriggerUsageCategory.
const (
	ApiV2010AccountUsageUsageTriggerUsageCategoryA2pRegistrationFees                               ApiV2010AccountUsageUsageTriggerUsageCategory = "a2p-registration-fees"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAgentConference                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "agent-conference"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAnsweringMachineDetection                         ApiV2010AccountUsageUsageTriggerUsageCategory = "answering-machine-detection"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAuthyAuthentications                              ApiV2010AccountUsageUsageTriggerUsageCategory = "authy-authentications"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAuthyCallsOutbound                                ApiV2010AccountUsageUsageTriggerUsageCategory = "authy-calls-outbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAuthyMonthlyFees                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "authy-monthly-fees"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAuthyPhoneIntelligence                            ApiV2010AccountUsageUsageTriggerUsageCategory = "authy-phone-intelligence"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAuthyPhoneVerifications                           ApiV2010AccountUsageUsageTriggerUsageCategory = "authy-phone-verifications"
	ApiV2010AccountUsageUsageTriggerUsageCategoryAuthySmsOutbound                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "authy-sms-outbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallProgessEvents                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "call-progess-events"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCalleridlookups                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "calleridlookups"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCalls                                             ApiV2010AccountUsageUsageTriggerUsageCategory = "calls"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsClient                                       ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-client"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsGlobalconference                             ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-globalconference"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsInbound                                      ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-inbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsInboundLocal                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-inbound-local"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsInboundMobile                                ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-inbound-mobile"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsInboundTollfree                              ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-inbound-tollfree"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsOutbound                                     ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-outbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsPayVerbTransactions                          ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-pay-verb-transactions"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsRecordings                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-recordings"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsSip                                          ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-sip"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsSipInbound                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-sip-inbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsSipOutbound                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-sip-outbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCallsTransfers                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "calls-transfers"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCarrierLookups                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "carrier-lookups"
	ApiV2010AccountUsageUsageTriggerUsageCategoryConversations                                     ApiV2010AccountUsageUsageTriggerUsageCategory = "conversations"
	ApiV2010AccountUsageUsageTriggerUsageCategoryConversationsApiRequests                          ApiV2010AccountUsageUsageTriggerUsageCategory = "conversations-api-requests"
	ApiV2010AccountUsageUsageTriggerUsageCategoryConversationsConversationEvents                   ApiV2010AccountUsageUsageTriggerUsageCategory = "conversations-conversation-events"
	ApiV2010AccountUsageUsageTriggerUsageCategoryConversationsEndpointConnectivity                 ApiV2010AccountUsageUsageTriggerUsageCategory = "conversations-endpoint-connectivity"
	ApiV2010AccountUsageUsageTriggerUsageCategoryConversationsEvents                               ApiV2010AccountUsageUsageTriggerUsageCategory = "conversations-events"
	ApiV2010AccountUsageUsageTriggerUsageCategoryConversationsParticipantEvents                    ApiV2010AccountUsageUsageTriggerUsageCategory = "conversations-participant-events"
	ApiV2010AccountUsageUsageTriggerUsageCategoryConversationsParticipants                         ApiV2010AccountUsageUsageTriggerUsageCategory = "conversations-participants"
	ApiV2010AccountUsageUsageTriggerUsageCategoryCps                                               ApiV2010AccountUsageUsageTriggerUsageCategory = "cps"
	ApiV2010AccountUsageUsageTriggerUsageCategoryFlexUsage                                         ApiV2010AccountUsageUsageTriggerUsageCategory = "flex-usage"
	ApiV2010AccountUsageUsageTriggerUsageCategoryFraudLookups                                      ApiV2010AccountUsageUsageTriggerUsageCategory = "fraud-lookups"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRooms                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsDataTrack                               ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-data-track"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsEncryptedMediaRecorded                  ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-encrypted-media-recorded"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsMediaDownloaded                         ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-media-downloaded"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsMediaRecorded                           ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-media-recorded"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsMediaRouted                             ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-media-routed"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsMediaStored                             ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-media-stored"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsParticipantMinutes                      ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryGroupRoomsRecordedMinutes                         ApiV2010AccountUsageUsageTriggerUsageCategory = "group-rooms-recorded-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryImpV1Usage                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "imp-v1-usage"
	ApiV2010AccountUsageUsageTriggerUsageCategoryLookups                                           ApiV2010AccountUsageUsageTriggerUsageCategory = "lookups"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplace                                       ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceAlgorithmiaNamedEntityRecognition      ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-algorithmia-named-entity-recognition"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceCadenceTranscription                   ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-cadence-transcription"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceCadenceTranslation                     ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-cadence-translation"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceCapioSpeechToText                      ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-capio-speech-to-text"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceConvrizaAbaba                          ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-convriza-ababa"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceDeepgramPhraseDetector                 ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-deepgram-phrase-detector"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceDigitalSegmentBusinessInfo             ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-digital-segment-business-info"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceFacebookOfflineConversions             ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-facebook-offline-conversions"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceGoogleSpeechToText                     ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-google-speech-to-text"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceIbmWatsonMessageInsights               ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-ibm-watson-message-insights"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceIbmWatsonMessageSentiment              ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-ibm-watson-message-sentiment"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceIbmWatsonRecordingAnalysis             ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-ibm-watson-recording-analysis"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceIbmWatsonToneAnalyzer                  ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-ibm-watson-tone-analyzer"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceIcehookSystemsScout                    ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-icehook-systems-scout"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceInfogroupDataaxleBizinfo               ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-infogroup-dataaxle-bizinfo"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceKeenIoContactCenterAnalytics           ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-keen-io-contact-center-analytics"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceMarchexCleancall                       ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-marchex-cleancall"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceMarchexSentimentAnalysisForSms         ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-marchex-sentiment-analysis-for-sms"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceMarketplaceNextcallerSocialId          ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-marketplace-nextcaller-social-id"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceMobileCommonsOptOutClassifier          ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-mobile-commons-opt-out-classifier"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceNexiwaveVoicemailToText                ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-nexiwave-voicemail-to-text"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceNextcallerAdvancedCallerIdentification ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-nextcaller-advanced-caller-identification"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceNomoroboSpamScore                      ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-nomorobo-spam-score"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplacePayfoneTcpaCompliance                  ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-payfone-tcpa-compliance"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceRemeetingAutomaticSpeechRecognition    ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-remeeting-automatic-speech-recognition"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceTcpaDefenseSolutionsBlacklistFeed      ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-tcpa-defense-solutions-blacklist-feed"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceTeloOpencnam                           ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-telo-opencnam"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceTruecnamTrueSpam                       ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-truecnam-true-spam"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceTwilioCallerNameLookupUs               ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-twilio-caller-name-lookup-us"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceTwilioCarrierInformationLookup         ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-twilio-carrier-information-lookup"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceVoicebasePci                           ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-voicebase-pci"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceVoicebaseTranscription                 ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-voicebase-transcription"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceVoicebaseTranscriptionCustomVocabulary ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-voicebase-transcription-custom-vocabulary"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceWhitepagesProCallerIdentification      ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-whitepages-pro-caller-identification"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceWhitepagesProPhoneIntelligence         ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-whitepages-pro-phone-intelligence"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceWhitepagesProPhoneReputation           ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-whitepages-pro-phone-reputation"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceWolfarmSpokenResults                   ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-wolfarm-spoken-results"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceWolframShortAnswer                     ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-wolfram-short-answer"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMarketplaceYticaContactCenterReportingAnalytics   ApiV2010AccountUsageUsageTriggerUsageCategory = "marketplace-ytica-contact-center-reporting-analytics"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMediastorage                                      ApiV2010AccountUsageUsageTriggerUsageCategory = "mediastorage"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMms                                               ApiV2010AccountUsageUsageTriggerUsageCategory = "mms"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMmsInbound                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "mms-inbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMmsInboundLongcode                                ApiV2010AccountUsageUsageTriggerUsageCategory = "mms-inbound-longcode"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMmsInboundShortcode                               ApiV2010AccountUsageUsageTriggerUsageCategory = "mms-inbound-shortcode"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMmsMessagesCarrierfees                            ApiV2010AccountUsageUsageTriggerUsageCategory = "mms-messages-carrierfees"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMmsOutbound                                       ApiV2010AccountUsageUsageTriggerUsageCategory = "mms-outbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMmsOutboundLongcode                               ApiV2010AccountUsageUsageTriggerUsageCategory = "mms-outbound-longcode"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMmsOutboundShortcode                              ApiV2010AccountUsageUsageTriggerUsageCategory = "mms-outbound-shortcode"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMonitorReads                                      ApiV2010AccountUsageUsageTriggerUsageCategory = "monitor-reads"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMonitorStorage                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "monitor-storage"
	ApiV2010AccountUsageUsageTriggerUsageCategoryMonitorWrites                                     ApiV2010AccountUsageUsageTriggerUsageCategory = "monitor-writes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryNotify                                            ApiV2010AccountUsageUsageTriggerUsageCategory = "notify"
	ApiV2010AccountUsageUsageTriggerUsageCategoryNotifyActionsAttempts                             ApiV2010AccountUsageUsageTriggerUsageCategory = "notify-actions-attempts"
	ApiV2010AccountUsageUsageTriggerUsageCategoryNotifyChannels                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "notify-channels"
	ApiV2010AccountUsageUsageTriggerUsageCategoryNumberFormatLookups                               ApiV2010AccountUsageUsageTriggerUsageCategory = "number-format-lookups"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPchat                                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pchat"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPchatUsers                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "pchat-users"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPeerToPeerRoomsParticipantMinutes                 ApiV2010AccountUsageUsageTriggerUsageCategory = "peer-to-peer-rooms-participant-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPfax                                              ApiV2010AccountUsageUsageTriggerUsageCategory = "pfax"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPfaxMinutes                                       ApiV2010AccountUsageUsageTriggerUsageCategory = "pfax-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPfaxMinutesInbound                                ApiV2010AccountUsageUsageTriggerUsageCategory = "pfax-minutes-inbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPfaxMinutesOutbound                               ApiV2010AccountUsageUsageTriggerUsageCategory = "pfax-minutes-outbound"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPfaxPages                                         ApiV2010AccountUsageUsageTriggerUsageCategory = "pfax-pages"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPhonenumbers                                      ApiV2010AccountUsageUsageTriggerUsageCategory = "phonenumbers"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPhonenumbersCps                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "phonenumbers-cps"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPhonenumbersEmergency                             ApiV2010AccountUsageUsageTriggerUsageCategory = "phonenumbers-emergency"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPhonenumbersLocal                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "phonenumbers-local"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPhonenumbersMobile                                ApiV2010AccountUsageUsageTriggerUsageCategory = "phonenumbers-mobile"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPhonenumbersSetups                                ApiV2010AccountUsageUsageTriggerUsageCategory = "phonenumbers-setups"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPhonenumbersTollfree                              ApiV2010AccountUsageUsageTriggerUsageCategory = "phonenumbers-tollfree"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPremiumsupport                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "premiumsupport"
	ApiV2010AccountUsageUsageTriggerUsageCategoryProxy                                             ApiV2010AccountUsageUsageTriggerUsageCategory = "proxy"
	ApiV2010AccountUsageUsageTriggerUsageCategoryProxyActiveSessions                               ApiV2010AccountUsageUsageTriggerUsageCategory = "proxy-active-sessions"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPstnconnectivity                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "pstnconnectivity"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPv                                                ApiV2010AccountUsageUsageTriggerUsageCategory = "pv"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvCompositionMediaDownloaded                      ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-composition-media-downloaded"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvCompositionMediaEncrypted                       ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-composition-media-encrypted"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvCompositionMediaStored                          ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-composition-media-stored"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvCompositionMinutes                              ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-composition-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRecordingCompositions                           ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-recording-compositions"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipants                                ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipantsAu1                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants-au1"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipantsBr1                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants-br1"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipantsIe1                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants-ie1"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipantsJp1                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants-jp1"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipantsSg1                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants-sg1"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipantsUs1                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants-us1"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRoomParticipantsUs2                             ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-room-participants-us2"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvRooms                                           ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-rooms"
	ApiV2010AccountUsageUsageTriggerUsageCategoryPvSipEndpointRegistrations                        ApiV2010AccountUsageUsageTriggerUsageCategory = "pv-sip-endpoint-registrations"
	ApiV2010AccountUsageUsageTriggerUsageCategoryRecordings                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "recordings"
	ApiV2010AccountUsageUsageTriggerUsageCategoryRecordingstorage                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "recordingstorage"
	ApiV2010AccountUsageUsageTriggerUsageCategoryRoomsGroupBandwidth                               ApiV2010AccountUsageUsageTriggerUsageCategory = "rooms-group-bandwidth"
	ApiV2010AccountUsageUsageTriggerUsageCategoryRoomsGroupMinutes                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "rooms-group-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryRoomsPeerToPeerMinutes                            ApiV2010AccountUsageUsageTriggerUsageCategory = "rooms-peer-to-peer-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryShortcodes                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "shortcodes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryShortcodesCustomerowned                           ApiV2010AccountUsageUsageTriggerUsageCategory = "shortcodes-customerowned"
	ApiV2010AccountUsageUsageTriggerUsageCategoryShortcodesMmsEnablement                           ApiV2010AccountUsageUsageTriggerUsageCategory = "shortcodes-mms-enablement"
	ApiV2010AccountUsageUsageTriggerUsageCategoryShortcodesMps                                     ApiV2010AccountUsageUsageTriggerUsageCategory = "shortcodes-mps"
	ApiV2010AccountUsageUsageTriggerUsageCategoryShortcodesRandom                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "shortcodes-random"
	ApiV2010AccountUsageUsageTriggerUsageCategoryShortcodesUk                                      ApiV2010AccountUsageUsageTriggerUsageCategory = "shortcodes-uk"
	ApiV2010AccountUsageUsageTriggerUsageCategoryShortcodesVanity                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "shortcodes-vanity"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmallGroupRooms                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "small-group-rooms"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmallGroupRoomsDataTrack                          ApiV2010AccountUsageUsageTriggerUsageCategory = "small-group-rooms-data-track"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmallGroupRoomsParticipantMinutes                 ApiV2010AccountUsageUsageTriggerUsageCategory = "small-group-rooms-participant-minutes"
	ApiV2010AccountUsageUsageTriggerUsageCategorySms                                               ApiV2010AccountUsageUsageTriggerUsageCategory = "sms"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsInbound                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-inbound"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsInboundLongcode                                ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-inbound-longcode"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsInboundShortcode                               ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-inbound-shortcode"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsMessagesCarrierfees                            ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-messages-carrierfees"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsMessagesFeatures                               ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-messages-features"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsMessagesFeaturesSenderid                       ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-messages-features-senderid"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsOutbound                                       ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-outbound"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsOutboundContentInspection                      ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-outbound-content-inspection"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsOutboundLongcode                               ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-outbound-longcode"
	ApiV2010AccountUsageUsageTriggerUsageCategorySmsOutboundShortcode                              ApiV2010AccountUsageUsageTriggerUsageCategory = "sms-outbound-shortcode"
	ApiV2010AccountUsageUsageTriggerUsageCategorySpeechRecognition                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "speech-recognition"
	ApiV2010AccountUsageUsageTriggerUsageCategoryStudioEngagements                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "studio-engagements"
	ApiV2010AccountUsageUsageTriggerUsageCategorySync                                              ApiV2010AccountUsageUsageTriggerUsageCategory = "sync"
	ApiV2010AccountUsageUsageTriggerUsageCategorySyncActions                                       ApiV2010AccountUsageUsageTriggerUsageCategory = "sync-actions"
	ApiV2010AccountUsageUsageTriggerUsageCategorySyncEndpointHours                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "sync-endpoint-hours"
	ApiV2010AccountUsageUsageTriggerUsageCategorySyncEndpointHoursAboveDailyCap                    ApiV2010AccountUsageUsageTriggerUsageCategory = "sync-endpoint-hours-above-daily-cap"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTaskrouterTasks                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "taskrouter-tasks"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTotalprice                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "totalprice"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTranscriptions                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "transcriptions"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingCps                                       ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-cps"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingEmergencyCalls                            ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-emergency-calls"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingOrigination                               ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-origination"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingOriginationLocal                          ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-origination-local"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingOriginationMobile                         ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-origination-mobile"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingOriginationTollfree                       ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-origination-tollfree"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingRecordings                                ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-recordings"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingSecure                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-secure"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTrunkingTermination                               ApiV2010AccountUsageUsageTriggerUsageCategory = "trunking-termination"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytes                                     ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesAustralia                            ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-australia"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesBrasil                               ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-brasil"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesGermany                              ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-germany"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesIndia                                ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-india"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesIreland                              ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-ireland"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesJapan                                ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-japan"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesSingapore                            ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-singapore"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesUseast                               ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-useast"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTurnmegabytesUswest                               ApiV2010AccountUsageUsageTriggerUsageCategory = "turnmegabytes-uswest"
	ApiV2010AccountUsageUsageTriggerUsageCategoryTwilioInterconnect                                ApiV2010AccountUsageUsageTriggerUsageCategory = "twilio-interconnect"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVerifyPush                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "verify-push"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVerifyTotp                                        ApiV2010AccountUsageUsageTriggerUsageCategory = "verify-totp"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVerifyWhatsappConversationsBusinessInitiated      ApiV2010AccountUsageUsageTriggerUsageCategory = "verify-whatsapp-conversations-business-initiated"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVideoRecordings                                   ApiV2010AccountUsageUsageTriggerUsageCategory = "video-recordings"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVoiceInsights                                     ApiV2010AccountUsageUsageTriggerUsageCategory = "voice-insights"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVoiceInsightsClientInsightsOnDemandMinute         ApiV2010AccountUsageUsageTriggerUsageCategory = "voice-insights-client-insights-on-demand-minute"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVoiceInsightsPtsnInsightsOnDemandMinute           ApiV2010AccountUsageUsageTriggerUsageCategory = "voice-insights-ptsn-insights-on-demand-minute"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVoiceInsightsSipInterfaceInsightsOnDemandMinute   ApiV2010AccountUsageUsageTriggerUsageCategory = "voice-insights-sip-interface-insights-on-demand-minute"
	ApiV2010AccountUsageUsageTriggerUsageCategoryVoiceInsightsSipTrunkingInsightsOnDemandMinute    ApiV2010AccountUsageUsageTriggerUsageCategory = "voice-insights-sip-trunking-insights-on-demand-minute"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWireless                                          ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessOrders                                    ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-orders"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessOrdersArtwork                             ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-orders-artwork"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessOrdersBulk                                ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-orders-bulk"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessOrdersEsim                                ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-orders-esim"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessOrdersStarter                             ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-orders-starter"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsage                                     ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommands                             ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsAfrica                       ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-africa"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsAsia                         ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-asia"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsCentralandsouthamerica       ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-centralandsouthamerica"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsEurope                       ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-europe"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsHome                         ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-home"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsNorthamerica                 ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-northamerica"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsOceania                      ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-oceania"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageCommandsRoaming                      ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-commands-roaming"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageData                                 ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataAfrica                           ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-africa"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataAsia                             ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-asia"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataCentralandsouthamerica           ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-centralandsouthamerica"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataCustomAdditionalmb               ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-custom-additionalmb"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataCustomFirst5mb                   ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-custom-first5mb"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataDomesticRoaming                  ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-domestic-roaming"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataEurope                           ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-europe"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataIndividualAdditionalgb           ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-individual-additionalgb"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataIndividualFirstgb                ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-individual-firstgb"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataInternationalRoamingCanada       ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-international-roaming-canada"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataInternationalRoamingIndia        ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-international-roaming-india"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataInternationalRoamingMexico       ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-international-roaming-mexico"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataNorthamerica                     ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-northamerica"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataOceania                          ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-oceania"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataPooled                           ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-pooled"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataPooledDownlink                   ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-pooled-downlink"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageDataPooledUplink                     ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-data-pooled-uplink"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageMrc                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-mrc"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageMrcCustom                            ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-mrc-custom"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageMrcIndividual                        ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-mrc-individual"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageMrcPooled                            ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-mrc-pooled"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageMrcSuspended                         ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-mrc-suspended"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageSms                                  ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-sms"
	ApiV2010AccountUsageUsageTriggerUsageCategoryWirelessUsageVoice                                ApiV2010AccountUsageUsageTriggerUsageCategory = "wireless-usage-voice"
)

// ApiV2010Account defines model for api.v2010.account.
type ApiV2010Account struct {
	// The authorization token for this account
	AuthToken *string `json:"auth_token"`

	// The date this account was created
	DateCreated *string `json:"date_created"`

	// The date this account was last updated
	DateUpdated *string `json:"date_updated"`

	// A human readable description of this account
	FriendlyName *string `json:"friendly_name"`

	// The unique 34 character id representing the parent of this account
	OwnerAccountSid *string `json:"owner_account_sid"`

	// A 34 character string that uniquely identifies this resource.
	Sid *string `json:"sid"`

	// The status of this account
	Status *ApiV2010AccountStatus `json:"status"`

	// Account Instance Subresources
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The type of this account
	Type *ApiV2010AccountType `json:"type"`

	// The URI for this resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The status of this account
type ApiV2010AccountStatus string

// The type of this account
type ApiV2010AccountType string

// ApiV2010AccountAddress defines model for api.v2010.account.address.
type ApiV2010AccountAddress struct {
	// The SID of the Account that is responsible for the resource
	AccountSid *string `json:"account_sid"`

	// The city in which the address is located
	City *string `json:"city"`

	// The name associated with the address
	CustomerName *string `json:"customer_name"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// Whether emergency calling has been enabled on this number
	EmergencyEnabled *bool `json:"emergency_enabled"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of the address
	IsoCountry *string `json:"iso_country"`

	// The postal code of the address
	PostalCode *string `json:"postal_code"`

	// The state or region of the address
	Region *string `json:"region"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The number and street address of the address
	Street *string `json:"street"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// Whether the address has been validated to comply with local regulation
	Validated *bool `json:"validated"`

	// Whether the address has been verified to comply with regulation
	Verified *bool `json:"verified"`
}

// ApiV2010AccountAddressDependentPhoneNumber defines model for api.v2010.account.address.dependent_phone_number.
type ApiV2010AccountAddressDependentPhoneNumber struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether the phone number requires an Address registered with Twilio
	AddressRequirements *ApiV2010AccountAddressDependentPhoneNumberAddressRequirements `json:"address_requirements"`

	// The API version used to start a new TwiML session
	ApiVersion *string `json:"api_version"`

	// Indicate if a phone can receive calls or messages
	Capabilities *interface{} `json:"capabilities"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The emergency address configuration to use for emergency calling
	EmergencyAddressSid *string `json:"emergency_address_sid"`

	// Whether the phone number is enabled for emergency calling
	EmergencyStatus *ApiV2010AccountAddressDependentPhoneNumberEmergencyStatus `json:"emergency_status"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the application that handles SMS messages sent to the phone number
	SmsApplicationSid *string `json:"sms_application_sid"`

	// The HTTP method used with sms_fallback_url
	SmsFallbackMethod *ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod `json:"sms_fallback_method"`

	// The URL that we call when an error occurs while retrieving or executing the TwiML
	SmsFallbackUrl *string `json:"sms_fallback_url"`

	// The HTTP method to use with sms_url
	SmsMethod *ApiV2010AccountAddressDependentPhoneNumberSmsMethod `json:"sms_method"`

	// The URL we call when the phone number receives an incoming SMS message
	SmsUrl *string `json:"sms_url"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we use to call status_callback
	StatusCallbackMethod *ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod `json:"status_callback_method"`

	// The SID of the Trunk that handles calls to the phone number
	TrunkSid *string `json:"trunk_sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The SID of the application that handles calls to the phone number
	VoiceApplicationSid *string `json:"voice_application_sid"`

	// Whether to lookup the caller's name
	VoiceCallerIdLookup *bool `json:"voice_caller_id_lookup"`

	// The HTTP method used with voice_fallback_url
	VoiceFallbackMethod *ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod `json:"voice_fallback_method"`

	// The URL we call when an error occurs in TwiML
	VoiceFallbackUrl *string `json:"voice_fallback_url"`

	// The HTTP method used with the voice_url
	VoiceMethod *ApiV2010AccountAddressDependentPhoneNumberVoiceMethod `json:"voice_method"`

	// The URL we call when the phone number receives a call
	VoiceUrl *string `json:"voice_url"`
}

// Whether the phone number requires an Address registered with Twilio
type ApiV2010AccountAddressDependentPhoneNumberAddressRequirements string

// Whether the phone number is enabled for emergency calling
type ApiV2010AccountAddressDependentPhoneNumberEmergencyStatus string

// The HTTP method used with sms_fallback_url
type ApiV2010AccountAddressDependentPhoneNumberSmsFallbackMethod string

// The HTTP method to use with sms_url
type ApiV2010AccountAddressDependentPhoneNumberSmsMethod string

// The HTTP method we use to call status_callback
type ApiV2010AccountAddressDependentPhoneNumberStatusCallbackMethod string

// The HTTP method used with voice_fallback_url
type ApiV2010AccountAddressDependentPhoneNumberVoiceFallbackMethod string

// The HTTP method used with the voice_url
type ApiV2010AccountAddressDependentPhoneNumberVoiceMethod string

// ApiV2010AccountApplication defines model for api.v2010.account.application.
type ApiV2010AccountApplication struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to start a new TwiML session
	ApiVersion *string `json:"api_version"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The URL to send message status information to your application
	MessageStatusCallback *string `json:"message_status_callback"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The HTTP method used with sms_fallback_url
	SmsFallbackMethod *ApiV2010AccountApplicationSmsFallbackMethod `json:"sms_fallback_method"`

	// The URL that we call when an error occurs while retrieving or executing the TwiML
	SmsFallbackUrl *string `json:"sms_fallback_url"`

	// The HTTP method to use with sms_url
	SmsMethod *ApiV2010AccountApplicationSmsMethod `json:"sms_method"`

	// The URL to send status information to your application
	SmsStatusCallback *string `json:"sms_status_callback"`

	// The URL we call when the phone number receives an incoming SMS message
	SmsUrl *string `json:"sms_url"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we use to call status_callback
	StatusCallbackMethod *ApiV2010AccountApplicationStatusCallbackMethod `json:"status_callback_method"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// Whether to lookup the caller's name
	VoiceCallerIdLookup *bool `json:"voice_caller_id_lookup"`

	// The HTTP method used with voice_fallback_url
	VoiceFallbackMethod *ApiV2010AccountApplicationVoiceFallbackMethod `json:"voice_fallback_method"`

	// The URL we call when a TwiML error occurs
	VoiceFallbackUrl *string `json:"voice_fallback_url"`

	// The HTTP method used with the voice_url
	VoiceMethod *ApiV2010AccountApplicationVoiceMethod `json:"voice_method"`

	// The URL we call when the phone number receives a call
	VoiceUrl *string `json:"voice_url"`
}

// The HTTP method used with sms_fallback_url
type ApiV2010AccountApplicationSmsFallbackMethod string

// The HTTP method to use with sms_url
type ApiV2010AccountApplicationSmsMethod string

// The HTTP method we use to call status_callback
type ApiV2010AccountApplicationStatusCallbackMethod string

// The HTTP method used with voice_fallback_url
type ApiV2010AccountApplicationVoiceFallbackMethod string

// The HTTP method used with the voice_url
type ApiV2010AccountApplicationVoiceMethod string

// ApiV2010AccountAuthorizedConnectApp defines model for api.v2010.account.authorized_connect_app.
type ApiV2010AccountAuthorizedConnectApp struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The company name set for the Connect App
	ConnectAppCompanyName *string `json:"connect_app_company_name"`

	// A detailed description of the app
	ConnectAppDescription *string `json:"connect_app_description"`

	// The name of the Connect App
	ConnectAppFriendlyName *string `json:"connect_app_friendly_name"`

	// The public URL for the Connect App
	ConnectAppHomepageUrl *string `json:"connect_app_homepage_url"`

	// The SID that we assigned to the Connect App
	ConnectAppSid *string `json:"connect_app_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// Permissions authorized to the app
	Permissions *[]ApiV2010AccountAuthorizedConnectAppPermissions `json:"permissions"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountAuthorizedConnectAppPermissions defines model for ApiV2010AccountAuthorizedConnectApp.Permissions.
type ApiV2010AccountAuthorizedConnectAppPermissions string

// ApiV2010AccountAvailablePhoneNumberCountry defines model for api.v2010.account.available_phone_number_country.
type ApiV2010AccountAvailablePhoneNumberCountry struct {
	// Whether all phone numbers available in the country are new to the Twilio platform.
	Beta *bool `json:"beta"`

	// The name of the country
	Country *string `json:"country"`

	// The ISO-3166-1 country code of the country.
	CountryCode *string `json:"country_code"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the Country resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocal defines model for api.v2010.account.available_phone_number_country.available_phone_number_local.
type ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberLocal struct {
	// The type of Address resource the phone number requires
	AddressRequirements *string `json:"address_requirements"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// Whether a phone number can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// A formatted version of the phone number
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of this phone number
	IsoCountry *string `json:"iso_country"`

	// The LATA of this phone number
	Lata *string `json:"lata"`

	// The latitude of this phone number's location
	Latitude *string `json:"latitude"`

	// The locality or city of this phone number's location
	Locality *string `json:"locality"`

	// The longitude of this phone number's location
	Longitude *string `json:"longitude"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The postal or ZIP code of this phone number's location
	PostalCode *string `json:"postal_code"`

	// The rate center of this phone number
	RateCenter *string `json:"rate_center"`

	// The two-letter state or province abbreviation of this phone number's location
	Region *string `json:"region"`
}

// ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMachineToMachine defines model for api.v2010.account.available_phone_number_country.available_phone_number_machine_to_machine.
type ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMachineToMachine struct {
	// The type of Address resource the phone number requires
	AddressRequirements *string `json:"address_requirements"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// Whether a phone number can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// A formatted version of the phone number
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of this phone number
	IsoCountry *string `json:"iso_country"`

	// The LATA of this phone number
	Lata *string `json:"lata"`

	// The latitude of this phone number's location
	Latitude *string `json:"latitude"`

	// The locality or city of this phone number's location
	Locality *string `json:"locality"`

	// The longitude of this phone number's location
	Longitude *string `json:"longitude"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The postal or ZIP code of this phone number's location
	PostalCode *string `json:"postal_code"`

	// The rate center of this phone number
	RateCenter *string `json:"rate_center"`

	// The two-letter state or province abbreviation of this phone number's location
	Region *string `json:"region"`
}

// ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMobile defines model for api.v2010.account.available_phone_number_country.available_phone_number_mobile.
type ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberMobile struct {
	// The type of Address resource the phone number requires
	AddressRequirements *string `json:"address_requirements"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// Whether a phone number can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// A formatted version of the phone number
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of this phone number
	IsoCountry *string `json:"iso_country"`

	// The LATA of this phone number
	Lata *string `json:"lata"`

	// The latitude of this phone number's location
	Latitude *string `json:"latitude"`

	// The locality or city of this phone number's location
	Locality *string `json:"locality"`

	// The longitude of this phone number's location
	Longitude *string `json:"longitude"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The postal or ZIP code of this phone number's location
	PostalCode *string `json:"postal_code"`

	// The rate center of this phone number
	RateCenter *string `json:"rate_center"`

	// The two-letter state or province abbreviation of this phone number's location
	Region *string `json:"region"`
}

// ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberNational defines model for api.v2010.account.available_phone_number_country.available_phone_number_national.
type ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberNational struct {
	// The type of Address resource the phone number requires
	AddressRequirements *string `json:"address_requirements"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// Whether a phone number can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// A formatted version of the phone number
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of this phone number
	IsoCountry *string `json:"iso_country"`

	// The LATA of this phone number
	Lata *string `json:"lata"`

	// The latitude of this phone number's location
	Latitude *string `json:"latitude"`

	// The locality or city of this phone number's location
	Locality *string `json:"locality"`

	// The longitude of this phone number's location
	Longitude *string `json:"longitude"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The postal or ZIP code of this phone number's location
	PostalCode *string `json:"postal_code"`

	// The rate center of this phone number
	RateCenter *string `json:"rate_center"`

	// The two-letter state or province abbreviation of this phone number's location
	Region *string `json:"region"`
}

// ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost defines model for api.v2010.account.available_phone_number_country.available_phone_number_shared_cost.
type ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberSharedCost struct {
	// The type of Address resource the phone number requires
	AddressRequirements *string `json:"address_requirements"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// Whether a phone number can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// A formatted version of the phone number
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of this phone number
	IsoCountry *string `json:"iso_country"`

	// The LATA of this phone number
	Lata *string `json:"lata"`

	// The latitude of this phone number's location
	Latitude *string `json:"latitude"`

	// The locality or city of this phone number's location
	Locality *string `json:"locality"`

	// The longitude of this phone number's location
	Longitude *string `json:"longitude"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The postal or ZIP code of this phone number's location
	PostalCode *string `json:"postal_code"`

	// The rate center of this phone number
	RateCenter *string `json:"rate_center"`

	// The two-letter state or province abbreviation of this phone number's location
	Region *string `json:"region"`
}

// ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberTollFree defines model for api.v2010.account.available_phone_number_country.available_phone_number_toll_free.
type ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberTollFree struct {
	// The type of Address resource the phone number requires
	AddressRequirements *string `json:"address_requirements"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// Whether a phone number can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// A formatted version of the phone number
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of this phone number
	IsoCountry *string `json:"iso_country"`

	// The LATA of this phone number
	Lata *string `json:"lata"`

	// The latitude of this phone number's location
	Latitude *string `json:"latitude"`

	// The locality or city of this phone number's location
	Locality *string `json:"locality"`

	// The longitude of this phone number's location
	Longitude *string `json:"longitude"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The postal or ZIP code of this phone number's location
	PostalCode *string `json:"postal_code"`

	// The rate center of this phone number
	RateCenter *string `json:"rate_center"`

	// The two-letter state or province abbreviation of this phone number's location
	Region *string `json:"region"`
}

// ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberVoip defines model for api.v2010.account.available_phone_number_country.available_phone_number_voip.
type ApiV2010AccountAvailablePhoneNumberCountryAvailablePhoneNumberVoip struct {
	// The type of Address resource the phone number requires
	AddressRequirements *string `json:"address_requirements"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// Whether a phone number can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// A formatted version of the phone number
	FriendlyName *string `json:"friendly_name"`

	// The ISO country code of this phone number
	IsoCountry *string `json:"iso_country"`

	// The LATA of this phone number
	Lata *string `json:"lata"`

	// The latitude of this phone number's location
	Latitude *string `json:"latitude"`

	// The locality or city of this phone number's location
	Locality *string `json:"locality"`

	// The longitude of this phone number's location
	Longitude *string `json:"longitude"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The postal or ZIP code of this phone number's location
	PostalCode *string `json:"postal_code"`

	// The rate center of this phone number
	RateCenter *string `json:"rate_center"`

	// The two-letter state or province abbreviation of this phone number's location
	Region *string `json:"region"`
}

// ApiV2010AccountBalance defines model for api.v2010.account.balance.
type ApiV2010AccountBalance struct {
	// Account Sid.
	AccountSid *string `json:"account_sid"`

	// Account balance
	Balance *string `json:"balance"`

	// Currency units
	Currency *string `json:"currency"`
}

// ApiV2010AccountCall defines model for api.v2010.account.call.
type ApiV2010AccountCall struct {
	// The SID of the Account that created this resource
	AccountSid *string `json:"account_sid"`

	// Either `human` or `machine` if this call was initiated with answering machine detection. Empty otherwise.
	AnsweredBy *string `json:"answered_by"`

	// The API Version used to create the call
	ApiVersion *string `json:"api_version"`

	// The caller's name if this call was an incoming call to a phone number with caller ID Lookup enabled. Otherwise, empty.
	CallerName *string `json:"caller_name"`

	// The RFC 2822 date and time in GMT that this resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A string describing the direction of the call. `inbound` for inbound calls, `outbound-api` for calls initiated via the REST API or `outbound-dial` for calls initiated by a `Dial` verb.
	Direction *string `json:"direction"`

	// The length of the call in seconds.
	Duration *string `json:"duration"`

	// The end time of the call. Null if the call did not complete successfully.
	EndTime *string `json:"end_time"`

	// The forwarding phone number if this call was an incoming call forwarded from another number (depends on carrier supporting forwarding). Otherwise, empty.
	ForwardedFrom *string `json:"forwarded_from"`

	// The phone number, SIP address or Client identifier that made this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
	From *string `json:"from"`

	// The calling phone number, SIP address, or Client identifier formatted for display.
	FromFormatted *string `json:"from_formatted"`

	// The Group SID associated with this call. If no Group is associated with the call, the field is empty.
	GroupSid *string `json:"group_sid"`

	// The SID that identifies the call that created this leg.
	ParentCallSid *string `json:"parent_call_sid"`

	// If the call was inbound, this is the SID of the IncomingPhoneNumber resource that received the call. If the call was outbound, it is the SID of the OutgoingCallerId resource from which the call was placed.
	PhoneNumberSid *string `json:"phone_number_sid"`

	// The charge for this call, in the currency associated with the account. Populated after the call is completed. May not be immediately available.
	Price *string `json:"price"`

	// The currency in which `Price` is measured.
	PriceUnit *string `json:"price_unit"`

	// The wait time in milliseconds before the call is placed.
	QueueTime *string `json:"queue_time"`

	// The unique string that identifies this resource
	Sid *string `json:"sid"`

	// The start time of the call. Null if the call has not yet been dialed.
	StartTime *string `json:"start_time"`

	// The status of this call.
	Status *ApiV2010AccountCallStatus `json:"status"`

	// A list of related subresources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The phone number, SIP address or Client identifier that received this call. Phone numbers are in E.164 format (e.g., +16175551212). SIP addresses are formatted as `name@company.com`. Client identifiers are formatted `client:name`.
	To *string `json:"to"`

	// The phone number, SIP address or Client identifier that received this call. Formatted for display.
	ToFormatted *string `json:"to_formatted"`

	// The (optional) unique identifier of the trunk resource that was used for this call.
	TrunkSid *string `json:"trunk_sid"`

	// The URI of this resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The status of this call.
type ApiV2010AccountCallStatus string

// ApiV2010AccountCallCallEvent defines model for api.v2010.account.call.call_event.
type ApiV2010AccountCallCallEvent struct {
	// Call Request.
	Request *interface{} `json:"request"`

	// Call Response with Events.
	Response *interface{} `json:"response"`
}

// ApiV2010AccountCallCallFeedback defines model for api.v2010.account.call.call_feedback.
type ApiV2010AccountCallCallFeedback struct {
	// The unique sid that identifies this account
	AccountSid *string `json:"account_sid"`

	// The date this resource was created
	DateCreated *string `json:"date_created"`

	// The date this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// Issues experienced during the call
	Issues *[]ApiV2010AccountCallCallFeedbackIssues `json:"issues"`

	// 1 to 5 quality score
	QualityScore *int `json:"quality_score"`

	// A string that uniquely identifies this feedback resource
	Sid *string `json:"sid"`
}

// ApiV2010AccountCallCallFeedbackIssues defines model for ApiV2010AccountCallCallFeedback.Issues.
type ApiV2010AccountCallCallFeedbackIssues string

// ApiV2010AccountCallCallFeedbackSummary defines model for api.v2010.account.call.call_feedback_summary.
type ApiV2010AccountCallCallFeedbackSummary struct {
	// The unique sid that identifies this account
	AccountSid *string `json:"account_sid"`

	// The total number of calls
	CallCount *int `json:"call_count"`

	// The total number of calls with a feedback entry
	CallFeedbackCount *int `json:"call_feedback_count"`

	// The date this resource was created
	DateCreated *string `json:"date_created"`

	// The date this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The latest feedback entry date in the summary
	EndDate *openapi_types.Date `json:"end_date"`

	// Whether the feedback summary includes subaccounts
	IncludeSubaccounts *bool `json:"include_subaccounts"`

	// Issues experienced during the call
	Issues *[]interface{} `json:"issues"`

	// The average QualityScore of the feedback entries
	QualityScoreAverage *float32 `json:"quality_score_average"`

	// The median QualityScore of the feedback entries
	QualityScoreMedian *float32 `json:"quality_score_median"`

	// The standard deviation of the quality scores
	QualityScoreStandardDeviation *float32 `json:"quality_score_standard_deviation"`

	// A string that uniquely identifies this feedback entry
	Sid *string `json:"sid"`

	// The earliest feedback entry date in the summary
	StartDate *openapi_types.Date `json:"start_date"`

	// The status of the feedback summary
	Status *ApiV2010AccountCallCallFeedbackSummaryStatus `json:"status"`
}

// The status of the feedback summary
type ApiV2010AccountCallCallFeedbackSummaryStatus string

// ApiV2010AccountCallCallNotification defines model for api.v2010.account.call.call_notification.
type ApiV2010AccountCallCallNotification struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to create the Call Notification resource
	ApiVersion *string `json:"api_version"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A unique error code corresponding to the notification
	ErrorCode *string `json:"error_code"`

	// An integer log level
	Log *string `json:"log"`

	// The date the notification was generated
	MessageDate *string `json:"message_date"`

	// The text of the notification
	MessageText *string `json:"message_text"`

	// A URL for more information about the error code
	MoreInfo *string `json:"more_info"`

	// HTTP method used with the request url
	RequestMethod *ApiV2010AccountCallCallNotificationRequestMethod `json:"request_method"`

	// URL of the resource that generated the notification
	RequestUrl *string `json:"request_url"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// HTTP method used with the request url
type ApiV2010AccountCallCallNotificationRequestMethod string

// ApiV2010AccountCallCallNotificationInstance defines model for api.v2010.account.call.call_notification-instance.
type ApiV2010AccountCallCallNotificationInstance struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to create the Call Notification resource
	ApiVersion *string `json:"api_version"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A unique error code corresponding to the notification
	ErrorCode *string `json:"error_code"`

	// An integer log level
	Log *string `json:"log"`

	// The date the notification was generated
	MessageDate *string `json:"message_date"`

	// The text of the notification
	MessageText *string `json:"message_text"`

	// A URL for more information about the error code
	MoreInfo *string `json:"more_info"`

	// HTTP method used with the request url
	RequestMethod *ApiV2010AccountCallCallNotificationInstanceRequestMethod `json:"request_method"`

	// URL of the resource that generated the notification
	RequestUrl *string `json:"request_url"`

	// Twilio-generated HTTP variables sent to the server
	RequestVariables *string `json:"request_variables"`

	// The HTTP body returned by your server
	ResponseBody *string `json:"response_body"`

	// The HTTP headers returned by your server
	ResponseHeaders *string `json:"response_headers"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// HTTP method used with the request url
type ApiV2010AccountCallCallNotificationInstanceRequestMethod string

// ApiV2010AccountCallCallRecording defines model for api.v2010.account.call.call_recording.
type ApiV2010AccountCallCallRecording struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to make the recording
	ApiVersion *string `json:"api_version"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The number of channels in the final recording file
	Channels *int `json:"channels"`

	// The Conference SID that identifies the conference associated with the recording
	ConferenceSid *string `json:"conference_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The length of the recording in seconds
	Duration *string `json:"duration"`

	// How to decrypt the recording.
	EncryptionDetails *interface{} `json:"encryption_details"`

	// More information about why the recording is missing, if status is `absent`.
	ErrorCode *int `json:"error_code"`

	// The one-time cost of creating the recording.
	Price *float32 `json:"price"`

	// The currency used in the price property.
	PriceUnit *string `json:"price_unit"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// How the recording was created
	Source *ApiV2010AccountCallCallRecordingSource `json:"source"`

	// The start time of the recording, given in RFC 2822 format
	StartTime *string `json:"start_time"`

	// The status of the recording
	Status *ApiV2010AccountCallCallRecordingStatus `json:"status"`

	// The recorded track. Can be: `inbound`, `outbound`, or `both`.
	Track *string `json:"track"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// How the recording was created
type ApiV2010AccountCallCallRecordingSource string

// The status of the recording
type ApiV2010AccountCallCallRecordingStatus string

// ApiV2010AccountCallPayments defines model for api.v2010.account.call.payments.
type ApiV2010AccountCallPayments struct {
	// The SID of the Account that created the Payments resource.
	AccountSid *string `json:"account_sid"`

	// The SID of the Call the resource is associated with.
	CallSid *string `json:"call_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The SID of the Payments resource.
	Sid *string `json:"sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountCallSiprec defines model for api.v2010.account.call.siprec.
type ApiV2010AccountCallSiprec struct {
	// The SID of the Account that created this resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The RFC 2822 date and time in GMT that this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The name of this resource
	Name *string `json:"name"`

	// The SID of the Siprec resource.
	Sid *string `json:"sid"`

	// The status - one of `stopped`, `in-progress`
	Status *ApiV2010AccountCallSiprecStatus `json:"status"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The status - one of `stopped`, `in-progress`
type ApiV2010AccountCallSiprecStatus string

// ApiV2010AccountCallStream defines model for api.v2010.account.call.stream.
type ApiV2010AccountCallStream struct {
	// The SID of the Account that created this resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The RFC 2822 date and time in GMT that this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The name of this resource
	Name *string `json:"name"`

	// The SID of the Stream resource.
	Sid *string `json:"sid"`

	// The status - one of `stopped`, `in-progress`
	Status *ApiV2010AccountCallStreamStatus `json:"status"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The status - one of `stopped`, `in-progress`
type ApiV2010AccountCallStreamStatus string

// ApiV2010AccountConference defines model for api.v2010.account.conference.
type ApiV2010AccountConference struct {
	// The SID of the Account that created this resource
	AccountSid *string `json:"account_sid"`

	// The API version used to create this conference
	ApiVersion *string `json:"api_version"`

	// The call SID that caused the conference to end
	CallSidEndingConference *string `json:"call_sid_ending_conference"`

	// The RFC 2822 date and time in GMT that this resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A string that you assigned to describe this conference room
	FriendlyName *string `json:"friendly_name"`

	// The reason why a conference ended.
	ReasonConferenceEnded *ApiV2010AccountConferenceReasonConferenceEnded `json:"reason_conference_ended"`

	// A string that represents the Twilio Region where the conference was mixed
	Region *string `json:"region"`

	// The unique string that identifies this resource
	Sid *string `json:"sid"`

	// The status of this conference
	Status *ApiV2010AccountConferenceStatus `json:"status"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of this resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The reason why a conference ended.
type ApiV2010AccountConferenceReasonConferenceEnded string

// The status of this conference
type ApiV2010AccountConferenceStatus string

// ApiV2010AccountConferenceConferenceRecording defines model for api.v2010.account.conference.conference_recording.
type ApiV2010AccountConferenceConferenceRecording struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to create the recording
	ApiVersion *string `json:"api_version"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The number of channels in the final recording file as an integer
	Channels *int `json:"channels"`

	// The Conference SID that identifies the conference associated with the recording
	ConferenceSid *string `json:"conference_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The length of the recording in seconds
	Duration *string `json:"duration"`

	// How to decrypt the recording.
	EncryptionDetails *interface{} `json:"encryption_details"`

	// More information about why the recording is missing, if status is `absent`.
	ErrorCode *int `json:"error_code"`

	// The one-time cost of creating the recording.
	Price *string `json:"price"`

	// The currency used in the price property.
	PriceUnit *string `json:"price_unit"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// How the recording was created
	Source *ApiV2010AccountConferenceConferenceRecordingSource `json:"source"`

	// The start time of the recording, given in RFC 2822 format
	StartTime *string `json:"start_time"`

	// The status of the recording
	Status *ApiV2010AccountConferenceConferenceRecordingStatus `json:"status"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// How the recording was created
type ApiV2010AccountConferenceConferenceRecordingSource string

// The status of the recording
type ApiV2010AccountConferenceConferenceRecordingStatus string

// ApiV2010AccountConferenceParticipant defines model for api.v2010.account.conference.participant.
type ApiV2010AccountConferenceParticipant struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The SID of the participant who is being `coached`
	CallSidToCoach *string `json:"call_sid_to_coach"`

	// Indicates if the participant changed to coach
	Coaching *bool `json:"coaching"`

	// The SID of the conference the participant is in
	ConferenceSid *string `json:"conference_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// Whether the conference ends when the participant leaves
	EndConferenceOnExit *bool `json:"end_conference_on_exit"`

	// Whether the participant is on hold
	Hold *bool `json:"hold"`

	// The label of this participant
	Label *string `json:"label"`

	// Whether the participant is muted
	Muted *bool `json:"muted"`

	// Whether the conference starts when the participant joins the conference
	StartConferenceOnEnter *bool `json:"start_conference_on_enter"`

	// The status of the participant's call in a session
	Status *ApiV2010AccountConferenceParticipantStatus `json:"status"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The status of the participant's call in a session
type ApiV2010AccountConferenceParticipantStatus string

// ApiV2010AccountConnectApp defines model for api.v2010.account.connect_app.
type ApiV2010AccountConnectApp struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The URL to redirect the user to after authorization
	AuthorizeRedirectUrl *string `json:"authorize_redirect_url"`

	// The company name set for the Connect App
	CompanyName *string `json:"company_name"`

	// The HTTP method we use to call deauthorize_callback_url
	DeauthorizeCallbackMethod *ApiV2010AccountConnectAppDeauthorizeCallbackMethod `json:"deauthorize_callback_method"`

	// The URL we call to de-authorize the Connect App
	DeauthorizeCallbackUrl *string `json:"deauthorize_callback_url"`

	// The description of the Connect App
	Description *string `json:"description"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The URL users can obtain more information
	HomepageUrl *string `json:"homepage_url"`

	// The set of permissions that your ConnectApp requests
	Permissions *[]ApiV2010AccountConnectAppPermissions `json:"permissions"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The HTTP method we use to call deauthorize_callback_url
type ApiV2010AccountConnectAppDeauthorizeCallbackMethod string

// ApiV2010AccountConnectAppPermissions defines model for ApiV2010AccountConnectApp.Permissions.
type ApiV2010AccountConnectAppPermissions string

// ApiV2010AccountIncomingPhoneNumber defines model for api.v2010.account.incoming_phone_number.
type ApiV2010AccountIncomingPhoneNumber struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether the phone number requires an Address registered with Twilio.
	AddressRequirements *ApiV2010AccountIncomingPhoneNumberAddressRequirements `json:"address_requirements"`

	// The SID of the Address resource associated with the phone number
	AddressSid *string `json:"address_sid"`

	// The API version used to start a new TwiML session
	ApiVersion *string `json:"api_version"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// The SID of the Bundle resource associated with number
	BundleSid *string `json:"bundle_sid"`

	// Indicate if a phone can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The emergency address configuration to use for emergency calling
	EmergencyAddressSid *string `json:"emergency_address_sid"`

	// State of the emergency address configuration for the phone number
	EmergencyAddressStatus *ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus `json:"emergency_address_status"`

	// Displays if emergency calling is enabled for this number.
	EmergencyStatus *ApiV2010AccountIncomingPhoneNumberEmergencyStatus `json:"emergency_status"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The SID of the Identity resource associated with number
	IdentitySid *string `json:"identity_sid"`

	// The phone number's origin. Can be twilio or hosted.
	Origin *string `json:"origin"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the application that handles SMS messages sent to the phone number
	SmsApplicationSid *string `json:"sms_application_sid"`

	// The HTTP method used with sms_fallback_url
	SmsFallbackMethod *ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod `json:"sms_fallback_method"`

	// The URL that we call when an error occurs while retrieving or executing the TwiML
	SmsFallbackUrl *string `json:"sms_fallback_url"`

	// The HTTP method to use with sms_url
	SmsMethod *ApiV2010AccountIncomingPhoneNumberSmsMethod `json:"sms_method"`

	// The URL we call when the phone number receives an incoming SMS message
	SmsUrl *string `json:"sms_url"`
	Status *string `json:"status"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we use to call status_callback
	StatusCallbackMethod *ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod `json:"status_callback_method"`

	// The SID of the Trunk that handles calls to the phone number
	TrunkSid *string `json:"trunk_sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The SID of the application that handles calls to the phone number
	VoiceApplicationSid *string `json:"voice_application_sid"`

	// Whether to lookup the caller's name
	VoiceCallerIdLookup *bool `json:"voice_caller_id_lookup"`

	// The HTTP method used with voice_fallback_url
	VoiceFallbackMethod *ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod `json:"voice_fallback_method"`

	// The URL we call when an error occurs in TwiML
	VoiceFallbackUrl *string `json:"voice_fallback_url"`

	// The HTTP method used with the voice_url
	VoiceMethod      *ApiV2010AccountIncomingPhoneNumberVoiceMethod      `json:"voice_method"`
	VoiceReceiveMode *ApiV2010AccountIncomingPhoneNumberVoiceReceiveMode `json:"voice_receive_mode"`

	// The URL we call when the phone number receives a call
	VoiceUrl *string `json:"voice_url"`
}

// Whether the phone number requires an Address registered with Twilio.
type ApiV2010AccountIncomingPhoneNumberAddressRequirements string

// State of the emergency address configuration for the phone number
type ApiV2010AccountIncomingPhoneNumberEmergencyAddressStatus string

// Displays if emergency calling is enabled for this number.
type ApiV2010AccountIncomingPhoneNumberEmergencyStatus string

// The HTTP method used with sms_fallback_url
type ApiV2010AccountIncomingPhoneNumberSmsFallbackMethod string

// The HTTP method to use with sms_url
type ApiV2010AccountIncomingPhoneNumberSmsMethod string

// The HTTP method we use to call status_callback
type ApiV2010AccountIncomingPhoneNumberStatusCallbackMethod string

// The HTTP method used with voice_fallback_url
type ApiV2010AccountIncomingPhoneNumberVoiceFallbackMethod string

// The HTTP method used with the voice_url
type ApiV2010AccountIncomingPhoneNumberVoiceMethod string

// ApiV2010AccountIncomingPhoneNumberVoiceReceiveMode defines model for ApiV2010AccountIncomingPhoneNumber.VoiceReceiveMode.
type ApiV2010AccountIncomingPhoneNumberVoiceReceiveMode string

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn defines model for api.v2010.account.incoming_phone_number.incoming_phone_number_assigned_add_on.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOn struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// A JSON string that represents the current configuration
	Configuration *interface{} `json:"configuration"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A short description of the Add-on functionality
	Description *string `json:"description"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The SID of the Phone Number that installed this Add-on
	ResourceSid *string `json:"resource_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// An application-defined string that uniquely identifies the resource
	UniqueName *string `json:"unique_name"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension defines model for api.v2010.account.incoming_phone_number.incoming_phone_number_assigned_add_on.incoming_phone_number_assigned_add_on_extension.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberAssignedAddOnIncomingPhoneNumberAssignedAddOnExtension struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID that uniquely identifies the assigned Add-on installation
	AssignedAddOnSid *string `json:"assigned_add_on_sid"`

	// Whether the Extension will be invoked
	Enabled *bool `json:"enabled"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// A string that you assigned to describe the Product this Extension is used within
	ProductName *string `json:"product_name"`

	// The SID of the Phone Number to which the Add-on is assigned
	ResourceSid *string `json:"resource_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// An application-defined string that uniquely identifies the resource
	UniqueName *string `json:"unique_name"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal defines model for api.v2010.account.incoming_phone_number.incoming_phone_number_local.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether the phone number requires an Address registered with Twilio.
	AddressRequirements *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirements `json:"address_requirements"`

	// The SID of the Address resource associated with the phone number
	AddressSid *string `json:"address_sid"`

	// The API version used to start a new TwiML session
	ApiVersion *string `json:"api_version"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// The SID of the Bundle resource associated with number
	BundleSid *string `json:"bundle_sid"`

	// Indicate if a phone can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The emergency address configuration to use for emergency calling
	EmergencyAddressSid *string `json:"emergency_address_sid"`

	// State of the emergency address configuration for the phone number
	EmergencyAddressStatus *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus `json:"emergency_address_status"`

	// Displays if emergency calling is enabled for this number.
	EmergencyStatus *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyStatus `json:"emergency_status"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The SID of the Identity resource associated with number
	IdentitySid *string `json:"identity_sid"`

	// The phone number's origin. Can be twilio or hosted.
	Origin *string `json:"origin"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the Application resource to handle SMS messages
	SmsApplicationSid *string `json:"sms_application_sid"`

	// The HTTP method used with sms_fallback_url
	SmsFallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod `json:"sms_fallback_method"`

	// The URL that we call when an error occurs while retrieving or executing the TwiML
	SmsFallbackUrl *string `json:"sms_fallback_url"`

	// The HTTP method to use with sms_url
	SmsMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod `json:"sms_method"`

	// The URL we call when the phone number receives an incoming SMS message
	SmsUrl *string `json:"sms_url"`
	Status *string `json:"status"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we use to call status_callback
	StatusCallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod `json:"status_callback_method"`

	// The SID of the Trunk that handles calls to the phone number
	TrunkSid *string `json:"trunk_sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The SID of the application that handles calls to the phone number
	VoiceApplicationSid *string `json:"voice_application_sid"`

	// Whether to lookup the caller's name
	VoiceCallerIdLookup *bool `json:"voice_caller_id_lookup"`

	// The HTTP method used with voice_fallback_url
	VoiceFallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod `json:"voice_fallback_method"`

	// The URL we call when an error occurs in TwiML
	VoiceFallbackUrl *string `json:"voice_fallback_url"`

	// The HTTP method used with the voice_url
	VoiceMethod      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod      `json:"voice_method"`
	VoiceReceiveMode *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveMode `json:"voice_receive_mode"`

	// The URL we call when this phone number receives a call
	VoiceUrl *string `json:"voice_url"`
}

// Whether the phone number requires an Address registered with Twilio.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalAddressRequirements string

// State of the emergency address configuration for the phone number
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyAddressStatus string

// Displays if emergency calling is enabled for this number.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalEmergencyStatus string

// The HTTP method used with sms_fallback_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsFallbackMethod string

// The HTTP method to use with sms_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalSmsMethod string

// The HTTP method we use to call status_callback
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalStatusCallbackMethod string

// The HTTP method used with voice_fallback_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceFallbackMethod string

// The HTTP method used with the voice_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceMethod string

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveMode defines model for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocal.VoiceReceiveMode.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberLocalVoiceReceiveMode string

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile defines model for api.v2010.account.incoming_phone_number.incoming_phone_number_mobile.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether the phone number requires an Address registered with Twilio.
	AddressRequirements *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirements `json:"address_requirements"`

	// The SID of the Address resource associated with the phone number
	AddressSid *string `json:"address_sid"`

	// The API version used to start a new TwiML session
	ApiVersion *string `json:"api_version"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// The SID of the Bundle resource associated with number
	BundleSid *string `json:"bundle_sid"`

	// Indicate if a phone can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The emergency address configuration to use for emergency calling
	EmergencyAddressSid *string `json:"emergency_address_sid"`

	// State of the emergency address configuration for the phone number
	EmergencyAddressStatus *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus `json:"emergency_address_status"`

	// Displays if emergency calling is enabled for this number.
	EmergencyStatus *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyStatus `json:"emergency_status"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The SID of the Identity resource associated with number
	IdentitySid *string `json:"identity_sid"`

	// The phone number's origin. Can be twilio or hosted.
	Origin *string `json:"origin"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the application that handles SMS messages sent to the phone number
	SmsApplicationSid *string `json:"sms_application_sid"`

	// The HTTP method used with sms_fallback_url
	SmsFallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod `json:"sms_fallback_method"`

	// The URL that we call when an error occurs while retrieving or executing the TwiML
	SmsFallbackUrl *string `json:"sms_fallback_url"`

	// The HTTP method to use with sms_url
	SmsMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod `json:"sms_method"`

	// The URL we call when the phone number receives an incoming SMS message
	SmsUrl *string `json:"sms_url"`
	Status *string `json:"status"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we use to call status_callback
	StatusCallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod `json:"status_callback_method"`

	// The SID of the Trunk that handles calls to the phone number
	TrunkSid *string `json:"trunk_sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The SID of the application that handles calls to the phone number
	VoiceApplicationSid *string `json:"voice_application_sid"`

	// Whether to lookup the caller's name
	VoiceCallerIdLookup *bool `json:"voice_caller_id_lookup"`

	// The HTTP method used with voice_fallback_url
	VoiceFallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod `json:"voice_fallback_method"`

	// The URL we call when an error occurs in TwiML
	VoiceFallbackUrl *string `json:"voice_fallback_url"`

	// The HTTP method used with the voice_url
	VoiceMethod      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod      `json:"voice_method"`
	VoiceReceiveMode *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveMode `json:"voice_receive_mode"`

	// The URL we call when the phone number receives a call
	VoiceUrl *string `json:"voice_url"`
}

// Whether the phone number requires an Address registered with Twilio.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileAddressRequirements string

// State of the emergency address configuration for the phone number
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyAddressStatus string

// Displays if emergency calling is enabled for this number.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileEmergencyStatus string

// The HTTP method used with sms_fallback_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsFallbackMethod string

// The HTTP method to use with sms_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileSmsMethod string

// The HTTP method we use to call status_callback
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileStatusCallbackMethod string

// The HTTP method used with voice_fallback_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceFallbackMethod string

// The HTTP method used with the voice_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceMethod string

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveMode defines model for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobile.VoiceReceiveMode.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberMobileVoiceReceiveMode string

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree defines model for api.v2010.account.incoming_phone_number.incoming_phone_number_toll_free.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// Whether the phone number requires an Address registered with Twilio.
	AddressRequirements *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeAddressRequirements `json:"address_requirements"`

	// The SID of the Address resource associated with the phone number
	AddressSid *string `json:"address_sid"`

	// The API version used to start a new TwiML session
	ApiVersion *string `json:"api_version"`

	// Whether the phone number is new to the Twilio platform
	Beta *bool `json:"beta"`

	// The SID of the Bundle resource associated with number
	BundleSid *string `json:"bundle_sid"`

	// Indicate if a phone can receive calls or messages
	Capabilities *struct {
		Fax   *bool `json:"fax,omitempty"`
		Mms   *bool `json:"mms,omitempty"`
		Sms   *bool `json:"sms,omitempty"`
		Voice *bool `json:"voice,omitempty"`
	} `json:"capabilities"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The emergency address configuration to use for emergency calling
	EmergencyAddressSid *string `json:"emergency_address_sid"`

	// State of the emergency address configuration for the phone number
	EmergencyAddressStatus *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus `json:"emergency_address_status"`

	// Displays if emergency calling is enabled for this number.
	EmergencyStatus *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyStatus `json:"emergency_status"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The SID of the Identity resource associated with number
	IdentitySid *string `json:"identity_sid"`

	// The phone number's origin. Can be twilio or hosted.
	Origin *string `json:"origin"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The SID of the application that handles SMS messages sent to the phone number
	SmsApplicationSid *string `json:"sms_application_sid"`

	// The HTTP method used with sms_fallback_url
	SmsFallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod `json:"sms_fallback_method"`

	// The URL that we call when an error occurs while retrieving or executing the TwiML
	SmsFallbackUrl *string `json:"sms_fallback_url"`

	// The HTTP method to use with sms_url
	SmsMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod `json:"sms_method"`

	// The URL we call when the phone number receives an incoming SMS message
	SmsUrl *string `json:"sms_url"`
	Status *string `json:"status"`

	// The URL to send status information to your application
	StatusCallback *string `json:"status_callback"`

	// The HTTP method we use to call status_callback
	StatusCallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod `json:"status_callback_method"`

	// The SID of the Trunk that handles calls to the phone number
	TrunkSid *string `json:"trunk_sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The SID of the application that handles calls to the phone number
	VoiceApplicationSid *string `json:"voice_application_sid"`

	// Whether to lookup the caller's name
	VoiceCallerIdLookup *bool `json:"voice_caller_id_lookup"`

	// The HTTP method used with voice_fallback_url
	VoiceFallbackMethod *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod `json:"voice_fallback_method"`

	// The URL we call when an error occurs in TwiML
	VoiceFallbackUrl *string `json:"voice_fallback_url"`

	// The HTTP method used with the voice_url
	VoiceMethod      *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod      `json:"voice_method"`
	VoiceReceiveMode *ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveMode `json:"voice_receive_mode"`

	// The URL we call when the phone number receives a call
	VoiceUrl *string `json:"voice_url"`
}

// Whether the phone number requires an Address registered with Twilio.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeAddressRequirements string

// State of the emergency address configuration for the phone number
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyAddressStatus string

// Displays if emergency calling is enabled for this number.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeEmergencyStatus string

// The HTTP method used with sms_fallback_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsFallbackMethod string

// The HTTP method to use with sms_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeSmsMethod string

// The HTTP method we use to call status_callback
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeStatusCallbackMethod string

// The HTTP method used with voice_fallback_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceFallbackMethod string

// The HTTP method used with the voice_url
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceMethod string

// ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveMode defines model for ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFree.VoiceReceiveMode.
type ApiV2010AccountIncomingPhoneNumberIncomingPhoneNumberTollFreeVoiceReceiveMode string

// ApiV2010AccountKey defines model for api.v2010.account.key.
type ApiV2010AccountKey struct {
	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`
}

// ApiV2010AccountMessage defines model for api.v2010.account.message.
type ApiV2010AccountMessage struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to process the message
	ApiVersion *string `json:"api_version"`

	// The message text
	Body *string `json:"body"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT when the message was sent
	DateSent *string `json:"date_sent"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The direction of the message
	Direction *ApiV2010AccountMessageDirection `json:"direction"`

	// The error code associated with the message
	ErrorCode *int `json:"error_code"`

	// The description of the error_code
	ErrorMessage *string `json:"error_message"`

	// The phone number that initiated the message
	From *string `json:"from"`

	// The SID of the Messaging Service used with the message.
	MessagingServiceSid *string `json:"messaging_service_sid"`

	// The number of media files associated with the message
	NumMedia *string `json:"num_media"`

	// The number of messages used to deliver the message body
	NumSegments *string `json:"num_segments"`

	// The amount billed for the message
	Price *string `json:"price"`

	// The currency in which price is measured
	PriceUnit *string `json:"price_unit"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the message
	Status *ApiV2010AccountMessageStatus `json:"status"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The phone number that received the message
	To *string `json:"to"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The direction of the message
type ApiV2010AccountMessageDirection string

// The status of the message
type ApiV2010AccountMessageStatus string

// ApiV2010AccountMessageMedia defines model for api.v2010.account.message.media.
type ApiV2010AccountMessageMedia struct {
	// The SID of the Account that created this resource
	AccountSid *string `json:"account_sid"`

	// The default mime-type of the media
	ContentType *string `json:"content_type"`

	// The RFC 2822 date and time in GMT that this resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The SID of the resource that created the media
	ParentSid *string `json:"parent_sid"`

	// The unique string that identifies this resource
	Sid *string `json:"sid"`

	// The URI of this resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountMessageMessageFeedback defines model for api.v2010.account.message.message_feedback.
type ApiV2010AccountMessageMessageFeedback struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The SID of the Message resource for which the feedback was provided
	MessageSid *string `json:"message_sid"`

	// Whether the feedback has arrived
	Outcome *ApiV2010AccountMessageMessageFeedbackOutcome `json:"outcome"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// Whether the feedback has arrived
type ApiV2010AccountMessageMessageFeedbackOutcome string

// ApiV2010AccountNewKey defines model for api.v2010.account.new_key.
type ApiV2010AccountNewKey struct {
	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The secret your application uses to sign Access Tokens and to authenticate to the REST API.
	Secret *string `json:"secret"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`
}

// ApiV2010AccountNewSigningKey defines model for api.v2010.account.new_signing_key.
type ApiV2010AccountNewSigningKey struct {
	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The secret your application uses to sign Access Tokens and to authenticate to the REST API.
	Secret *string `json:"secret"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`
}

// ApiV2010AccountNotification defines model for api.v2010.account.notification.
type ApiV2010AccountNotification struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to generate the notification
	ApiVersion *string `json:"api_version"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A unique error code corresponding to the notification
	ErrorCode *string `json:"error_code"`

	// An integer log level
	Log *string `json:"log"`

	// The date the notification was generated
	MessageDate *string `json:"message_date"`

	// The text of the notification
	MessageText *string `json:"message_text"`

	// A URL for more information about the error code
	MoreInfo *string `json:"more_info"`

	// HTTP method used with the request url
	RequestMethod *ApiV2010AccountNotificationRequestMethod `json:"request_method"`

	// URL of the resource that generated the notification
	RequestUrl *string `json:"request_url"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// HTTP method used with the request url
type ApiV2010AccountNotificationRequestMethod string

// ApiV2010AccountNotificationInstance defines model for api.v2010.account.notification-instance.
type ApiV2010AccountNotificationInstance struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to generate the notification
	ApiVersion *string `json:"api_version"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A unique error code corresponding to the notification
	ErrorCode *string `json:"error_code"`

	// An integer log level
	Log *string `json:"log"`

	// The date the notification was generated
	MessageDate *string `json:"message_date"`

	// The text of the notification
	MessageText *string `json:"message_text"`

	// A URL for more information about the error code
	MoreInfo *string `json:"more_info"`

	// HTTP method used with the request url
	RequestMethod *ApiV2010AccountNotificationInstanceRequestMethod `json:"request_method"`

	// URL of the resource that generated the notification
	RequestUrl *string `json:"request_url"`

	// Twilio-generated HTTP variables sent to the server
	RequestVariables *string `json:"request_variables"`

	// The HTTP body returned by your server
	ResponseBody *string `json:"response_body"`

	// The HTTP headers returned by your server
	ResponseHeaders *string `json:"response_headers"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// HTTP method used with the request url
type ApiV2010AccountNotificationInstanceRequestMethod string

// ApiV2010AccountOutgoingCallerId defines model for api.v2010.account.outgoing_caller_id.
type ApiV2010AccountOutgoingCallerId struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The phone number in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountQueue defines model for api.v2010.account.queue.
type ApiV2010AccountQueue struct {
	// The SID of the Account that created this resource
	AccountSid *string `json:"account_sid"`

	// Average wait time of members in the queue
	AverageWaitTime *int `json:"average_wait_time"`

	// The number of calls currently in the queue.
	CurrentSize *int `json:"current_size"`

	// The RFC 2822 date and time in GMT that this resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A string that you assigned to describe this resource
	FriendlyName *string `json:"friendly_name"`

	// The max number of calls allowed in the queue
	MaxSize *int `json:"max_size"`

	// The unique string that identifies this resource
	Sid *string `json:"sid"`

	// The URI of this resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// ApiV2010AccountQueueMember defines model for api.v2010.account.queue.member.
type ApiV2010AccountQueueMember struct {
	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The date the member was enqueued
	DateEnqueued *string `json:"date_enqueued"`

	// This member's current position in the queue.
	Position *int `json:"position"`

	// The SID of the Queue the member is in
	QueueSid *string `json:"queue_sid"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The number of seconds the member has been in the queue.
	WaitTime *int `json:"wait_time"`
}

// ApiV2010AccountRecording defines model for api.v2010.account.recording.
type ApiV2010AccountRecording struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used during the recording.
	ApiVersion *string `json:"api_version"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The number of channels in the final recording file as an integer.
	Channels *int `json:"channels"`

	// The unique ID for the conference associated with the recording.
	ConferenceSid *string `json:"conference_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The length of the recording in seconds.
	Duration *string `json:"duration"`

	// How to decrypt the recording.
	EncryptionDetails *interface{} `json:"encryption_details"`

	// More information about why the recording is missing, if status is `absent`.
	ErrorCode *int `json:"error_code"`

	// The URL of the media file.
	MediaUrl *string `json:"media_url"`

	// The one-time cost of creating the recording.
	Price *string `json:"price"`

	// The currency used in the price property.
	PriceUnit *string `json:"price_unit"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// How the recording was created
	Source *ApiV2010AccountRecordingSource `json:"source"`

	// The start time of the recording, given in RFC 2822 format
	StartTime *string `json:"start_time"`

	// The status of the recording.
	Status *ApiV2010AccountRecordingStatus `json:"status"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// How the recording was created
type ApiV2010AccountRecordingSource string

// The status of the recording.
type ApiV2010AccountRecordingStatus string

// ApiV2010AccountRecordingRecordingAddOnResult defines model for api.v2010.account.recording.recording_add_on_result.
type ApiV2010AccountRecordingRecordingAddOnResult struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Add-on configuration
	AddOnConfigurationSid *string `json:"add_on_configuration_sid"`

	// The SID of the Add-on to which the result belongs
	AddOnSid *string `json:"add_on_sid"`

	// The date and time in GMT that the result was completed
	DateCompleted *string `json:"date_completed"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The SID of the recording to which the AddOnResult resource belongs
	ReferenceSid *string `json:"reference_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the result
	Status *ApiV2010AccountRecordingRecordingAddOnResultStatus `json:"status"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`
}

// The status of the result
type ApiV2010AccountRecordingRecordingAddOnResultStatus string

// ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload defines model for api.v2010.account.recording.recording_add_on_result.recording_add_on_result_payload.
type ApiV2010AccountRecordingRecordingAddOnResultRecordingAddOnResultPayload struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Add-on configuration
	AddOnConfigurationSid *string `json:"add_on_configuration_sid"`

	// The SID of the AddOnResult to which the payload belongs
	AddOnResultSid *string `json:"add_on_result_sid"`

	// The SID of the Add-on to which the result belongs
	AddOnSid *string `json:"add_on_sid"`

	// The MIME type of the payload
	ContentType *string `json:"content_type"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that describes the payload
	Label *string `json:"label"`

	// The SID of the recording to which the AddOnResult resource that contains the payload belongs
	ReferenceSid *string `json:"reference_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`
}

// ApiV2010AccountRecordingRecordingTranscription defines model for api.v2010.account.recording.recording_transcription.
type ApiV2010AccountRecordingRecordingTranscription struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to create the transcription
	ApiVersion *string `json:"api_version"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The duration of the transcribed audio in seconds.
	Duration *string `json:"duration"`

	// The charge for the transcription
	Price *float32 `json:"price"`

	// The currency in which price is measured
	PriceUnit *string `json:"price_unit"`

	// The SID that identifies the transcription's recording
	RecordingSid *string `json:"recording_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the transcription
	Status *ApiV2010AccountRecordingRecordingTranscriptionStatus `json:"status"`

	// The text content of the transcription.
	TranscriptionText *string `json:"transcription_text"`

	// The transcription type
	Type *string `json:"type"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The status of the transcription
type ApiV2010AccountRecordingRecordingTranscriptionStatus string

// ApiV2010AccountShortCode defines model for api.v2010.account.short_code.
type ApiV2010AccountShortCode struct {
	// The SID of the Account that created this resource
	AccountSid *string `json:"account_sid"`

	// The API version used to start a new TwiML session
	ApiVersion *string `json:"api_version"`

	// The RFC 2822 date and time in GMT that this resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A string that you assigned to describe this resource
	FriendlyName *string `json:"friendly_name"`

	// The short code. e.g., 894546.
	ShortCode *string `json:"short_code"`

	// The unique string that identifies this resource
	Sid *string `json:"sid"`

	// HTTP method we use to call the sms_fallback_url
	SmsFallbackMethod *ApiV2010AccountShortCodeSmsFallbackMethod `json:"sms_fallback_method"`

	// URL Twilio will request if an error occurs in executing TwiML
	SmsFallbackUrl *string `json:"sms_fallback_url"`

	// HTTP method to use when requesting the sms url
	SmsMethod *ApiV2010AccountShortCodeSmsMethod `json:"sms_method"`

	// URL we call when receiving an incoming SMS message to this short code
	SmsUrl *string `json:"sms_url"`

	// The URI of this resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// HTTP method we use to call the sms_fallback_url
type ApiV2010AccountShortCodeSmsFallbackMethod string

// HTTP method to use when requesting the sms url
type ApiV2010AccountShortCodeSmsMethod string

// ApiV2010AccountSigningKey defines model for api.v2010.account.signing_key.
type ApiV2010AccountSigningKey struct {
	DateCreated  *string `json:"date_created"`
	DateUpdated  *string `json:"date_updated"`
	FriendlyName *string `json:"friendly_name"`
	Sid          *string `json:"sid"`
}

// ApiV2010AccountSipSipCredentialList defines model for api.v2010.account.sip.sip_credential_list.
type ApiV2010AccountSipSipCredentialList struct {
	// The unique sid that identifies this account
	AccountSid *string `json:"account_sid"`

	// The date this resource was created
	DateCreated *string `json:"date_created"`

	// The date this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// Human readable descriptive text
	FriendlyName *string `json:"friendly_name"`

	// A string that uniquely identifies this credential
	Sid *string `json:"sid"`

	// The list of credentials associated with this credential list.
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI for this resource
	Uri *string `json:"uri"`
}

// ApiV2010AccountSipSipCredentialListSipCredential defines model for api.v2010.account.sip.sip_credential_list.sip_credential.
type ApiV2010AccountSipSipCredentialListSipCredential struct {
	// The unique id of the Account that is responsible for this resource.
	AccountSid *string `json:"account_sid"`

	// The unique id that identifies the credential list that includes this credential
	CredentialListSid *string `json:"credential_list_sid"`

	// The date that this resource was created, given as GMT in RFC 2822 format.
	DateCreated *string `json:"date_created"`

	// The date that this resource was last updated, given as GMT in RFC 2822 format.
	DateUpdated *string `json:"date_updated"`

	// A 34 character string that uniquely identifies this resource.
	Sid *string `json:"sid"`

	// The URI for this resource, relative to https://api.twilio.com
	Uri *string `json:"uri"`

	// The username for this credential.
	Username *string `json:"username"`
}

// ApiV2010AccountSipSipDomain defines model for api.v2010.account.sip.sip_domain.
type ApiV2010AccountSipSipDomain struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to process the call
	ApiVersion *string `json:"api_version"`

	// The types of authentication mapped to the domain
	AuthType *string `json:"auth_type"`

	// The SID of the BYOC Trunk resource.
	ByocTrunkSid *string `json:"byoc_trunk_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The unique address on Twilio to route SIP traffic
	DomainName *string `json:"domain_name"`

	// Whether an emergency caller sid is configured for the domain.
	EmergencyCallerSid *string `json:"emergency_caller_sid"`

	// Whether emergency calling is enabled for the domain.
	EmergencyCallingEnabled *bool `json:"emergency_calling_enabled"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// Whether secure SIP is enabled for the domain
	Secure *bool `json:"secure"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// Whether SIP registration is allowed
	SipRegistration *bool `json:"sip_registration"`

	// A list mapping resources associated with the SIP Domain resource
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The HTTP method used with voice_fallback_url
	VoiceFallbackMethod *ApiV2010AccountSipSipDomainVoiceFallbackMethod `json:"voice_fallback_method"`

	// The URL we call when an error occurs while executing TwiML
	VoiceFallbackUrl *string `json:"voice_fallback_url"`

	// The HTTP method to use with voice_url
	VoiceMethod *ApiV2010AccountSipSipDomainVoiceMethod `json:"voice_method"`

	// The HTTP method we use to call voice_status_callback_url
	VoiceStatusCallbackMethod *ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod `json:"voice_status_callback_method"`

	// The URL that we call with status updates
	VoiceStatusCallbackUrl *string `json:"voice_status_callback_url"`

	// The URL we call when receiving a call
	VoiceUrl *string `json:"voice_url"`
}

// The HTTP method used with voice_fallback_url
type ApiV2010AccountSipSipDomainVoiceFallbackMethod string

// The HTTP method to use with voice_url
type ApiV2010AccountSipSipDomainVoiceMethod string

// The HTTP method we use to call voice_status_callback_url
type ApiV2010AccountSipSipDomainVoiceStatusCallbackMethod string

// ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping defines model for api.v2010.account.sip.sip_domain.sip_auth.sip_auth_calls.sip_auth_calls_credential_list_mapping.
type ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsCredentialListMapping struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`
}

// ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping defines model for api.v2010.account.sip.sip_domain.sip_auth.sip_auth_calls.sip_auth_calls_ip_access_control_list_mapping.
type ApiV2010AccountSipSipDomainSipAuthSipAuthCallsSipAuthCallsIpAccessControlListMapping struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`
}

// ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping defines model for api.v2010.account.sip.sip_domain.sip_auth.sip_auth_registrations.sip_auth_registrations_credential_list_mapping.
type ApiV2010AccountSipSipDomainSipAuthSipAuthRegistrationsSipAuthRegistrationsCredentialListMapping struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`
}

// ApiV2010AccountSipSipDomainSipCredentialListMapping defines model for api.v2010.account.sip.sip_domain.sip_credential_list_mapping.
type ApiV2010AccountSipSipDomainSipCredentialListMapping struct {
	// The unique id of the Account that is responsible for this resource.
	AccountSid *string `json:"account_sid"`

	// The date that this resource was created, given as GMT in RFC 2822 format.
	DateCreated *string `json:"date_created"`

	// The date that this resource was last updated, given as GMT in RFC 2822 format.
	DateUpdated *string `json:"date_updated"`

	// The unique string that identifies the SipDomain resource.
	DomainSid *string `json:"domain_sid"`

	// A human readable descriptive text for this resource, up to 64 characters long.
	FriendlyName *string `json:"friendly_name"`

	// A 34 character string that uniquely identifies this resource.
	Sid *string `json:"sid"`

	// The URI for this resource, relative to https://api.twilio.com
	Uri *string `json:"uri"`
}

// ApiV2010AccountSipSipDomainSipIpAccessControlListMapping defines model for api.v2010.account.sip.sip_domain.sip_ip_access_control_list_mapping.
type ApiV2010AccountSipSipDomainSipIpAccessControlListMapping struct {
	// The unique id of the Account that is responsible for this resource.
	AccountSid *string `json:"account_sid"`

	// The date that this resource was created, given as GMT in RFC 2822 format.
	DateCreated *string `json:"date_created"`

	// The date that this resource was last updated, given as GMT in RFC 2822 format.
	DateUpdated *string `json:"date_updated"`

	// The unique string that identifies the SipDomain resource.
	DomainSid *string `json:"domain_sid"`

	// A human readable descriptive text for this resource, up to 64 characters long.
	FriendlyName *string `json:"friendly_name"`

	// A 34 character string that uniquely identifies this resource.
	Sid *string `json:"sid"`

	// The URI for this resource, relative to https://api.twilio.com
	Uri *string `json:"uri"`
}

// ApiV2010AccountSipSipIpAccessControlList defines model for api.v2010.account.sip.sip_ip_access_control_list.
type ApiV2010AccountSipSipIpAccessControlList struct {
	// The unique sid that identifies this account
	AccountSid *string `json:"account_sid"`

	// The date this resource was created
	DateCreated *string `json:"date_created"`

	// The date this resource was last updated
	DateUpdated *string `json:"date_updated"`

	// A human readable description of this resource
	FriendlyName *string `json:"friendly_name"`

	// A string that uniquely identifies this resource
	Sid *string `json:"sid"`

	// The IP addresses associated with this resource.
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI for this resource
	Uri *string `json:"uri"`
}

// ApiV2010AccountSipSipIpAccessControlListSipIpAddress defines model for api.v2010.account.sip.sip_ip_access_control_list.sip_ip_address.
type ApiV2010AccountSipSipIpAccessControlListSipIpAddress struct {
	// The unique id of the Account that is responsible for this resource.
	AccountSid *string `json:"account_sid"`

	// An integer representing the length of the CIDR prefix to use with this IP address when accepting traffic. By default the entire IP address is used.
	CidrPrefixLength *int `json:"cidr_prefix_length"`

	// The date that this resource was created, given as GMT in RFC 2822 format.
	DateCreated *string `json:"date_created"`

	// The date that this resource was last updated, given as GMT in RFC 2822 format.
	DateUpdated *string `json:"date_updated"`

	// A human readable descriptive text for this resource, up to 64 characters long.
	FriendlyName *string `json:"friendly_name"`

	// The unique id of the IpAccessControlList resource that includes this resource.
	IpAccessControlListSid *string `json:"ip_access_control_list_sid"`

	// An IP address in dotted decimal notation from which you want to accept traffic. Any SIP requests from this IP address will be allowed by Twilio. IPv4 only supported today.
	IpAddress *string `json:"ip_address"`

	// A 34 character string that uniquely identifies this resource.
	Sid *string `json:"sid"`

	// The URI for this resource, relative to https://api.twilio.com
	Uri *string `json:"uri"`
}

// ApiV2010AccountToken defines model for api.v2010.account.token.
type ApiV2010AccountToken struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// An array representing the ephemeral credentials
	IceServers *[]struct {
		Credential *string `json:"credential,omitempty"`
		Url        *string `json:"url,omitempty"`
		Urls       *string `json:"urls,omitempty"`
		Username   *string `json:"username,omitempty"`
	} `json:"ice_servers"`

	// The temporary password used for authenticating
	Password *string `json:"password"`

	// The duration in seconds the credentials are valid
	Ttl *string `json:"ttl"`

	// The temporary username that uniquely identifies a Token
	Username *string `json:"username"`
}

// ApiV2010AccountTranscription defines model for api.v2010.account.transcription.
type ApiV2010AccountTranscription struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The API version used to create the transcription
	ApiVersion *string `json:"api_version"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The duration of the transcribed audio in seconds.
	Duration *string `json:"duration"`

	// The charge for the transcription
	Price *float32 `json:"price"`

	// The currency in which price is measured
	PriceUnit *string `json:"price_unit"`

	// The SID that identifies the transcription's recording
	RecordingSid *string `json:"recording_sid"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The status of the transcription
	Status *ApiV2010AccountTranscriptionStatus `json:"status"`

	// The text content of the transcription.
	TranscriptionText *string `json:"transcription_text"`

	// The transcription type
	Type *string `json:"type"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`
}

// The status of the transcription
type ApiV2010AccountTranscriptionStatus string

// ApiV2010AccountUsageUsageRecord defines model for api.v2010.account.usage.usage_record.
type ApiV2010AccountUsageUsageRecord struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordAllTime defines model for api.v2010.account.usage.usage_record.usage_record_all_time.
type ApiV2010AccountUsageUsageRecordUsageRecordAllTime struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordAllTimeCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordDaily defines model for api.v2010.account.usage.usage_record.usage_record_daily.
type ApiV2010AccountUsageUsageRecordUsageRecordDaily struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordDailyCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordLastMonth defines model for api.v2010.account.usage.usage_record.usage_record_last_month.
type ApiV2010AccountUsageUsageRecordUsageRecordLastMonth struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordLastMonthCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordMonthly defines model for api.v2010.account.usage.usage_record.usage_record_monthly.
type ApiV2010AccountUsageUsageRecordUsageRecordMonthly struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordMonthlyCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordThisMonth defines model for api.v2010.account.usage.usage_record.usage_record_this_month.
type ApiV2010AccountUsageUsageRecordUsageRecordThisMonth struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordThisMonthCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordToday defines model for api.v2010.account.usage.usage_record.usage_record_today.
type ApiV2010AccountUsageUsageRecordUsageRecordToday struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordTodayCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordYearly defines model for api.v2010.account.usage.usage_record.usage_record_yearly.
type ApiV2010AccountUsageUsageRecordUsageRecordYearly struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordYearlyCategory string

// ApiV2010AccountUsageUsageRecordUsageRecordYesterday defines model for api.v2010.account.usage.usage_record.usage_record_yesterday.
type ApiV2010AccountUsageUsageRecordUsageRecordYesterday struct {
	// The SID of the Account accrued the usage
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// Usage records up to date as of this timestamp
	AsOf *string `json:"as_of"`

	// The category of usage
	Category *ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory `json:"category"`

	// The number of usage events
	Count *string `json:"count"`

	// The units in which count is measured
	CountUnit *string `json:"count_unit"`

	// A plain-language description of the usage category
	Description *string `json:"description"`

	// The last date for which usage is included in the UsageRecord
	EndDate *openapi_types.Date `json:"end_date"`

	// The total price of the usage
	Price *float32 `json:"price"`

	// The currency in which `price` is measured
	PriceUnit *string `json:"price_unit"`

	// The first date for which usage is included in this UsageRecord
	StartDate *openapi_types.Date `json:"start_date"`

	// A list of related resources identified by their relative URIs
	SubresourceUris *map[string]interface{} `json:"subresource_uris"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The amount of usage
	Usage *string `json:"usage"`

	// The units in which usage is measured
	UsageUnit *string `json:"usage_unit"`
}

// The category of usage
type ApiV2010AccountUsageUsageRecordUsageRecordYesterdayCategory string

// ApiV2010AccountUsageUsageTrigger defines model for api.v2010.account.usage.usage_trigger.
type ApiV2010AccountUsageUsageTrigger struct {
	// The SID of the Account that this trigger monitors
	AccountSid *string `json:"account_sid"`

	// The API version used to create the resource
	ApiVersion *string `json:"api_version"`

	// The HTTP method we use to call callback_url
	CallbackMethod *ApiV2010AccountUsageUsageTriggerCallbackMethod `json:"callback_method"`

	// he URL we call when the trigger fires
	CallbackUrl *string `json:"callback_url"`

	// The current value of the field the trigger is watching
	CurrentValue *string `json:"current_value"`

	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated *string `json:"date_created"`

	// The RFC 2822 date and time in GMT that the trigger was last fired
	DateFired *string `json:"date_fired"`

	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated *string `json:"date_updated"`

	// The string that you assigned to describe the trigger
	FriendlyName *string `json:"friendly_name"`

	// The frequency of a recurring UsageTrigger
	Recurring *ApiV2010AccountUsageUsageTriggerRecurring `json:"recurring"`

	// The unique string that identifies the resource
	Sid *string `json:"sid"`

	// The field in the UsageRecord resource that fires the trigger
	TriggerBy *ApiV2010AccountUsageUsageTriggerTriggerBy `json:"trigger_by"`

	// The value at which the trigger will fire
	TriggerValue *string `json:"trigger_value"`

	// The URI of the resource, relative to `https://api.twilio.com`
	Uri *string `json:"uri"`

	// The usage category the trigger watches
	UsageCategory *ApiV2010AccountUsageUsageTriggerUsageCategory `json:"usage_category"`

	// The URI of the UsageRecord resource this trigger watches
	UsageRecordUri *string `json:"usage_record_uri"`
}

// The HTTP method we use to call callback_url
type ApiV2010AccountUsageUsageTriggerCallbackMethod string

// The frequency of a recurring UsageTrigger
type ApiV2010AccountUsageUsageTriggerRecurring string

// The field in the UsageRecord resource that fires the trigger
type ApiV2010AccountUsageUsageTriggerTriggerBy string

// The usage category the trigger watches
type ApiV2010AccountUsageUsageTriggerUsageCategory string

// ApiV2010AccountValidationRequest defines model for api.v2010.account.validation_request.
type ApiV2010AccountValidationRequest struct {
	// The SID of the Account that created the resource
	AccountSid *string `json:"account_sid"`

	// The SID of the Call the resource is associated with
	CallSid *string `json:"call_sid"`

	// The string that you assigned to describe the resource
	FriendlyName *string `json:"friendly_name"`

	// The phone number to verify in E.164 format
	PhoneNumber *string `json:"phone_number"`

	// The 6 digit validation code that someone must enter to validate the Caller ID  when `phone_number` is called
	ValidationCode *string `json:"validation_code"`
}

// ListAccountParams defines parameters for ListAccount.
type ListAccountParams struct {
	// Only return the Account resources with friendly names that exactly match this name.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// Only return Account resources with the given status. Can be `closed`, `suspended` or `active`.
	Status *ListAccountParamsStatus `form:"Status,omitempty" json:"Status,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAccountParamsStatus defines parameters for ListAccount.
type ListAccountParamsStatus string

// ListAddressParams defines parameters for ListAddress.
type ListAddressParams struct {
	// The `customer_name` of the Address resources to read.
	CustomerName *string `form:"CustomerName,omitempty" json:"CustomerName,omitempty"`

	// The string that identifies the Address resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// The ISO country code of the Address resources to read.
	IsoCountry *string `form:"IsoCountry,omitempty" json:"IsoCountry,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListDependentPhoneNumberParams defines parameters for ListDependentPhoneNumber.
type ListDependentPhoneNumberParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListApplicationParams defines parameters for ListApplication.
type ListApplicationParams struct {
	// The string that identifies the Application resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAuthorizedConnectAppParams defines parameters for ListAuthorizedConnectApp.
type ListAuthorizedConnectAppParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberCountryParams defines parameters for ListAvailablePhoneNumberCountry.
type ListAvailablePhoneNumberCountryParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberLocalParams defines parameters for ListAvailablePhoneNumberLocal.
type ListAvailablePhoneNumberLocalParams struct {
	// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
	AreaCode *int `form:"AreaCode,omitempty" json:"AreaCode,omitempty"`

	// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-number-pattern) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumberlocal-resource?code-sample=code-find-phone-numbers-by-character-pattern). If specified, this value must have at least two characters.
	Contains *string `form:"Contains,omitempty" json:"Contains,omitempty"`

	// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
	SmsEnabled *bool `form:"SmsEnabled,omitempty" json:"SmsEnabled,omitempty"`

	// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
	MmsEnabled *bool `form:"MmsEnabled,omitempty" json:"MmsEnabled,omitempty"`

	// Whether the phone numbers can receive calls. Can be: `true` or `false`.
	VoiceEnabled *bool `form:"VoiceEnabled,omitempty" json:"VoiceEnabled,omitempty"`

	// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeAllAddressRequired *bool `form:"ExcludeAllAddressRequired,omitempty" json:"ExcludeAllAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeLocalAddressRequired *bool `form:"ExcludeLocalAddressRequired,omitempty" json:"ExcludeLocalAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeForeignAddressRequired *bool `form:"ExcludeForeignAddressRequired,omitempty" json:"ExcludeForeignAddressRequired,omitempty"`

	// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
	NearNumber *string `form:"NearNumber,omitempty" json:"NearNumber,omitempty"`

	// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
	NearLatLong *string `form:"NearLatLong,omitempty" json:"NearLatLong,omitempty"`

	// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
	Distance *int `form:"Distance,omitempty" json:"Distance,omitempty"`

	// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
	InPostalCode *string `form:"InPostalCode,omitempty" json:"InPostalCode,omitempty"`

	// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
	InRegion *string `form:"InRegion,omitempty" json:"InRegion,omitempty"`

	// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
	InRateCenter *string `form:"InRateCenter,omitempty" json:"InRateCenter,omitempty"`

	// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
	InLata *string `form:"InLata,omitempty" json:"InLata,omitempty"`

	// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
	InLocality *string `form:"InLocality,omitempty" json:"InLocality,omitempty"`

	// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
	FaxEnabled *bool `form:"FaxEnabled,omitempty" json:"FaxEnabled,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberMachineToMachineParams defines parameters for ListAvailablePhoneNumberMachineToMachine.
type ListAvailablePhoneNumberMachineToMachineParams struct {
	// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
	AreaCode *int `form:"AreaCode,omitempty" json:"AreaCode,omitempty"`

	// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
	Contains *string `form:"Contains,omitempty" json:"Contains,omitempty"`

	// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
	SmsEnabled *bool `form:"SmsEnabled,omitempty" json:"SmsEnabled,omitempty"`

	// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
	MmsEnabled *bool `form:"MmsEnabled,omitempty" json:"MmsEnabled,omitempty"`

	// Whether the phone numbers can receive calls. Can be: `true` or `false`.
	VoiceEnabled *bool `form:"VoiceEnabled,omitempty" json:"VoiceEnabled,omitempty"`

	// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeAllAddressRequired *bool `form:"ExcludeAllAddressRequired,omitempty" json:"ExcludeAllAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeLocalAddressRequired *bool `form:"ExcludeLocalAddressRequired,omitempty" json:"ExcludeLocalAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeForeignAddressRequired *bool `form:"ExcludeForeignAddressRequired,omitempty" json:"ExcludeForeignAddressRequired,omitempty"`

	// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
	NearNumber *string `form:"NearNumber,omitempty" json:"NearNumber,omitempty"`

	// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
	NearLatLong *string `form:"NearLatLong,omitempty" json:"NearLatLong,omitempty"`

	// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
	Distance *int `form:"Distance,omitempty" json:"Distance,omitempty"`

	// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
	InPostalCode *string `form:"InPostalCode,omitempty" json:"InPostalCode,omitempty"`

	// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
	InRegion *string `form:"InRegion,omitempty" json:"InRegion,omitempty"`

	// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
	InRateCenter *string `form:"InRateCenter,omitempty" json:"InRateCenter,omitempty"`

	// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
	InLata *string `form:"InLata,omitempty" json:"InLata,omitempty"`

	// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
	InLocality *string `form:"InLocality,omitempty" json:"InLocality,omitempty"`

	// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
	FaxEnabled *bool `form:"FaxEnabled,omitempty" json:"FaxEnabled,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberMobileParams defines parameters for ListAvailablePhoneNumberMobile.
type ListAvailablePhoneNumberMobileParams struct {
	// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
	AreaCode *int `form:"AreaCode,omitempty" json:"AreaCode,omitempty"`

	// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
	Contains *string `form:"Contains,omitempty" json:"Contains,omitempty"`

	// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
	SmsEnabled *bool `form:"SmsEnabled,omitempty" json:"SmsEnabled,omitempty"`

	// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
	MmsEnabled *bool `form:"MmsEnabled,omitempty" json:"MmsEnabled,omitempty"`

	// Whether the phone numbers can receive calls. Can be: `true` or `false`.
	VoiceEnabled *bool `form:"VoiceEnabled,omitempty" json:"VoiceEnabled,omitempty"`

	// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeAllAddressRequired *bool `form:"ExcludeAllAddressRequired,omitempty" json:"ExcludeAllAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeLocalAddressRequired *bool `form:"ExcludeLocalAddressRequired,omitempty" json:"ExcludeLocalAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeForeignAddressRequired *bool `form:"ExcludeForeignAddressRequired,omitempty" json:"ExcludeForeignAddressRequired,omitempty"`

	// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
	NearNumber *string `form:"NearNumber,omitempty" json:"NearNumber,omitempty"`

	// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
	NearLatLong *string `form:"NearLatLong,omitempty" json:"NearLatLong,omitempty"`

	// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
	Distance *int `form:"Distance,omitempty" json:"Distance,omitempty"`

	// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
	InPostalCode *string `form:"InPostalCode,omitempty" json:"InPostalCode,omitempty"`

	// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
	InRegion *string `form:"InRegion,omitempty" json:"InRegion,omitempty"`

	// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
	InRateCenter *string `form:"InRateCenter,omitempty" json:"InRateCenter,omitempty"`

	// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
	InLata *string `form:"InLata,omitempty" json:"InLata,omitempty"`

	// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
	InLocality *string `form:"InLocality,omitempty" json:"InLocality,omitempty"`

	// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
	FaxEnabled *bool `form:"FaxEnabled,omitempty" json:"FaxEnabled,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberNationalParams defines parameters for ListAvailablePhoneNumberNational.
type ListAvailablePhoneNumberNationalParams struct {
	// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
	AreaCode *int `form:"AreaCode,omitempty" json:"AreaCode,omitempty"`

	// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
	Contains *string `form:"Contains,omitempty" json:"Contains,omitempty"`

	// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
	SmsEnabled *bool `form:"SmsEnabled,omitempty" json:"SmsEnabled,omitempty"`

	// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
	MmsEnabled *bool `form:"MmsEnabled,omitempty" json:"MmsEnabled,omitempty"`

	// Whether the phone numbers can receive calls. Can be: `true` or `false`.
	VoiceEnabled *bool `form:"VoiceEnabled,omitempty" json:"VoiceEnabled,omitempty"`

	// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeAllAddressRequired *bool `form:"ExcludeAllAddressRequired,omitempty" json:"ExcludeAllAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeLocalAddressRequired *bool `form:"ExcludeLocalAddressRequired,omitempty" json:"ExcludeLocalAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeForeignAddressRequired *bool `form:"ExcludeForeignAddressRequired,omitempty" json:"ExcludeForeignAddressRequired,omitempty"`

	// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
	NearNumber *string `form:"NearNumber,omitempty" json:"NearNumber,omitempty"`

	// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
	NearLatLong *string `form:"NearLatLong,omitempty" json:"NearLatLong,omitempty"`

	// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
	Distance *int `form:"Distance,omitempty" json:"Distance,omitempty"`

	// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
	InPostalCode *string `form:"InPostalCode,omitempty" json:"InPostalCode,omitempty"`

	// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
	InRegion *string `form:"InRegion,omitempty" json:"InRegion,omitempty"`

	// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
	InRateCenter *string `form:"InRateCenter,omitempty" json:"InRateCenter,omitempty"`

	// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
	InLata *string `form:"InLata,omitempty" json:"InLata,omitempty"`

	// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
	InLocality *string `form:"InLocality,omitempty" json:"InLocality,omitempty"`

	// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
	FaxEnabled *bool `form:"FaxEnabled,omitempty" json:"FaxEnabled,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberSharedCostParams defines parameters for ListAvailablePhoneNumberSharedCost.
type ListAvailablePhoneNumberSharedCostParams struct {
	// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
	AreaCode *int `form:"AreaCode,omitempty" json:"AreaCode,omitempty"`

	// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
	Contains *string `form:"Contains,omitempty" json:"Contains,omitempty"`

	// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
	SmsEnabled *bool `form:"SmsEnabled,omitempty" json:"SmsEnabled,omitempty"`

	// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
	MmsEnabled *bool `form:"MmsEnabled,omitempty" json:"MmsEnabled,omitempty"`

	// Whether the phone numbers can receive calls. Can be: `true` or `false`.
	VoiceEnabled *bool `form:"VoiceEnabled,omitempty" json:"VoiceEnabled,omitempty"`

	// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeAllAddressRequired *bool `form:"ExcludeAllAddressRequired,omitempty" json:"ExcludeAllAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeLocalAddressRequired *bool `form:"ExcludeLocalAddressRequired,omitempty" json:"ExcludeLocalAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeForeignAddressRequired *bool `form:"ExcludeForeignAddressRequired,omitempty" json:"ExcludeForeignAddressRequired,omitempty"`

	// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
	NearNumber *string `form:"NearNumber,omitempty" json:"NearNumber,omitempty"`

	// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
	NearLatLong *string `form:"NearLatLong,omitempty" json:"NearLatLong,omitempty"`

	// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
	Distance *int `form:"Distance,omitempty" json:"Distance,omitempty"`

	// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
	InPostalCode *string `form:"InPostalCode,omitempty" json:"InPostalCode,omitempty"`

	// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
	InRegion *string `form:"InRegion,omitempty" json:"InRegion,omitempty"`

	// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
	InRateCenter *string `form:"InRateCenter,omitempty" json:"InRateCenter,omitempty"`

	// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
	InLata *string `form:"InLata,omitempty" json:"InLata,omitempty"`

	// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
	InLocality *string `form:"InLocality,omitempty" json:"InLocality,omitempty"`

	// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
	FaxEnabled *bool `form:"FaxEnabled,omitempty" json:"FaxEnabled,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberTollFreeParams defines parameters for ListAvailablePhoneNumberTollFree.
type ListAvailablePhoneNumberTollFreeParams struct {
	// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
	AreaCode *int `form:"AreaCode,omitempty" json:"AreaCode,omitempty"`

	// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
	Contains *string `form:"Contains,omitempty" json:"Contains,omitempty"`

	// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
	SmsEnabled *bool `form:"SmsEnabled,omitempty" json:"SmsEnabled,omitempty"`

	// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
	MmsEnabled *bool `form:"MmsEnabled,omitempty" json:"MmsEnabled,omitempty"`

	// Whether the phone numbers can receive calls. Can be: `true` or `false`.
	VoiceEnabled *bool `form:"VoiceEnabled,omitempty" json:"VoiceEnabled,omitempty"`

	// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeAllAddressRequired *bool `form:"ExcludeAllAddressRequired,omitempty" json:"ExcludeAllAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeLocalAddressRequired *bool `form:"ExcludeLocalAddressRequired,omitempty" json:"ExcludeLocalAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeForeignAddressRequired *bool `form:"ExcludeForeignAddressRequired,omitempty" json:"ExcludeForeignAddressRequired,omitempty"`

	// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
	NearNumber *string `form:"NearNumber,omitempty" json:"NearNumber,omitempty"`

	// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
	NearLatLong *string `form:"NearLatLong,omitempty" json:"NearLatLong,omitempty"`

	// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
	Distance *int `form:"Distance,omitempty" json:"Distance,omitempty"`

	// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
	InPostalCode *string `form:"InPostalCode,omitempty" json:"InPostalCode,omitempty"`

	// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
	InRegion *string `form:"InRegion,omitempty" json:"InRegion,omitempty"`

	// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
	InRateCenter *string `form:"InRateCenter,omitempty" json:"InRateCenter,omitempty"`

	// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
	InLata *string `form:"InLata,omitempty" json:"InLata,omitempty"`

	// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
	InLocality *string `form:"InLocality,omitempty" json:"InLocality,omitempty"`

	// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
	FaxEnabled *bool `form:"FaxEnabled,omitempty" json:"FaxEnabled,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListAvailablePhoneNumberVoipParams defines parameters for ListAvailablePhoneNumberVoip.
type ListAvailablePhoneNumberVoipParams struct {
	// The area code of the phone numbers to read. Applies to only phone numbers in the US and Canada.
	AreaCode *int `form:"AreaCode,omitempty" json:"AreaCode,omitempty"`

	// The pattern on which to match phone numbers. Valid characters are `*`, `0-9`, `a-z`, and `A-Z`. The `*` character matches any single digit. For examples, see [Example 2](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-2) and [Example 3](https://www.twilio.com/docs/phone-numbers/api/availablephonenumber-resource#local-get-basic-example-3). If specified, this value must have at least two characters.
	Contains *string `form:"Contains,omitempty" json:"Contains,omitempty"`

	// Whether the phone numbers can receive text messages. Can be: `true` or `false`.
	SmsEnabled *bool `form:"SmsEnabled,omitempty" json:"SmsEnabled,omitempty"`

	// Whether the phone numbers can receive MMS messages. Can be: `true` or `false`.
	MmsEnabled *bool `form:"MmsEnabled,omitempty" json:"MmsEnabled,omitempty"`

	// Whether the phone numbers can receive calls. Can be: `true` or `false`.
	VoiceEnabled *bool `form:"VoiceEnabled,omitempty" json:"VoiceEnabled,omitempty"`

	// Whether to exclude phone numbers that require an [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeAllAddressRequired *bool `form:"ExcludeAllAddressRequired,omitempty" json:"ExcludeAllAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a local [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeLocalAddressRequired *bool `form:"ExcludeLocalAddressRequired,omitempty" json:"ExcludeLocalAddressRequired,omitempty"`

	// Whether to exclude phone numbers that require a foreign [Address](https://www.twilio.com/docs/usage/api/address). Can be: `true` or `false` and the default is `false`.
	ExcludeForeignAddressRequired *bool `form:"ExcludeForeignAddressRequired,omitempty" json:"ExcludeForeignAddressRequired,omitempty"`

	// Whether to read phone numbers that are new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// Given a phone number, find a geographically close number within `distance` miles. Distance defaults to 25 miles. Applies to only phone numbers in the US and Canada.
	NearNumber *string `form:"NearNumber,omitempty" json:"NearNumber,omitempty"`

	// Given a latitude/longitude pair `lat,long` find geographically close numbers within `distance` miles. Applies to only phone numbers in the US and Canada.
	NearLatLong *string `form:"NearLatLong,omitempty" json:"NearLatLong,omitempty"`

	// The search radius, in miles, for a `near_` query.  Can be up to `500` and the default is `25`. Applies to only phone numbers in the US and Canada.
	Distance *int `form:"Distance,omitempty" json:"Distance,omitempty"`

	// Limit results to a particular postal code. Given a phone number, search within the same postal code as that number. Applies to only phone numbers in the US and Canada.
	InPostalCode *string `form:"InPostalCode,omitempty" json:"InPostalCode,omitempty"`

	// Limit results to a particular region, state, or province. Given a phone number, search within the same region as that number. Applies to only phone numbers in the US and Canada.
	InRegion *string `form:"InRegion,omitempty" json:"InRegion,omitempty"`

	// Limit results to a specific rate center, or given a phone number search within the same rate center as that number. Requires `in_lata` to be set as well. Applies to only phone numbers in the US and Canada.
	InRateCenter *string `form:"InRateCenter,omitempty" json:"InRateCenter,omitempty"`

	// Limit results to a specific local access and transport area ([LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area)). Given a phone number, search within the same [LATA](https://en.wikipedia.org/wiki/Local_access_and_transport_area) as that number. Applies to only phone numbers in the US and Canada.
	InLata *string `form:"InLata,omitempty" json:"InLata,omitempty"`

	// Limit results to a particular locality or city. Given a phone number, search within the same Locality as that number.
	InLocality *string `form:"InLocality,omitempty" json:"InLocality,omitempty"`

	// Whether the phone numbers can receive faxes. Can be: `true` or `false`.
	FaxEnabled *bool `form:"FaxEnabled,omitempty" json:"FaxEnabled,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListCallParams defines parameters for ListCall.
type ListCallParams struct {
	// Only show calls made to this phone number, SIP address, Client identifier or SIM SID.
	To *string `form:"To,omitempty" json:"To,omitempty"`

	// Only include calls from this phone number, SIP address, Client identifier or SIM SID.
	From *string `form:"From,omitempty" json:"From,omitempty"`

	// Only include calls spawned by calls with this SID.
	ParentCallSid *string `form:"ParentCallSid,omitempty" json:"ParentCallSid,omitempty"`

	// The status of the calls to include. Can be: `queued`, `ringing`, `in-progress`, `canceled`, `completed`, `failed`, `busy`, or `no-answer`.
	Status *ListCallParamsStatus `form:"Status,omitempty" json:"Status,omitempty"`

	// Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
	StartTime *time.Time `form:"StartTime,omitempty" json:"StartTime,omitempty"`

	// Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
	StartTime *time.Time `form:"StartTime<,omitempty" json:"StartTime<,omitempty"`

	// Only include calls that started on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that started on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read calls that started on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read calls that started on or after midnight of this date.
	StartTime *time.Time `form:"StartTime>,omitempty" json:"StartTime>,omitempty"`

	// Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
	EndTime *time.Time `form:"EndTime,omitempty" json:"EndTime,omitempty"`

	// Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
	EndTime *time.Time `form:"EndTime<,omitempty" json:"EndTime<,omitempty"`

	// Only include calls that ended on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read only calls that ended on this date. You can also specify an inequality, such as `EndTime<=YYYY-MM-DD`, to read calls that ended on or before midnight of this date, and `EndTime>=YYYY-MM-DD` to read calls that ended on or after midnight of this date.
	EndTime *time.Time `form:"EndTime>,omitempty" json:"EndTime>,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListCallParamsStatus defines parameters for ListCall.
type ListCallParamsStatus string

// ListCallEventParams defines parameters for ListCallEvent.
type ListCallEventParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListCallNotificationParams defines parameters for ListCallNotification.
type ListCallNotificationParams struct {
	// Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
	Log *int `form:"Log,omitempty" json:"Log,omitempty"`

	// Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
	MessageDate *openapi_types.Date `form:"MessageDate,omitempty" json:"MessageDate,omitempty"`

	// Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
	MessageDate *openapi_types.Date `form:"MessageDate<,omitempty" json:"MessageDate<,omitempty"`

	// Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
	MessageDate *openapi_types.Date `form:"MessageDate>,omitempty" json:"MessageDate>,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListCallRecordingParams defines parameters for ListCallRecording.
type ListCallRecordingParams struct {
	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
	DateCreated *openapi_types.Date `form:"DateCreated,omitempty" json:"DateCreated,omitempty"`

	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
	DateCreated *openapi_types.Date `form:"DateCreated<,omitempty" json:"DateCreated<,omitempty"`

	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
	DateCreated *openapi_types.Date `form:"DateCreated>,omitempty" json:"DateCreated>,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListConferenceParams defines parameters for ListConference.
type ListConferenceParams struct {
	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
	DateCreated *openapi_types.Date `form:"DateCreated,omitempty" json:"DateCreated,omitempty"`

	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
	DateCreated *openapi_types.Date `form:"DateCreated<,omitempty" json:"DateCreated<,omitempty"`

	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that started on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify  conferences that started on or after midnight on a date, use `>=YYYY-MM-DD`.
	DateCreated *openapi_types.Date `form:"DateCreated>,omitempty" json:"DateCreated>,omitempty"`

	// The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
	DateUpdated *openapi_types.Date `form:"DateUpdated,omitempty" json:"DateUpdated,omitempty"`

	// The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
	DateUpdated *openapi_types.Date `form:"DateUpdated<,omitempty" json:"DateUpdated<,omitempty"`

	// The `date_updated` value, specified as `YYYY-MM-DD`, of the resources to read. To read conferences that were last updated on or before midnight on a date, use `<=YYYY-MM-DD`, and to specify conferences that were last updated on or after midnight on a given date, use  `>=YYYY-MM-DD`.
	DateUpdated *openapi_types.Date `form:"DateUpdated>,omitempty" json:"DateUpdated>,omitempty"`

	// The string that identifies the Conference resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// The status of the resources to read. Can be: `init`, `in-progress`, or `completed`.
	Status *ListConferenceParamsStatus `form:"Status,omitempty" json:"Status,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListConferenceParamsStatus defines parameters for ListConference.
type ListConferenceParamsStatus string

// ListParticipantParams defines parameters for ListParticipant.
type ListParticipantParams struct {
	// Whether to return only participants that are muted. Can be: `true` or `false`.
	Muted *bool `form:"Muted,omitempty" json:"Muted,omitempty"`

	// Whether to return only participants that are on hold. Can be: `true` or `false`.
	Hold *bool `form:"Hold,omitempty" json:"Hold,omitempty"`

	// Whether to return only participants who are coaching another call. Can be: `true` or `false`.
	Coaching *bool `form:"Coaching,omitempty" json:"Coaching,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListConferenceRecordingParams defines parameters for ListConferenceRecording.
type ListConferenceRecordingParams struct {
	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
	DateCreated *openapi_types.Date `form:"DateCreated,omitempty" json:"DateCreated,omitempty"`

	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
	DateCreated *openapi_types.Date `form:"DateCreated<,omitempty" json:"DateCreated<,omitempty"`

	// The `date_created` value, specified as `YYYY-MM-DD`, of the resources to read. You can also specify inequality: `DateCreated<=YYYY-MM-DD` will return recordings generated at or before midnight on a given date, and `DateCreated>=YYYY-MM-DD` returns recordings generated at or after midnight on a date.
	DateCreated *openapi_types.Date `form:"DateCreated>,omitempty" json:"DateCreated>,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListConnectAppParams defines parameters for ListConnectApp.
type ListConnectAppParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListIncomingPhoneNumberParams defines parameters for ListIncomingPhoneNumber.
type ListIncomingPhoneNumberParams struct {
	// Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// A string that identifies the IncomingPhoneNumber resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
	PhoneNumber *string `form:"PhoneNumber,omitempty" json:"PhoneNumber,omitempty"`

	// Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
	Origin *string `form:"Origin,omitempty" json:"Origin,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListIncomingPhoneNumberLocalParams defines parameters for ListIncomingPhoneNumberLocal.
type ListIncomingPhoneNumberLocalParams struct {
	// Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// A string that identifies the resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
	PhoneNumber *string `form:"PhoneNumber,omitempty" json:"PhoneNumber,omitempty"`

	// Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
	Origin *string `form:"Origin,omitempty" json:"Origin,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListIncomingPhoneNumberMobileParams defines parameters for ListIncomingPhoneNumberMobile.
type ListIncomingPhoneNumberMobileParams struct {
	// Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// A string that identifies the resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
	PhoneNumber *string `form:"PhoneNumber,omitempty" json:"PhoneNumber,omitempty"`

	// Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
	Origin *string `form:"Origin,omitempty" json:"Origin,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListIncomingPhoneNumberTollFreeParams defines parameters for ListIncomingPhoneNumberTollFree.
type ListIncomingPhoneNumberTollFreeParams struct {
	// Whether to include phone numbers new to the Twilio platform. Can be: `true` or `false` and the default is `true`.
	Beta *bool `form:"Beta,omitempty" json:"Beta,omitempty"`

	// A string that identifies the resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// The phone numbers of the IncomingPhoneNumber resources to read. You can specify partial numbers and use '*' as a wildcard for any digit.
	PhoneNumber *string `form:"PhoneNumber,omitempty" json:"PhoneNumber,omitempty"`

	// Whether to include phone numbers based on their origin. Can be: `twilio` or `hosted`. By default, phone numbers of all origin are included.
	Origin *string `form:"Origin,omitempty" json:"Origin,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListIncomingPhoneNumberAssignedAddOnParams defines parameters for ListIncomingPhoneNumberAssignedAddOn.
type ListIncomingPhoneNumberAssignedAddOnParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListIncomingPhoneNumberAssignedAddOnExtensionParams defines parameters for ListIncomingPhoneNumberAssignedAddOnExtension.
type ListIncomingPhoneNumberAssignedAddOnExtensionParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListKeyParams defines parameters for ListKey.
type ListKeyParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListMessageParams defines parameters for ListMessage.
type ListMessageParams struct {
	// Read messages sent to only this phone number.
	To *string `form:"To,omitempty" json:"To,omitempty"`

	// Read messages sent from only this phone number or alphanumeric sender ID.
	From *string `form:"From,omitempty" json:"From,omitempty"`

	// The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
	DateSent *time.Time `form:"DateSent,omitempty" json:"DateSent,omitempty"`

	// The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
	DateSent *time.Time `form:"DateSent<,omitempty" json:"DateSent<,omitempty"`

	// The date of the messages to show. Specify a date as `YYYY-MM-DD` in GMT to read only messages sent on this date. For example: `2009-07-06`. You can also specify an inequality, such as `DateSent<=YYYY-MM-DD`, to read messages sent on or before midnight on a date, and `DateSent>=YYYY-MM-DD` to read messages sent on or after midnight on a date.
	DateSent *time.Time `form:"DateSent>,omitempty" json:"DateSent>,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListMediaParams defines parameters for ListMedia.
type ListMediaParams struct {
	// Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
	DateCreated *time.Time `form:"DateCreated,omitempty" json:"DateCreated,omitempty"`

	// Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
	DateCreated *time.Time `form:"DateCreated<,omitempty" json:"DateCreated<,omitempty"`

	// Only include media that was created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read media that was created on this date. You can also specify an inequality, such as `StartTime<=YYYY-MM-DD`, to read media that was created on or before midnight of this date, and `StartTime>=YYYY-MM-DD` to read media that was created on or after midnight of this date.
	DateCreated *time.Time `form:"DateCreated>,omitempty" json:"DateCreated>,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListNotificationParams defines parameters for ListNotification.
type ListNotificationParams struct {
	// Only read notifications of the specified log level. Can be:  `0` to read only ERROR notifications or `1` to read only WARNING notifications. By default, all notifications are read.
	Log *int `form:"Log,omitempty" json:"Log,omitempty"`

	// Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
	MessageDate *openapi_types.Date `form:"MessageDate,omitempty" json:"MessageDate,omitempty"`

	// Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
	MessageDate *openapi_types.Date `form:"MessageDate<,omitempty" json:"MessageDate<,omitempty"`

	// Only show notifications for the specified date, formatted as `YYYY-MM-DD`. You can also specify an inequality, such as `<=YYYY-MM-DD` for messages logged at or before midnight on a date, or `>=YYYY-MM-DD` for messages logged at or after midnight on a date.
	MessageDate *openapi_types.Date `form:"MessageDate>,omitempty" json:"MessageDate>,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListOutgoingCallerIdParams defines parameters for ListOutgoingCallerId.
type ListOutgoingCallerIdParams struct {
	// The phone number of the OutgoingCallerId resources to read.
	PhoneNumber *string `form:"PhoneNumber,omitempty" json:"PhoneNumber,omitempty"`

	// The string that identifies the OutgoingCallerId resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListQueueParams defines parameters for ListQueue.
type ListQueueParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListMemberParams defines parameters for ListMember.
type ListMemberParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListRecordingParams defines parameters for ListRecording.
type ListRecordingParams struct {
	// Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
	DateCreated *time.Time `form:"DateCreated,omitempty" json:"DateCreated,omitempty"`

	// Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
	DateCreated *time.Time `form:"DateCreated<,omitempty" json:"DateCreated<,omitempty"`

	// Only include recordings that were created on this date. Specify a date as `YYYY-MM-DD` in GMT, for example: `2009-07-06`, to read recordings that were created on this date. You can also specify an inequality, such as `DateCreated<=YYYY-MM-DD`, to read recordings that were created on or before midnight of this date, and `DateCreated>=YYYY-MM-DD` to read recordings that were created on or after midnight of this date.
	DateCreated *time.Time `form:"DateCreated>,omitempty" json:"DateCreated>,omitempty"`

	// The [Call](https://www.twilio.com/docs/voice/api/call-resource) SID of the resources to read.
	CallSid *string `form:"CallSid,omitempty" json:"CallSid,omitempty"`

	// The Conference SID that identifies the conference associated with the recording to read.
	ConferenceSid *string `form:"ConferenceSid,omitempty" json:"ConferenceSid,omitempty"`

	// A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
	IncludeSoftDeleted *bool `form:"IncludeSoftDeleted,omitempty" json:"IncludeSoftDeleted,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListRecordingTranscriptionParams defines parameters for ListRecordingTranscription.
type ListRecordingTranscriptionParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListRecordingAddOnResultParams defines parameters for ListRecordingAddOnResult.
type ListRecordingAddOnResultParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListRecordingAddOnResultPayloadParams defines parameters for ListRecordingAddOnResultPayload.
type ListRecordingAddOnResultPayloadParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// FetchRecordingParams defines parameters for FetchRecording.
type FetchRecordingParams struct {
	// A boolean parameter indicating whether to retrieve soft deleted recordings or not. Recordings metadata are kept after deletion for a retention period of 40 days.
	IncludeSoftDeleted *bool `form:"IncludeSoftDeleted,omitempty" json:"IncludeSoftDeleted,omitempty"`
}

// ListSipCredentialListParams defines parameters for ListSipCredentialList.
type ListSipCredentialListParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipCredentialParams defines parameters for ListSipCredential.
type ListSipCredentialParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipDomainParams defines parameters for ListSipDomain.
type ListSipDomainParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipAuthCallsCredentialListMappingParams defines parameters for ListSipAuthCallsCredentialListMapping.
type ListSipAuthCallsCredentialListMappingParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipAuthCallsIpAccessControlListMappingParams defines parameters for ListSipAuthCallsIpAccessControlListMapping.
type ListSipAuthCallsIpAccessControlListMappingParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipAuthRegistrationsCredentialListMappingParams defines parameters for ListSipAuthRegistrationsCredentialListMapping.
type ListSipAuthRegistrationsCredentialListMappingParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipCredentialListMappingParams defines parameters for ListSipCredentialListMapping.
type ListSipCredentialListMappingParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipIpAccessControlListMappingParams defines parameters for ListSipIpAccessControlListMapping.
type ListSipIpAccessControlListMappingParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipIpAccessControlListParams defines parameters for ListSipIpAccessControlList.
type ListSipIpAccessControlListParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSipIpAddressParams defines parameters for ListSipIpAddress.
type ListSipIpAddressParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListShortCodeParams defines parameters for ListShortCode.
type ListShortCodeParams struct {
	// The string that identifies the ShortCode resources to read.
	FriendlyName *string `form:"FriendlyName,omitempty" json:"FriendlyName,omitempty"`

	// Only show the ShortCode resources that match this pattern. You can specify partial numbers and use '*' as a wildcard for any digit.
	ShortCode *string `form:"ShortCode,omitempty" json:"ShortCode,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListSigningKeyParams defines parameters for ListSigningKey.
type ListSigningKeyParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListTranscriptionParams defines parameters for ListTranscription.
type ListTranscriptionParams struct {
	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordParams defines parameters for ListUsageRecord.
type ListUsageRecordParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordParamsCategory defines parameters for ListUsageRecord.
type ListUsageRecordParamsCategory string

// ListUsageRecordAllTimeParams defines parameters for ListUsageRecordAllTime.
type ListUsageRecordAllTimeParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordAllTimeParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordAllTimeParamsCategory defines parameters for ListUsageRecordAllTime.
type ListUsageRecordAllTimeParamsCategory string

// ListUsageRecordDailyParams defines parameters for ListUsageRecordDaily.
type ListUsageRecordDailyParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordDailyParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordDailyParamsCategory defines parameters for ListUsageRecordDaily.
type ListUsageRecordDailyParamsCategory string

// ListUsageRecordLastMonthParams defines parameters for ListUsageRecordLastMonth.
type ListUsageRecordLastMonthParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordLastMonthParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordLastMonthParamsCategory defines parameters for ListUsageRecordLastMonth.
type ListUsageRecordLastMonthParamsCategory string

// ListUsageRecordMonthlyParams defines parameters for ListUsageRecordMonthly.
type ListUsageRecordMonthlyParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordMonthlyParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordMonthlyParamsCategory defines parameters for ListUsageRecordMonthly.
type ListUsageRecordMonthlyParamsCategory string

// ListUsageRecordThisMonthParams defines parameters for ListUsageRecordThisMonth.
type ListUsageRecordThisMonthParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordThisMonthParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordThisMonthParamsCategory defines parameters for ListUsageRecordThisMonth.
type ListUsageRecordThisMonthParamsCategory string

// ListUsageRecordTodayParams defines parameters for ListUsageRecordToday.
type ListUsageRecordTodayParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordTodayParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordTodayParamsCategory defines parameters for ListUsageRecordToday.
type ListUsageRecordTodayParamsCategory string

// ListUsageRecordYearlyParams defines parameters for ListUsageRecordYearly.
type ListUsageRecordYearlyParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordYearlyParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordYearlyParamsCategory defines parameters for ListUsageRecordYearly.
type ListUsageRecordYearlyParamsCategory string

// ListUsageRecordYesterdayParams defines parameters for ListUsageRecordYesterday.
type ListUsageRecordYesterdayParams struct {
	// The [usage category](https://www.twilio.com/docs/usage/api/usage-record#usage-categories) of the UsageRecord resources to read. Only UsageRecord resources in the specified category are retrieved.
	Category *ListUsageRecordYesterdayParamsCategory `form:"Category,omitempty" json:"Category,omitempty"`

	// Only include usage that has occurred on or after this date. Specify the date in GMT and format as `YYYY-MM-DD`. You can also specify offsets from the current date, such as: `-30days`, which will set the start date to be 30 days before the current date.
	StartDate *openapi_types.Date `form:"StartDate,omitempty" json:"StartDate,omitempty"`

	// Only include usage that occurred on or before this date. Specify the date in GMT and format as `YYYY-MM-DD`.  You can also specify offsets from the current date, such as: `+30days`, which will set the end date to 30 days from the current date.
	EndDate *openapi_types.Date `form:"EndDate,omitempty" json:"EndDate,omitempty"`

	// Whether to include usage from the master account and all its subaccounts. Can be: `true` (the default) to include usage from the master account and all subaccounts or `false` to retrieve usage from only the specified account.
	IncludeSubaccounts *bool `form:"IncludeSubaccounts,omitempty" json:"IncludeSubaccounts,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageRecordYesterdayParamsCategory defines parameters for ListUsageRecordYesterday.
type ListUsageRecordYesterdayParamsCategory string

// ListUsageTriggerParams defines parameters for ListUsageTrigger.
type ListUsageTriggerParams struct {
	// The frequency of recurring UsageTriggers to read. Can be: `daily`, `monthly`, or `yearly` to read recurring UsageTriggers. An empty value or a value of `alltime` reads non-recurring UsageTriggers.
	Recurring *ListUsageTriggerParamsRecurring `form:"Recurring,omitempty" json:"Recurring,omitempty"`

	// The trigger field of the UsageTriggers to read.  Can be: `count`, `usage`, or `price` as described in the [UsageRecords documentation](https://www.twilio.com/docs/usage/api/usage-record#usage-count-price).
	TriggerBy *ListUsageTriggerParamsTriggerBy `form:"TriggerBy,omitempty" json:"TriggerBy,omitempty"`

	// The usage category of the UsageTriggers to read. Must be a supported [usage categories](https://www.twilio.com/docs/usage/api/usage-record#usage-categories).
	UsageCategory *ListUsageTriggerParamsUsageCategory `form:"UsageCategory,omitempty" json:"UsageCategory,omitempty"`

	// How many resources to return in each list page. The default is 50, and the maximum is 1000.
	PageSize *int `form:"PageSize,omitempty" json:"PageSize,omitempty"`
}

// ListUsageTriggerParamsRecurring defines parameters for ListUsageTrigger.
type ListUsageTriggerParamsRecurring string

// ListUsageTriggerParamsTriggerBy defines parameters for ListUsageTrigger.
type ListUsageTriggerParamsTriggerBy string

// ListUsageTriggerParamsUsageCategory defines parameters for ListUsageTrigger.
type ListUsageTriggerParamsUsageCategory string

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /2010-04-01/Accounts.json)
	ListAccount(ctx echo.Context, params ListAccountParams) error

	// (POST /2010-04-01/Accounts.json)
	CreateAccount(ctx echo.Context) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Addresses.json)
	ListAddress(ctx echo.Context, accountSid string, params ListAddressParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Addresses.json)
	CreateAddress(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json)
	ListDependentPhoneNumber(ctx echo.Context, accountSid string, addressSid string, params ListDependentPhoneNumberParams) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json)
	DeleteAddress(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json)
	FetchAddress(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json)
	UpdateAddress(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Applications.json)
	ListApplication(ctx echo.Context, accountSid string, params ListApplicationParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Applications.json)
	CreateApplication(ctx echo.Context, accountSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json)
	DeleteApplication(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json)
	FetchApplication(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json)
	UpdateApplication(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps.json)
	ListAuthorizedConnectApp(ctx echo.Context, accountSid string, params ListAuthorizedConnectAppParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}.json)
	FetchAuthorizedConnectApp(ctx echo.Context, accountSid string, connectAppSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers.json)
	ListAvailablePhoneNumberCountry(ctx echo.Context, accountSid string, params ListAvailablePhoneNumberCountryParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}.json)
	FetchAvailablePhoneNumberCountry(ctx echo.Context, accountSid string, countryCode string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json)
	ListAvailablePhoneNumberLocal(ctx echo.Context, accountSid string, countryCode string, params ListAvailablePhoneNumberLocalParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/MachineToMachine.json)
	ListAvailablePhoneNumberMachineToMachine(ctx echo.Context, accountSid string, countryCode string, params ListAvailablePhoneNumberMachineToMachineParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Mobile.json)
	ListAvailablePhoneNumberMobile(ctx echo.Context, accountSid string, countryCode string, params ListAvailablePhoneNumberMobileParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json)
	ListAvailablePhoneNumberNational(ctx echo.Context, accountSid string, countryCode string, params ListAvailablePhoneNumberNationalParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/SharedCost.json)
	ListAvailablePhoneNumberSharedCost(ctx echo.Context, accountSid string, countryCode string, params ListAvailablePhoneNumberSharedCostParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json)
	ListAvailablePhoneNumberTollFree(ctx echo.Context, accountSid string, countryCode string, params ListAvailablePhoneNumberTollFreeParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Voip.json)
	ListAvailablePhoneNumberVoip(ctx echo.Context, accountSid string, countryCode string, params ListAvailablePhoneNumberVoipParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Balance.json)
	FetchBalance(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls.json)
	ListCall(ctx echo.Context, accountSid string, params ListCallParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls.json)
	CreateCall(ctx echo.Context, accountSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json)
	CreateCallFeedbackSummary(ctx echo.Context, accountSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json)
	DeleteCallFeedbackSummary(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json)
	FetchCallFeedbackSummary(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json)
	ListCallEvent(ctx echo.Context, accountSid string, callSid string, params ListCallEventParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json)
	FetchCallFeedback(ctx echo.Context, accountSid string, callSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json)
	UpdateCallFeedback(ctx echo.Context, accountSid string, callSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json)
	ListCallNotification(ctx echo.Context, accountSid string, callSid string, params ListCallNotificationParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json)
	FetchCallNotification(ctx echo.Context, accountSid string, callSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json)
	CreatePayments(ctx echo.Context, accountSid string, callSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json)
	UpdatePayments(ctx echo.Context, accountSid string, callSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json)
	ListCallRecording(ctx echo.Context, accountSid string, callSid string, params ListCallRecordingParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json)
	CreateCallRecording(ctx echo.Context, accountSid string, callSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json)
	DeleteCallRecording(ctx echo.Context, accountSid string, callSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json)
	FetchCallRecording(ctx echo.Context, accountSid string, callSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json)
	UpdateCallRecording(ctx echo.Context, accountSid string, callSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec.json)
	CreateSiprec(ctx echo.Context, accountSid string, callSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec/{Sid}.json)
	UpdateSiprec(ctx echo.Context, accountSid string, callSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams.json)
	CreateStream(ctx echo.Context, accountSid string, callSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams/{Sid}.json)
	UpdateStream(ctx echo.Context, accountSid string, callSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json)
	DeleteCall(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json)
	FetchCall(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json)
	UpdateCall(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Conferences.json)
	ListConference(ctx echo.Context, accountSid string, params ListConferenceParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json)
	ListParticipant(ctx echo.Context, accountSid string, conferenceSid string, params ListParticipantParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json)
	CreateParticipant(ctx echo.Context, accountSid string, conferenceSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json)
	DeleteParticipant(ctx echo.Context, accountSid string, conferenceSid string, callSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json)
	FetchParticipant(ctx echo.Context, accountSid string, conferenceSid string, callSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json)
	UpdateParticipant(ctx echo.Context, accountSid string, conferenceSid string, callSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json)
	ListConferenceRecording(ctx echo.Context, accountSid string, conferenceSid string, params ListConferenceRecordingParams) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json)
	DeleteConferenceRecording(ctx echo.Context, accountSid string, conferenceSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json)
	FetchConferenceRecording(ctx echo.Context, accountSid string, conferenceSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json)
	UpdateConferenceRecording(ctx echo.Context, accountSid string, conferenceSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json)
	FetchConference(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json)
	UpdateConference(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/ConnectApps.json)
	ListConnectApp(ctx echo.Context, accountSid string, params ListConnectAppParams) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json)
	DeleteConnectApp(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json)
	FetchConnectApp(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json)
	UpdateConnectApp(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json)
	ListIncomingPhoneNumber(ctx echo.Context, accountSid string, params ListIncomingPhoneNumberParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json)
	CreateIncomingPhoneNumber(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json)
	ListIncomingPhoneNumberLocal(ctx echo.Context, accountSid string, params ListIncomingPhoneNumberLocalParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json)
	CreateIncomingPhoneNumberLocal(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json)
	ListIncomingPhoneNumberMobile(ctx echo.Context, accountSid string, params ListIncomingPhoneNumberMobileParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json)
	CreateIncomingPhoneNumberMobile(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json)
	ListIncomingPhoneNumberTollFree(ctx echo.Context, accountSid string, params ListIncomingPhoneNumberTollFreeParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json)
	CreateIncomingPhoneNumberTollFree(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json)
	ListIncomingPhoneNumberAssignedAddOn(ctx echo.Context, accountSid string, resourceSid string, params ListIncomingPhoneNumberAssignedAddOnParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json)
	CreateIncomingPhoneNumberAssignedAddOn(ctx echo.Context, accountSid string, resourceSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions.json)
	ListIncomingPhoneNumberAssignedAddOnExtension(ctx echo.Context, accountSid string, resourceSid string, assignedAddOnSid string, params ListIncomingPhoneNumberAssignedAddOnExtensionParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions/{Sid}.json)
	FetchIncomingPhoneNumberAssignedAddOnExtension(ctx echo.Context, accountSid string, resourceSid string, assignedAddOnSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json)
	DeleteIncomingPhoneNumberAssignedAddOn(ctx echo.Context, accountSid string, resourceSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json)
	FetchIncomingPhoneNumberAssignedAddOn(ctx echo.Context, accountSid string, resourceSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json)
	DeleteIncomingPhoneNumber(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json)
	FetchIncomingPhoneNumber(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json)
	UpdateIncomingPhoneNumber(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Keys.json)
	ListKey(ctx echo.Context, accountSid string, params ListKeyParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Keys.json)
	CreateNewKey(ctx echo.Context, accountSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json)
	DeleteKey(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json)
	FetchKey(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json)
	UpdateKey(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Messages.json)
	ListMessage(ctx echo.Context, accountSid string, params ListMessageParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Messages.json)
	CreateMessage(ctx echo.Context, accountSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json)
	CreateMessageFeedback(ctx echo.Context, accountSid string, messageSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json)
	ListMedia(ctx echo.Context, accountSid string, messageSid string, params ListMediaParams) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json)
	DeleteMedia(ctx echo.Context, accountSid string, messageSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json)
	FetchMedia(ctx echo.Context, accountSid string, messageSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json)
	DeleteMessage(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json)
	FetchMessage(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json)
	UpdateMessage(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Notifications.json)
	ListNotification(ctx echo.Context, accountSid string, params ListNotificationParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Notifications/{Sid}.json)
	FetchNotification(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json)
	ListOutgoingCallerId(ctx echo.Context, accountSid string, params ListOutgoingCallerIdParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json)
	CreateValidationRequest(ctx echo.Context, accountSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json)
	DeleteOutgoingCallerId(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json)
	FetchOutgoingCallerId(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json)
	UpdateOutgoingCallerId(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Queues.json)
	ListQueue(ctx echo.Context, accountSid string, params ListQueueParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Queues.json)
	CreateQueue(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json)
	ListMember(ctx echo.Context, accountSid string, queueSid string, params ListMemberParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json)
	FetchMember(ctx echo.Context, accountSid string, queueSid string, callSid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json)
	UpdateMember(ctx echo.Context, accountSid string, queueSid string, callSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json)
	DeleteQueue(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json)
	FetchQueue(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json)
	UpdateQueue(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings.json)
	ListRecording(ctx echo.Context, accountSid string, params ListRecordingParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json)
	ListRecordingTranscription(ctx echo.Context, accountSid string, recordingSid string, params ListRecordingTranscriptionParams) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json)
	DeleteRecordingTranscription(ctx echo.Context, accountSid string, recordingSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json)
	FetchRecordingTranscription(ctx echo.Context, accountSid string, recordingSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json)
	ListRecordingAddOnResult(ctx echo.Context, accountSid string, referenceSid string, params ListRecordingAddOnResultParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json)
	ListRecordingAddOnResultPayload(ctx echo.Context, accountSid string, referenceSid string, addOnResultSid string, params ListRecordingAddOnResultPayloadParams) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json)
	DeleteRecordingAddOnResultPayload(ctx echo.Context, accountSid string, referenceSid string, addOnResultSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json)
	FetchRecordingAddOnResultPayload(ctx echo.Context, accountSid string, referenceSid string, addOnResultSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json)
	DeleteRecordingAddOnResult(ctx echo.Context, accountSid string, referenceSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json)
	FetchRecordingAddOnResult(ctx echo.Context, accountSid string, referenceSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json)
	DeleteRecording(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json)
	FetchRecording(ctx echo.Context, accountSid string, sid string, params FetchRecordingParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json)
	ListSipCredentialList(ctx echo.Context, accountSid string, params ListSipCredentialListParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json)
	CreateSipCredentialList(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json)
	ListSipCredential(ctx echo.Context, accountSid string, credentialListSid string, params ListSipCredentialParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json)
	CreateSipCredential(ctx echo.Context, accountSid string, credentialListSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json)
	DeleteSipCredential(ctx echo.Context, accountSid string, credentialListSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json)
	FetchSipCredential(ctx echo.Context, accountSid string, credentialListSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json)
	UpdateSipCredential(ctx echo.Context, accountSid string, credentialListSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json)
	DeleteSipCredentialList(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json)
	FetchSipCredentialList(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json)
	UpdateSipCredentialList(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains.json)
	ListSipDomain(ctx echo.Context, accountSid string, params ListSipDomainParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/Domains.json)
	CreateSipDomain(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json)
	ListSipAuthCallsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, params ListSipAuthCallsCredentialListMappingParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json)
	CreateSipAuthCallsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json)
	DeleteSipAuthCallsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json)
	FetchSipAuthCallsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json)
	ListSipAuthCallsIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string, params ListSipAuthCallsIpAccessControlListMappingParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json)
	CreateSipAuthCallsIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json)
	DeleteSipAuthCallsIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json)
	FetchSipAuthCallsIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json)
	ListSipAuthRegistrationsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, params ListSipAuthRegistrationsCredentialListMappingParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json)
	CreateSipAuthRegistrationsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json)
	DeleteSipAuthRegistrationsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json)
	FetchSipAuthRegistrationsCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json)
	ListSipCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, params ListSipCredentialListMappingParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json)
	CreateSipCredentialListMapping(ctx echo.Context, accountSid string, domainSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json)
	DeleteSipCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json)
	FetchSipCredentialListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json)
	ListSipIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string, params ListSipIpAccessControlListMappingParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json)
	CreateSipIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json)
	DeleteSipIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json)
	FetchSipIpAccessControlListMapping(ctx echo.Context, accountSid string, domainSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json)
	DeleteSipDomain(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json)
	FetchSipDomain(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json)
	UpdateSipDomain(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json)
	ListSipIpAccessControlList(ctx echo.Context, accountSid string, params ListSipIpAccessControlListParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json)
	CreateSipIpAccessControlList(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json)
	ListSipIpAddress(ctx echo.Context, accountSid string, ipAccessControlListSid string, params ListSipIpAddressParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json)
	CreateSipIpAddress(ctx echo.Context, accountSid string, ipAccessControlListSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json)
	DeleteSipIpAddress(ctx echo.Context, accountSid string, ipAccessControlListSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json)
	FetchSipIpAddress(ctx echo.Context, accountSid string, ipAccessControlListSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json)
	UpdateSipIpAddress(ctx echo.Context, accountSid string, ipAccessControlListSid string, sid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json)
	DeleteSipIpAccessControlList(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json)
	FetchSipIpAccessControlList(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json)
	UpdateSipIpAccessControlList(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json)
	ListShortCode(ctx echo.Context, accountSid string, params ListShortCodeParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json)
	FetchShortCode(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json)
	UpdateShortCode(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SigningKeys.json)
	ListSigningKey(ctx echo.Context, accountSid string, params ListSigningKeyParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SigningKeys.json)
	CreateNewSigningKey(ctx echo.Context, accountSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json)
	DeleteSigningKey(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json)
	FetchSigningKey(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json)
	UpdateSigningKey(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Tokens.json)
	CreateToken(ctx echo.Context, accountSid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Transcriptions.json)
	ListTranscription(ctx echo.Context, accountSid string, params ListTranscriptionParams) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json)
	DeleteTranscription(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json)
	FetchTranscription(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records.json)
	ListUsageRecord(ctx echo.Context, accountSid string, params ListUsageRecordParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json)
	ListUsageRecordAllTime(ctx echo.Context, accountSid string, params ListUsageRecordAllTimeParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json)
	ListUsageRecordDaily(ctx echo.Context, accountSid string, params ListUsageRecordDailyParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json)
	ListUsageRecordLastMonth(ctx echo.Context, accountSid string, params ListUsageRecordLastMonthParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json)
	ListUsageRecordMonthly(ctx echo.Context, accountSid string, params ListUsageRecordMonthlyParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json)
	ListUsageRecordThisMonth(ctx echo.Context, accountSid string, params ListUsageRecordThisMonthParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json)
	ListUsageRecordToday(ctx echo.Context, accountSid string, params ListUsageRecordTodayParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json)
	ListUsageRecordYearly(ctx echo.Context, accountSid string, params ListUsageRecordYearlyParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json)
	ListUsageRecordYesterday(ctx echo.Context, accountSid string, params ListUsageRecordYesterdayParams) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json)
	ListUsageTrigger(ctx echo.Context, accountSid string, params ListUsageTriggerParams) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json)
	CreateUsageTrigger(ctx echo.Context, accountSid string) error

	// (DELETE /2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json)
	DeleteUsageTrigger(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json)
	FetchUsageTrigger(ctx echo.Context, accountSid string, sid string) error

	// (POST /2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json)
	UpdateUsageTrigger(ctx echo.Context, accountSid string, sid string) error

	// (GET /2010-04-01/Accounts/{Sid}.json)
	FetchAccount(ctx echo.Context, sid string) error

	// (POST /2010-04-01/Accounts/{Sid}.json)
	UpdateAccount(ctx echo.Context, sid string) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAccount converts echo context to params.
func (w *ServerInterfaceWrapper) ListAccount(ctx echo.Context) error {
	var err error

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAccountParams
	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "Status" -------------

	err = runtime.BindQueryParameter("form", true, false, "Status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Status: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAccount(ctx, params)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// ListAddress converts echo context to params.
func (w *ServerInterfaceWrapper) ListAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAddressParams
	// ------------- Optional query parameter "CustomerName" -------------

	err = runtime.BindQueryParameter("form", true, false, "CustomerName", ctx.QueryParams(), &params.CustomerName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CustomerName: %s", err))
	}

	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "IsoCountry" -------------

	err = runtime.BindQueryParameter("form", true, false, "IsoCountry", ctx.QueryParams(), &params.IsoCountry)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IsoCountry: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAddress(ctx, accountSid, params)
	return err
}

// CreateAddress converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAddress(ctx, accountSid)
	return err
}

// ListDependentPhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ListDependentPhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "AddressSid" -------------
	var addressSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AddressSid", runtime.ParamLocationPath, ctx.Param("AddressSid"), &addressSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AddressSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListDependentPhoneNumberParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListDependentPhoneNumber(ctx, accountSid, addressSid, params)
	return err
}

// DeleteAddress converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteAddress(ctx, accountSid, sid)
	return err
}

// FetchAddress converts echo context to params.
func (w *ServerInterfaceWrapper) FetchAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchAddress(ctx, accountSid, sid)
	return err
}

// UpdateAddress converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAddress(ctx, accountSid, sid)
	return err
}

// ListApplication converts echo context to params.
func (w *ServerInterfaceWrapper) ListApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListApplicationParams
	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListApplication(ctx, accountSid, params)
	return err
}

// CreateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) CreateApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateApplication(ctx, accountSid)
	return err
}

// DeleteApplication converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteApplication(ctx, accountSid, sid)
	return err
}

// FetchApplication converts echo context to params.
func (w *ServerInterfaceWrapper) FetchApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchApplication(ctx, accountSid, sid)
	return err
}

// UpdateApplication converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateApplication(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateApplication(ctx, accountSid, sid)
	return err
}

// ListAuthorizedConnectApp converts echo context to params.
func (w *ServerInterfaceWrapper) ListAuthorizedConnectApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAuthorizedConnectAppParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAuthorizedConnectApp(ctx, accountSid, params)
	return err
}

// FetchAuthorizedConnectApp converts echo context to params.
func (w *ServerInterfaceWrapper) FetchAuthorizedConnectApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConnectAppSid" -------------
	var connectAppSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConnectAppSid", runtime.ParamLocationPath, ctx.Param("ConnectAppSid"), &connectAppSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConnectAppSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchAuthorizedConnectApp(ctx, accountSid, connectAppSid)
	return err
}

// ListAvailablePhoneNumberCountry converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberCountryParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberCountry(ctx, accountSid, params)
	return err
}

// FetchAvailablePhoneNumberCountry converts echo context to params.
func (w *ServerInterfaceWrapper) FetchAvailablePhoneNumberCountry(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchAvailablePhoneNumberCountry(ctx, accountSid, countryCode)
	return err
}

// ListAvailablePhoneNumberLocal converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberLocal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberLocalParams
	// ------------- Optional query parameter "AreaCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "AreaCode", ctx.QueryParams(), &params.AreaCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AreaCode: %s", err))
	}

	// ------------- Optional query parameter "Contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "Contains", ctx.QueryParams(), &params.Contains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Contains: %s", err))
	}

	// ------------- Optional query parameter "SmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "SmsEnabled", ctx.QueryParams(), &params.SmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "MmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "MmsEnabled", ctx.QueryParams(), &params.MmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "VoiceEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "VoiceEnabled", ctx.QueryParams(), &params.VoiceEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter VoiceEnabled: %s", err))
	}

	// ------------- Optional query parameter "ExcludeAllAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeAllAddressRequired", ctx.QueryParams(), &params.ExcludeAllAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeAllAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeLocalAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeLocalAddressRequired", ctx.QueryParams(), &params.ExcludeLocalAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeLocalAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeForeignAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeForeignAddressRequired", ctx.QueryParams(), &params.ExcludeForeignAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeForeignAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "NearNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearNumber", ctx.QueryParams(), &params.NearNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearNumber: %s", err))
	}

	// ------------- Optional query parameter "NearLatLong" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearLatLong", ctx.QueryParams(), &params.NearLatLong)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearLatLong: %s", err))
	}

	// ------------- Optional query parameter "Distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "Distance", ctx.QueryParams(), &params.Distance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Distance: %s", err))
	}

	// ------------- Optional query parameter "InPostalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "InPostalCode", ctx.QueryParams(), &params.InPostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InPostalCode: %s", err))
	}

	// ------------- Optional query parameter "InRegion" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRegion", ctx.QueryParams(), &params.InRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRegion: %s", err))
	}

	// ------------- Optional query parameter "InRateCenter" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRateCenter", ctx.QueryParams(), &params.InRateCenter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRateCenter: %s", err))
	}

	// ------------- Optional query parameter "InLata" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLata", ctx.QueryParams(), &params.InLata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLata: %s", err))
	}

	// ------------- Optional query parameter "InLocality" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLocality", ctx.QueryParams(), &params.InLocality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLocality: %s", err))
	}

	// ------------- Optional query parameter "FaxEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "FaxEnabled", ctx.QueryParams(), &params.FaxEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FaxEnabled: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberLocal(ctx, accountSid, countryCode, params)
	return err
}

// ListAvailablePhoneNumberMachineToMachine converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberMachineToMachine(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberMachineToMachineParams
	// ------------- Optional query parameter "AreaCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "AreaCode", ctx.QueryParams(), &params.AreaCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AreaCode: %s", err))
	}

	// ------------- Optional query parameter "Contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "Contains", ctx.QueryParams(), &params.Contains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Contains: %s", err))
	}

	// ------------- Optional query parameter "SmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "SmsEnabled", ctx.QueryParams(), &params.SmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "MmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "MmsEnabled", ctx.QueryParams(), &params.MmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "VoiceEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "VoiceEnabled", ctx.QueryParams(), &params.VoiceEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter VoiceEnabled: %s", err))
	}

	// ------------- Optional query parameter "ExcludeAllAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeAllAddressRequired", ctx.QueryParams(), &params.ExcludeAllAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeAllAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeLocalAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeLocalAddressRequired", ctx.QueryParams(), &params.ExcludeLocalAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeLocalAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeForeignAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeForeignAddressRequired", ctx.QueryParams(), &params.ExcludeForeignAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeForeignAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "NearNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearNumber", ctx.QueryParams(), &params.NearNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearNumber: %s", err))
	}

	// ------------- Optional query parameter "NearLatLong" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearLatLong", ctx.QueryParams(), &params.NearLatLong)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearLatLong: %s", err))
	}

	// ------------- Optional query parameter "Distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "Distance", ctx.QueryParams(), &params.Distance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Distance: %s", err))
	}

	// ------------- Optional query parameter "InPostalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "InPostalCode", ctx.QueryParams(), &params.InPostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InPostalCode: %s", err))
	}

	// ------------- Optional query parameter "InRegion" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRegion", ctx.QueryParams(), &params.InRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRegion: %s", err))
	}

	// ------------- Optional query parameter "InRateCenter" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRateCenter", ctx.QueryParams(), &params.InRateCenter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRateCenter: %s", err))
	}

	// ------------- Optional query parameter "InLata" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLata", ctx.QueryParams(), &params.InLata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLata: %s", err))
	}

	// ------------- Optional query parameter "InLocality" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLocality", ctx.QueryParams(), &params.InLocality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLocality: %s", err))
	}

	// ------------- Optional query parameter "FaxEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "FaxEnabled", ctx.QueryParams(), &params.FaxEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FaxEnabled: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberMachineToMachine(ctx, accountSid, countryCode, params)
	return err
}

// ListAvailablePhoneNumberMobile converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberMobile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberMobileParams
	// ------------- Optional query parameter "AreaCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "AreaCode", ctx.QueryParams(), &params.AreaCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AreaCode: %s", err))
	}

	// ------------- Optional query parameter "Contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "Contains", ctx.QueryParams(), &params.Contains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Contains: %s", err))
	}

	// ------------- Optional query parameter "SmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "SmsEnabled", ctx.QueryParams(), &params.SmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "MmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "MmsEnabled", ctx.QueryParams(), &params.MmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "VoiceEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "VoiceEnabled", ctx.QueryParams(), &params.VoiceEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter VoiceEnabled: %s", err))
	}

	// ------------- Optional query parameter "ExcludeAllAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeAllAddressRequired", ctx.QueryParams(), &params.ExcludeAllAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeAllAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeLocalAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeLocalAddressRequired", ctx.QueryParams(), &params.ExcludeLocalAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeLocalAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeForeignAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeForeignAddressRequired", ctx.QueryParams(), &params.ExcludeForeignAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeForeignAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "NearNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearNumber", ctx.QueryParams(), &params.NearNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearNumber: %s", err))
	}

	// ------------- Optional query parameter "NearLatLong" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearLatLong", ctx.QueryParams(), &params.NearLatLong)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearLatLong: %s", err))
	}

	// ------------- Optional query parameter "Distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "Distance", ctx.QueryParams(), &params.Distance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Distance: %s", err))
	}

	// ------------- Optional query parameter "InPostalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "InPostalCode", ctx.QueryParams(), &params.InPostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InPostalCode: %s", err))
	}

	// ------------- Optional query parameter "InRegion" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRegion", ctx.QueryParams(), &params.InRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRegion: %s", err))
	}

	// ------------- Optional query parameter "InRateCenter" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRateCenter", ctx.QueryParams(), &params.InRateCenter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRateCenter: %s", err))
	}

	// ------------- Optional query parameter "InLata" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLata", ctx.QueryParams(), &params.InLata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLata: %s", err))
	}

	// ------------- Optional query parameter "InLocality" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLocality", ctx.QueryParams(), &params.InLocality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLocality: %s", err))
	}

	// ------------- Optional query parameter "FaxEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "FaxEnabled", ctx.QueryParams(), &params.FaxEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FaxEnabled: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberMobile(ctx, accountSid, countryCode, params)
	return err
}

// ListAvailablePhoneNumberNational converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberNational(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberNationalParams
	// ------------- Optional query parameter "AreaCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "AreaCode", ctx.QueryParams(), &params.AreaCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AreaCode: %s", err))
	}

	// ------------- Optional query parameter "Contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "Contains", ctx.QueryParams(), &params.Contains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Contains: %s", err))
	}

	// ------------- Optional query parameter "SmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "SmsEnabled", ctx.QueryParams(), &params.SmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "MmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "MmsEnabled", ctx.QueryParams(), &params.MmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "VoiceEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "VoiceEnabled", ctx.QueryParams(), &params.VoiceEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter VoiceEnabled: %s", err))
	}

	// ------------- Optional query parameter "ExcludeAllAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeAllAddressRequired", ctx.QueryParams(), &params.ExcludeAllAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeAllAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeLocalAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeLocalAddressRequired", ctx.QueryParams(), &params.ExcludeLocalAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeLocalAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeForeignAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeForeignAddressRequired", ctx.QueryParams(), &params.ExcludeForeignAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeForeignAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "NearNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearNumber", ctx.QueryParams(), &params.NearNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearNumber: %s", err))
	}

	// ------------- Optional query parameter "NearLatLong" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearLatLong", ctx.QueryParams(), &params.NearLatLong)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearLatLong: %s", err))
	}

	// ------------- Optional query parameter "Distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "Distance", ctx.QueryParams(), &params.Distance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Distance: %s", err))
	}

	// ------------- Optional query parameter "InPostalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "InPostalCode", ctx.QueryParams(), &params.InPostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InPostalCode: %s", err))
	}

	// ------------- Optional query parameter "InRegion" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRegion", ctx.QueryParams(), &params.InRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRegion: %s", err))
	}

	// ------------- Optional query parameter "InRateCenter" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRateCenter", ctx.QueryParams(), &params.InRateCenter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRateCenter: %s", err))
	}

	// ------------- Optional query parameter "InLata" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLata", ctx.QueryParams(), &params.InLata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLata: %s", err))
	}

	// ------------- Optional query parameter "InLocality" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLocality", ctx.QueryParams(), &params.InLocality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLocality: %s", err))
	}

	// ------------- Optional query parameter "FaxEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "FaxEnabled", ctx.QueryParams(), &params.FaxEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FaxEnabled: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberNational(ctx, accountSid, countryCode, params)
	return err
}

// ListAvailablePhoneNumberSharedCost converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberSharedCost(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberSharedCostParams
	// ------------- Optional query parameter "AreaCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "AreaCode", ctx.QueryParams(), &params.AreaCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AreaCode: %s", err))
	}

	// ------------- Optional query parameter "Contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "Contains", ctx.QueryParams(), &params.Contains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Contains: %s", err))
	}

	// ------------- Optional query parameter "SmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "SmsEnabled", ctx.QueryParams(), &params.SmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "MmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "MmsEnabled", ctx.QueryParams(), &params.MmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "VoiceEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "VoiceEnabled", ctx.QueryParams(), &params.VoiceEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter VoiceEnabled: %s", err))
	}

	// ------------- Optional query parameter "ExcludeAllAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeAllAddressRequired", ctx.QueryParams(), &params.ExcludeAllAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeAllAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeLocalAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeLocalAddressRequired", ctx.QueryParams(), &params.ExcludeLocalAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeLocalAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeForeignAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeForeignAddressRequired", ctx.QueryParams(), &params.ExcludeForeignAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeForeignAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "NearNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearNumber", ctx.QueryParams(), &params.NearNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearNumber: %s", err))
	}

	// ------------- Optional query parameter "NearLatLong" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearLatLong", ctx.QueryParams(), &params.NearLatLong)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearLatLong: %s", err))
	}

	// ------------- Optional query parameter "Distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "Distance", ctx.QueryParams(), &params.Distance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Distance: %s", err))
	}

	// ------------- Optional query parameter "InPostalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "InPostalCode", ctx.QueryParams(), &params.InPostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InPostalCode: %s", err))
	}

	// ------------- Optional query parameter "InRegion" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRegion", ctx.QueryParams(), &params.InRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRegion: %s", err))
	}

	// ------------- Optional query parameter "InRateCenter" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRateCenter", ctx.QueryParams(), &params.InRateCenter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRateCenter: %s", err))
	}

	// ------------- Optional query parameter "InLata" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLata", ctx.QueryParams(), &params.InLata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLata: %s", err))
	}

	// ------------- Optional query parameter "InLocality" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLocality", ctx.QueryParams(), &params.InLocality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLocality: %s", err))
	}

	// ------------- Optional query parameter "FaxEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "FaxEnabled", ctx.QueryParams(), &params.FaxEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FaxEnabled: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberSharedCost(ctx, accountSid, countryCode, params)
	return err
}

// ListAvailablePhoneNumberTollFree converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberTollFree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberTollFreeParams
	// ------------- Optional query parameter "AreaCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "AreaCode", ctx.QueryParams(), &params.AreaCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AreaCode: %s", err))
	}

	// ------------- Optional query parameter "Contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "Contains", ctx.QueryParams(), &params.Contains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Contains: %s", err))
	}

	// ------------- Optional query parameter "SmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "SmsEnabled", ctx.QueryParams(), &params.SmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "MmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "MmsEnabled", ctx.QueryParams(), &params.MmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "VoiceEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "VoiceEnabled", ctx.QueryParams(), &params.VoiceEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter VoiceEnabled: %s", err))
	}

	// ------------- Optional query parameter "ExcludeAllAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeAllAddressRequired", ctx.QueryParams(), &params.ExcludeAllAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeAllAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeLocalAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeLocalAddressRequired", ctx.QueryParams(), &params.ExcludeLocalAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeLocalAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeForeignAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeForeignAddressRequired", ctx.QueryParams(), &params.ExcludeForeignAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeForeignAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "NearNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearNumber", ctx.QueryParams(), &params.NearNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearNumber: %s", err))
	}

	// ------------- Optional query parameter "NearLatLong" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearLatLong", ctx.QueryParams(), &params.NearLatLong)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearLatLong: %s", err))
	}

	// ------------- Optional query parameter "Distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "Distance", ctx.QueryParams(), &params.Distance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Distance: %s", err))
	}

	// ------------- Optional query parameter "InPostalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "InPostalCode", ctx.QueryParams(), &params.InPostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InPostalCode: %s", err))
	}

	// ------------- Optional query parameter "InRegion" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRegion", ctx.QueryParams(), &params.InRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRegion: %s", err))
	}

	// ------------- Optional query parameter "InRateCenter" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRateCenter", ctx.QueryParams(), &params.InRateCenter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRateCenter: %s", err))
	}

	// ------------- Optional query parameter "InLata" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLata", ctx.QueryParams(), &params.InLata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLata: %s", err))
	}

	// ------------- Optional query parameter "InLocality" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLocality", ctx.QueryParams(), &params.InLocality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLocality: %s", err))
	}

	// ------------- Optional query parameter "FaxEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "FaxEnabled", ctx.QueryParams(), &params.FaxEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FaxEnabled: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberTollFree(ctx, accountSid, countryCode, params)
	return err
}

// ListAvailablePhoneNumberVoip converts echo context to params.
func (w *ServerInterfaceWrapper) ListAvailablePhoneNumberVoip(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CountryCode" -------------
	var countryCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CountryCode", runtime.ParamLocationPath, ctx.Param("CountryCode"), &countryCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CountryCode: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAvailablePhoneNumberVoipParams
	// ------------- Optional query parameter "AreaCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "AreaCode", ctx.QueryParams(), &params.AreaCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AreaCode: %s", err))
	}

	// ------------- Optional query parameter "Contains" -------------

	err = runtime.BindQueryParameter("form", true, false, "Contains", ctx.QueryParams(), &params.Contains)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Contains: %s", err))
	}

	// ------------- Optional query parameter "SmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "SmsEnabled", ctx.QueryParams(), &params.SmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter SmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "MmsEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "MmsEnabled", ctx.QueryParams(), &params.MmsEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MmsEnabled: %s", err))
	}

	// ------------- Optional query parameter "VoiceEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "VoiceEnabled", ctx.QueryParams(), &params.VoiceEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter VoiceEnabled: %s", err))
	}

	// ------------- Optional query parameter "ExcludeAllAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeAllAddressRequired", ctx.QueryParams(), &params.ExcludeAllAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeAllAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeLocalAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeLocalAddressRequired", ctx.QueryParams(), &params.ExcludeLocalAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeLocalAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "ExcludeForeignAddressRequired" -------------

	err = runtime.BindQueryParameter("form", true, false, "ExcludeForeignAddressRequired", ctx.QueryParams(), &params.ExcludeForeignAddressRequired)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ExcludeForeignAddressRequired: %s", err))
	}

	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "NearNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearNumber", ctx.QueryParams(), &params.NearNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearNumber: %s", err))
	}

	// ------------- Optional query parameter "NearLatLong" -------------

	err = runtime.BindQueryParameter("form", true, false, "NearLatLong", ctx.QueryParams(), &params.NearLatLong)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter NearLatLong: %s", err))
	}

	// ------------- Optional query parameter "Distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "Distance", ctx.QueryParams(), &params.Distance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Distance: %s", err))
	}

	// ------------- Optional query parameter "InPostalCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "InPostalCode", ctx.QueryParams(), &params.InPostalCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InPostalCode: %s", err))
	}

	// ------------- Optional query parameter "InRegion" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRegion", ctx.QueryParams(), &params.InRegion)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRegion: %s", err))
	}

	// ------------- Optional query parameter "InRateCenter" -------------

	err = runtime.BindQueryParameter("form", true, false, "InRateCenter", ctx.QueryParams(), &params.InRateCenter)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InRateCenter: %s", err))
	}

	// ------------- Optional query parameter "InLata" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLata", ctx.QueryParams(), &params.InLata)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLata: %s", err))
	}

	// ------------- Optional query parameter "InLocality" -------------

	err = runtime.BindQueryParameter("form", true, false, "InLocality", ctx.QueryParams(), &params.InLocality)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter InLocality: %s", err))
	}

	// ------------- Optional query parameter "FaxEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "FaxEnabled", ctx.QueryParams(), &params.FaxEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FaxEnabled: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListAvailablePhoneNumberVoip(ctx, accountSid, countryCode, params)
	return err
}

// FetchBalance converts echo context to params.
func (w *ServerInterfaceWrapper) FetchBalance(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchBalance(ctx, accountSid)
	return err
}

// ListCall converts echo context to params.
func (w *ServerInterfaceWrapper) ListCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCallParams
	// ------------- Optional query parameter "To" -------------

	err = runtime.BindQueryParameter("form", true, false, "To", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter To: %s", err))
	}

	// ------------- Optional query parameter "From" -------------

	err = runtime.BindQueryParameter("form", true, false, "From", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter From: %s", err))
	}

	// ------------- Optional query parameter "ParentCallSid" -------------

	err = runtime.BindQueryParameter("form", true, false, "ParentCallSid", ctx.QueryParams(), &params.ParentCallSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ParentCallSid: %s", err))
	}

	// ------------- Optional query parameter "Status" -------------

	err = runtime.BindQueryParameter("form", true, false, "Status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Status: %s", err))
	}

	// ------------- Optional query parameter "StartTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartTime", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartTime: %s", err))
	}

	// ------------- Optional query parameter "StartTime<" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartTime<", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartTime<: %s", err))
	}

	// ------------- Optional query parameter "StartTime>" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartTime>", ctx.QueryParams(), &params.StartTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartTime>: %s", err))
	}

	// ------------- Optional query parameter "EndTime" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndTime", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndTime: %s", err))
	}

	// ------------- Optional query parameter "EndTime<" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndTime<", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndTime<: %s", err))
	}

	// ------------- Optional query parameter "EndTime>" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndTime>", ctx.QueryParams(), &params.EndTime)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndTime>: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCall(ctx, accountSid, params)
	return err
}

// CreateCall converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCall(ctx, accountSid)
	return err
}

// CreateCallFeedbackSummary converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCallFeedbackSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCallFeedbackSummary(ctx, accountSid)
	return err
}

// DeleteCallFeedbackSummary converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCallFeedbackSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCallFeedbackSummary(ctx, accountSid, sid)
	return err
}

// FetchCallFeedbackSummary converts echo context to params.
func (w *ServerInterfaceWrapper) FetchCallFeedbackSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchCallFeedbackSummary(ctx, accountSid, sid)
	return err
}

// ListCallEvent converts echo context to params.
func (w *ServerInterfaceWrapper) ListCallEvent(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCallEventParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCallEvent(ctx, accountSid, callSid, params)
	return err
}

// FetchCallFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) FetchCallFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchCallFeedback(ctx, accountSid, callSid)
	return err
}

// UpdateCallFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCallFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCallFeedback(ctx, accountSid, callSid)
	return err
}

// ListCallNotification converts echo context to params.
func (w *ServerInterfaceWrapper) ListCallNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCallNotificationParams
	// ------------- Optional query parameter "Log" -------------

	err = runtime.BindQueryParameter("form", true, false, "Log", ctx.QueryParams(), &params.Log)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Log: %s", err))
	}

	// ------------- Optional query parameter "MessageDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "MessageDate", ctx.QueryParams(), &params.MessageDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageDate: %s", err))
	}

	// ------------- Optional query parameter "MessageDate<" -------------

	err = runtime.BindQueryParameter("form", true, false, "MessageDate<", ctx.QueryParams(), &params.MessageDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageDate<: %s", err))
	}

	// ------------- Optional query parameter "MessageDate>" -------------

	err = runtime.BindQueryParameter("form", true, false, "MessageDate>", ctx.QueryParams(), &params.MessageDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageDate>: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCallNotification(ctx, accountSid, callSid, params)
	return err
}

// FetchCallNotification converts echo context to params.
func (w *ServerInterfaceWrapper) FetchCallNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchCallNotification(ctx, accountSid, callSid, sid)
	return err
}

// CreatePayments converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePayments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreatePayments(ctx, accountSid, callSid)
	return err
}

// UpdatePayments converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePayments(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdatePayments(ctx, accountSid, callSid, sid)
	return err
}

// ListCallRecording converts echo context to params.
func (w *ServerInterfaceWrapper) ListCallRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCallRecordingParams
	// ------------- Optional query parameter "DateCreated" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated: %s", err))
	}

	// ------------- Optional query parameter "DateCreated<" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated<", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated<: %s", err))
	}

	// ------------- Optional query parameter "DateCreated>" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated>", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated>: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListCallRecording(ctx, accountSid, callSid, params)
	return err
}

// CreateCallRecording converts echo context to params.
func (w *ServerInterfaceWrapper) CreateCallRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateCallRecording(ctx, accountSid, callSid)
	return err
}

// DeleteCallRecording converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCallRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCallRecording(ctx, accountSid, callSid, sid)
	return err
}

// FetchCallRecording converts echo context to params.
func (w *ServerInterfaceWrapper) FetchCallRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchCallRecording(ctx, accountSid, callSid, sid)
	return err
}

// UpdateCallRecording converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCallRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCallRecording(ctx, accountSid, callSid, sid)
	return err
}

// CreateSiprec converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSiprec(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSiprec(ctx, accountSid, callSid)
	return err
}

// UpdateSiprec converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSiprec(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSiprec(ctx, accountSid, callSid, sid)
	return err
}

// CreateStream converts echo context to params.
func (w *ServerInterfaceWrapper) CreateStream(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateStream(ctx, accountSid, callSid)
	return err
}

// UpdateStream converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateStream(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateStream(ctx, accountSid, callSid, sid)
	return err
}

// DeleteCall converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteCall(ctx, accountSid, sid)
	return err
}

// FetchCall converts echo context to params.
func (w *ServerInterfaceWrapper) FetchCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchCall(ctx, accountSid, sid)
	return err
}

// UpdateCall converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateCall(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateCall(ctx, accountSid, sid)
	return err
}

// ListConference converts echo context to params.
func (w *ServerInterfaceWrapper) ListConference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListConferenceParams
	// ------------- Optional query parameter "DateCreated" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated: %s", err))
	}

	// ------------- Optional query parameter "DateCreated<" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated<", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated<: %s", err))
	}

	// ------------- Optional query parameter "DateCreated>" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated>", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated>: %s", err))
	}

	// ------------- Optional query parameter "DateUpdated" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateUpdated", ctx.QueryParams(), &params.DateUpdated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateUpdated: %s", err))
	}

	// ------------- Optional query parameter "DateUpdated<" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateUpdated<", ctx.QueryParams(), &params.DateUpdated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateUpdated<: %s", err))
	}

	// ------------- Optional query parameter "DateUpdated>" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateUpdated>", ctx.QueryParams(), &params.DateUpdated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateUpdated>: %s", err))
	}

	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "Status" -------------

	err = runtime.BindQueryParameter("form", true, false, "Status", ctx.QueryParams(), &params.Status)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Status: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListConference(ctx, accountSid, params)
	return err
}

// ListParticipant converts echo context to params.
func (w *ServerInterfaceWrapper) ListParticipant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListParticipantParams
	// ------------- Optional query parameter "Muted" -------------

	err = runtime.BindQueryParameter("form", true, false, "Muted", ctx.QueryParams(), &params.Muted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Muted: %s", err))
	}

	// ------------- Optional query parameter "Hold" -------------

	err = runtime.BindQueryParameter("form", true, false, "Hold", ctx.QueryParams(), &params.Hold)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Hold: %s", err))
	}

	// ------------- Optional query parameter "Coaching" -------------

	err = runtime.BindQueryParameter("form", true, false, "Coaching", ctx.QueryParams(), &params.Coaching)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Coaching: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListParticipant(ctx, accountSid, conferenceSid, params)
	return err
}

// CreateParticipant converts echo context to params.
func (w *ServerInterfaceWrapper) CreateParticipant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateParticipant(ctx, accountSid, conferenceSid)
	return err
}

// DeleteParticipant converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteParticipant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteParticipant(ctx, accountSid, conferenceSid, callSid)
	return err
}

// FetchParticipant converts echo context to params.
func (w *ServerInterfaceWrapper) FetchParticipant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchParticipant(ctx, accountSid, conferenceSid, callSid)
	return err
}

// UpdateParticipant converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateParticipant(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateParticipant(ctx, accountSid, conferenceSid, callSid)
	return err
}

// ListConferenceRecording converts echo context to params.
func (w *ServerInterfaceWrapper) ListConferenceRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListConferenceRecordingParams
	// ------------- Optional query parameter "DateCreated" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated: %s", err))
	}

	// ------------- Optional query parameter "DateCreated<" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated<", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated<: %s", err))
	}

	// ------------- Optional query parameter "DateCreated>" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated>", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated>: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListConferenceRecording(ctx, accountSid, conferenceSid, params)
	return err
}

// DeleteConferenceRecording converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteConferenceRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteConferenceRecording(ctx, accountSid, conferenceSid, sid)
	return err
}

// FetchConferenceRecording converts echo context to params.
func (w *ServerInterfaceWrapper) FetchConferenceRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchConferenceRecording(ctx, accountSid, conferenceSid, sid)
	return err
}

// UpdateConferenceRecording converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateConferenceRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ConferenceSid" -------------
	var conferenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ConferenceSid", runtime.ParamLocationPath, ctx.Param("ConferenceSid"), &conferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateConferenceRecording(ctx, accountSid, conferenceSid, sid)
	return err
}

// FetchConference converts echo context to params.
func (w *ServerInterfaceWrapper) FetchConference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchConference(ctx, accountSid, sid)
	return err
}

// UpdateConference converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateConference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateConference(ctx, accountSid, sid)
	return err
}

// ListConnectApp converts echo context to params.
func (w *ServerInterfaceWrapper) ListConnectApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListConnectAppParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListConnectApp(ctx, accountSid, params)
	return err
}

// DeleteConnectApp converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteConnectApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteConnectApp(ctx, accountSid, sid)
	return err
}

// FetchConnectApp converts echo context to params.
func (w *ServerInterfaceWrapper) FetchConnectApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchConnectApp(ctx, accountSid, sid)
	return err
}

// UpdateConnectApp converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateConnectApp(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateConnectApp(ctx, accountSid, sid)
	return err
}

// ListIncomingPhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncomingPhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncomingPhoneNumberParams
	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "PhoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "PhoneNumber", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PhoneNumber: %s", err))
	}

	// ------------- Optional query parameter "Origin" -------------

	err = runtime.BindQueryParameter("form", true, false, "Origin", ctx.QueryParams(), &params.Origin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Origin: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncomingPhoneNumber(ctx, accountSid, params)
	return err
}

// CreateIncomingPhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncomingPhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncomingPhoneNumber(ctx, accountSid)
	return err
}

// ListIncomingPhoneNumberLocal converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncomingPhoneNumberLocal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncomingPhoneNumberLocalParams
	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "PhoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "PhoneNumber", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PhoneNumber: %s", err))
	}

	// ------------- Optional query parameter "Origin" -------------

	err = runtime.BindQueryParameter("form", true, false, "Origin", ctx.QueryParams(), &params.Origin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Origin: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncomingPhoneNumberLocal(ctx, accountSid, params)
	return err
}

// CreateIncomingPhoneNumberLocal converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncomingPhoneNumberLocal(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncomingPhoneNumberLocal(ctx, accountSid)
	return err
}

// ListIncomingPhoneNumberMobile converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncomingPhoneNumberMobile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncomingPhoneNumberMobileParams
	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "PhoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "PhoneNumber", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PhoneNumber: %s", err))
	}

	// ------------- Optional query parameter "Origin" -------------

	err = runtime.BindQueryParameter("form", true, false, "Origin", ctx.QueryParams(), &params.Origin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Origin: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncomingPhoneNumberMobile(ctx, accountSid, params)
	return err
}

// CreateIncomingPhoneNumberMobile converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncomingPhoneNumberMobile(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncomingPhoneNumberMobile(ctx, accountSid)
	return err
}

// ListIncomingPhoneNumberTollFree converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncomingPhoneNumberTollFree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncomingPhoneNumberTollFreeParams
	// ------------- Optional query parameter "Beta" -------------

	err = runtime.BindQueryParameter("form", true, false, "Beta", ctx.QueryParams(), &params.Beta)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Beta: %s", err))
	}

	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "PhoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "PhoneNumber", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PhoneNumber: %s", err))
	}

	// ------------- Optional query parameter "Origin" -------------

	err = runtime.BindQueryParameter("form", true, false, "Origin", ctx.QueryParams(), &params.Origin)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Origin: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncomingPhoneNumberTollFree(ctx, accountSid, params)
	return err
}

// CreateIncomingPhoneNumberTollFree converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncomingPhoneNumberTollFree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncomingPhoneNumberTollFree(ctx, accountSid)
	return err
}

// ListIncomingPhoneNumberAssignedAddOn converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncomingPhoneNumberAssignedAddOn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ResourceSid" -------------
	var resourceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, ctx.Param("ResourceSid"), &resourceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ResourceSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncomingPhoneNumberAssignedAddOnParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncomingPhoneNumberAssignedAddOn(ctx, accountSid, resourceSid, params)
	return err
}

// CreateIncomingPhoneNumberAssignedAddOn converts echo context to params.
func (w *ServerInterfaceWrapper) CreateIncomingPhoneNumberAssignedAddOn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ResourceSid" -------------
	var resourceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, ctx.Param("ResourceSid"), &resourceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ResourceSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateIncomingPhoneNumberAssignedAddOn(ctx, accountSid, resourceSid)
	return err
}

// ListIncomingPhoneNumberAssignedAddOnExtension converts echo context to params.
func (w *ServerInterfaceWrapper) ListIncomingPhoneNumberAssignedAddOnExtension(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ResourceSid" -------------
	var resourceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, ctx.Param("ResourceSid"), &resourceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ResourceSid: %s", err))
	}

	// ------------- Path parameter "AssignedAddOnSid" -------------
	var assignedAddOnSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AssignedAddOnSid", runtime.ParamLocationPath, ctx.Param("AssignedAddOnSid"), &assignedAddOnSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AssignedAddOnSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListIncomingPhoneNumberAssignedAddOnExtensionParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListIncomingPhoneNumberAssignedAddOnExtension(ctx, accountSid, resourceSid, assignedAddOnSid, params)
	return err
}

// FetchIncomingPhoneNumberAssignedAddOnExtension converts echo context to params.
func (w *ServerInterfaceWrapper) FetchIncomingPhoneNumberAssignedAddOnExtension(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ResourceSid" -------------
	var resourceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, ctx.Param("ResourceSid"), &resourceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ResourceSid: %s", err))
	}

	// ------------- Path parameter "AssignedAddOnSid" -------------
	var assignedAddOnSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AssignedAddOnSid", runtime.ParamLocationPath, ctx.Param("AssignedAddOnSid"), &assignedAddOnSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AssignedAddOnSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchIncomingPhoneNumberAssignedAddOnExtension(ctx, accountSid, resourceSid, assignedAddOnSid, sid)
	return err
}

// DeleteIncomingPhoneNumberAssignedAddOn converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncomingPhoneNumberAssignedAddOn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ResourceSid" -------------
	var resourceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, ctx.Param("ResourceSid"), &resourceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ResourceSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncomingPhoneNumberAssignedAddOn(ctx, accountSid, resourceSid, sid)
	return err
}

// FetchIncomingPhoneNumberAssignedAddOn converts echo context to params.
func (w *ServerInterfaceWrapper) FetchIncomingPhoneNumberAssignedAddOn(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ResourceSid" -------------
	var resourceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ResourceSid", runtime.ParamLocationPath, ctx.Param("ResourceSid"), &resourceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ResourceSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchIncomingPhoneNumberAssignedAddOn(ctx, accountSid, resourceSid, sid)
	return err
}

// DeleteIncomingPhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteIncomingPhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteIncomingPhoneNumber(ctx, accountSid, sid)
	return err
}

// FetchIncomingPhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) FetchIncomingPhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchIncomingPhoneNumber(ctx, accountSid, sid)
	return err
}

// UpdateIncomingPhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateIncomingPhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateIncomingPhoneNumber(ctx, accountSid, sid)
	return err
}

// ListKey converts echo context to params.
func (w *ServerInterfaceWrapper) ListKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListKeyParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListKey(ctx, accountSid, params)
	return err
}

// CreateNewKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNewKey(ctx, accountSid)
	return err
}

// DeleteKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteKey(ctx, accountSid, sid)
	return err
}

// FetchKey converts echo context to params.
func (w *ServerInterfaceWrapper) FetchKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchKey(ctx, accountSid, sid)
	return err
}

// UpdateKey converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateKey(ctx, accountSid, sid)
	return err
}

// ListMessage converts echo context to params.
func (w *ServerInterfaceWrapper) ListMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMessageParams
	// ------------- Optional query parameter "To" -------------

	err = runtime.BindQueryParameter("form", true, false, "To", ctx.QueryParams(), &params.To)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter To: %s", err))
	}

	// ------------- Optional query parameter "From" -------------

	err = runtime.BindQueryParameter("form", true, false, "From", ctx.QueryParams(), &params.From)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter From: %s", err))
	}

	// ------------- Optional query parameter "DateSent" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateSent", ctx.QueryParams(), &params.DateSent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateSent: %s", err))
	}

	// ------------- Optional query parameter "DateSent<" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateSent<", ctx.QueryParams(), &params.DateSent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateSent<: %s", err))
	}

	// ------------- Optional query parameter "DateSent>" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateSent>", ctx.QueryParams(), &params.DateSent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateSent>: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMessage(ctx, accountSid, params)
	return err
}

// CreateMessage converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMessage(ctx, accountSid)
	return err
}

// CreateMessageFeedback converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMessageFeedback(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "MessageSid" -------------
	var messageSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, ctx.Param("MessageSid"), &messageSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMessageFeedback(ctx, accountSid, messageSid)
	return err
}

// ListMedia converts echo context to params.
func (w *ServerInterfaceWrapper) ListMedia(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "MessageSid" -------------
	var messageSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, ctx.Param("MessageSid"), &messageSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMediaParams
	// ------------- Optional query parameter "DateCreated" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated: %s", err))
	}

	// ------------- Optional query parameter "DateCreated<" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated<", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated<: %s", err))
	}

	// ------------- Optional query parameter "DateCreated>" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated>", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated>: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMedia(ctx, accountSid, messageSid, params)
	return err
}

// DeleteMedia converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMedia(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "MessageSid" -------------
	var messageSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, ctx.Param("MessageSid"), &messageSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMedia(ctx, accountSid, messageSid, sid)
	return err
}

// FetchMedia converts echo context to params.
func (w *ServerInterfaceWrapper) FetchMedia(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "MessageSid" -------------
	var messageSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "MessageSid", runtime.ParamLocationPath, ctx.Param("MessageSid"), &messageSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchMedia(ctx, accountSid, messageSid, sid)
	return err
}

// DeleteMessage converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteMessage(ctx, accountSid, sid)
	return err
}

// FetchMessage converts echo context to params.
func (w *ServerInterfaceWrapper) FetchMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchMessage(ctx, accountSid, sid)
	return err
}

// UpdateMessage converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMessage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMessage(ctx, accountSid, sid)
	return err
}

// ListNotification converts echo context to params.
func (w *ServerInterfaceWrapper) ListNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListNotificationParams
	// ------------- Optional query parameter "Log" -------------

	err = runtime.BindQueryParameter("form", true, false, "Log", ctx.QueryParams(), &params.Log)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Log: %s", err))
	}

	// ------------- Optional query parameter "MessageDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "MessageDate", ctx.QueryParams(), &params.MessageDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageDate: %s", err))
	}

	// ------------- Optional query parameter "MessageDate<" -------------

	err = runtime.BindQueryParameter("form", true, false, "MessageDate<", ctx.QueryParams(), &params.MessageDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageDate<: %s", err))
	}

	// ------------- Optional query parameter "MessageDate>" -------------

	err = runtime.BindQueryParameter("form", true, false, "MessageDate>", ctx.QueryParams(), &params.MessageDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter MessageDate>: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListNotification(ctx, accountSid, params)
	return err
}

// FetchNotification converts echo context to params.
func (w *ServerInterfaceWrapper) FetchNotification(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchNotification(ctx, accountSid, sid)
	return err
}

// ListOutgoingCallerId converts echo context to params.
func (w *ServerInterfaceWrapper) ListOutgoingCallerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListOutgoingCallerIdParams
	// ------------- Optional query parameter "PhoneNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "PhoneNumber", ctx.QueryParams(), &params.PhoneNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PhoneNumber: %s", err))
	}

	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListOutgoingCallerId(ctx, accountSid, params)
	return err
}

// CreateValidationRequest converts echo context to params.
func (w *ServerInterfaceWrapper) CreateValidationRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateValidationRequest(ctx, accountSid)
	return err
}

// DeleteOutgoingCallerId converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteOutgoingCallerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteOutgoingCallerId(ctx, accountSid, sid)
	return err
}

// FetchOutgoingCallerId converts echo context to params.
func (w *ServerInterfaceWrapper) FetchOutgoingCallerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchOutgoingCallerId(ctx, accountSid, sid)
	return err
}

// UpdateOutgoingCallerId converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateOutgoingCallerId(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateOutgoingCallerId(ctx, accountSid, sid)
	return err
}

// ListQueue converts echo context to params.
func (w *ServerInterfaceWrapper) ListQueue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListQueueParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListQueue(ctx, accountSid, params)
	return err
}

// CreateQueue converts echo context to params.
func (w *ServerInterfaceWrapper) CreateQueue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateQueue(ctx, accountSid)
	return err
}

// ListMember converts echo context to params.
func (w *ServerInterfaceWrapper) ListMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "QueueSid" -------------
	var queueSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "QueueSid", runtime.ParamLocationPath, ctx.Param("QueueSid"), &queueSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter QueueSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListMemberParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListMember(ctx, accountSid, queueSid, params)
	return err
}

// FetchMember converts echo context to params.
func (w *ServerInterfaceWrapper) FetchMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "QueueSid" -------------
	var queueSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "QueueSid", runtime.ParamLocationPath, ctx.Param("QueueSid"), &queueSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter QueueSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchMember(ctx, accountSid, queueSid, callSid)
	return err
}

// UpdateMember converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMember(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "QueueSid" -------------
	var queueSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "QueueSid", runtime.ParamLocationPath, ctx.Param("QueueSid"), &queueSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter QueueSid: %s", err))
	}

	// ------------- Path parameter "CallSid" -------------
	var callSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CallSid", runtime.ParamLocationPath, ctx.Param("CallSid"), &callSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateMember(ctx, accountSid, queueSid, callSid)
	return err
}

// DeleteQueue converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteQueue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteQueue(ctx, accountSid, sid)
	return err
}

// FetchQueue converts echo context to params.
func (w *ServerInterfaceWrapper) FetchQueue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchQueue(ctx, accountSid, sid)
	return err
}

// UpdateQueue converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateQueue(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateQueue(ctx, accountSid, sid)
	return err
}

// ListRecording converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecordingParams
	// ------------- Optional query parameter "DateCreated" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated: %s", err))
	}

	// ------------- Optional query parameter "DateCreated<" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated<", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated<: %s", err))
	}

	// ------------- Optional query parameter "DateCreated>" -------------

	err = runtime.BindQueryParameter("form", true, false, "DateCreated>", ctx.QueryParams(), &params.DateCreated)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DateCreated>: %s", err))
	}

	// ------------- Optional query parameter "CallSid" -------------

	err = runtime.BindQueryParameter("form", true, false, "CallSid", ctx.QueryParams(), &params.CallSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CallSid: %s", err))
	}

	// ------------- Optional query parameter "ConferenceSid" -------------

	err = runtime.BindQueryParameter("form", true, false, "ConferenceSid", ctx.QueryParams(), &params.ConferenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ConferenceSid: %s", err))
	}

	// ------------- Optional query parameter "IncludeSoftDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSoftDeleted", ctx.QueryParams(), &params.IncludeSoftDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSoftDeleted: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecording(ctx, accountSid, params)
	return err
}

// ListRecordingTranscription converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecordingTranscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "RecordingSid" -------------
	var recordingSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "RecordingSid", runtime.ParamLocationPath, ctx.Param("RecordingSid"), &recordingSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RecordingSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecordingTranscriptionParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecordingTranscription(ctx, accountSid, recordingSid, params)
	return err
}

// DeleteRecordingTranscription converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRecordingTranscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "RecordingSid" -------------
	var recordingSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "RecordingSid", runtime.ParamLocationPath, ctx.Param("RecordingSid"), &recordingSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RecordingSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRecordingTranscription(ctx, accountSid, recordingSid, sid)
	return err
}

// FetchRecordingTranscription converts echo context to params.
func (w *ServerInterfaceWrapper) FetchRecordingTranscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "RecordingSid" -------------
	var recordingSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "RecordingSid", runtime.ParamLocationPath, ctx.Param("RecordingSid"), &recordingSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter RecordingSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchRecordingTranscription(ctx, accountSid, recordingSid, sid)
	return err
}

// ListRecordingAddOnResult converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecordingAddOnResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ReferenceSid" -------------
	var referenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, ctx.Param("ReferenceSid"), &referenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ReferenceSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecordingAddOnResultParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecordingAddOnResult(ctx, accountSid, referenceSid, params)
	return err
}

// ListRecordingAddOnResultPayload converts echo context to params.
func (w *ServerInterfaceWrapper) ListRecordingAddOnResultPayload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ReferenceSid" -------------
	var referenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, ctx.Param("ReferenceSid"), &referenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ReferenceSid: %s", err))
	}

	// ------------- Path parameter "AddOnResultSid" -------------
	var addOnResultSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AddOnResultSid", runtime.ParamLocationPath, ctx.Param("AddOnResultSid"), &addOnResultSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AddOnResultSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListRecordingAddOnResultPayloadParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListRecordingAddOnResultPayload(ctx, accountSid, referenceSid, addOnResultSid, params)
	return err
}

// DeleteRecordingAddOnResultPayload converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRecordingAddOnResultPayload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ReferenceSid" -------------
	var referenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, ctx.Param("ReferenceSid"), &referenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ReferenceSid: %s", err))
	}

	// ------------- Path parameter "AddOnResultSid" -------------
	var addOnResultSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AddOnResultSid", runtime.ParamLocationPath, ctx.Param("AddOnResultSid"), &addOnResultSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AddOnResultSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRecordingAddOnResultPayload(ctx, accountSid, referenceSid, addOnResultSid, sid)
	return err
}

// FetchRecordingAddOnResultPayload converts echo context to params.
func (w *ServerInterfaceWrapper) FetchRecordingAddOnResultPayload(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ReferenceSid" -------------
	var referenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, ctx.Param("ReferenceSid"), &referenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ReferenceSid: %s", err))
	}

	// ------------- Path parameter "AddOnResultSid" -------------
	var addOnResultSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AddOnResultSid", runtime.ParamLocationPath, ctx.Param("AddOnResultSid"), &addOnResultSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AddOnResultSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchRecordingAddOnResultPayload(ctx, accountSid, referenceSid, addOnResultSid, sid)
	return err
}

// DeleteRecordingAddOnResult converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRecordingAddOnResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ReferenceSid" -------------
	var referenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, ctx.Param("ReferenceSid"), &referenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ReferenceSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRecordingAddOnResult(ctx, accountSid, referenceSid, sid)
	return err
}

// FetchRecordingAddOnResult converts echo context to params.
func (w *ServerInterfaceWrapper) FetchRecordingAddOnResult(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "ReferenceSid" -------------
	var referenceSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "ReferenceSid", runtime.ParamLocationPath, ctx.Param("ReferenceSid"), &referenceSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ReferenceSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchRecordingAddOnResult(ctx, accountSid, referenceSid, sid)
	return err
}

// DeleteRecording converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteRecording(ctx, accountSid, sid)
	return err
}

// FetchRecording converts echo context to params.
func (w *ServerInterfaceWrapper) FetchRecording(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params FetchRecordingParams
	// ------------- Optional query parameter "IncludeSoftDeleted" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSoftDeleted", ctx.QueryParams(), &params.IncludeSoftDeleted)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSoftDeleted: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchRecording(ctx, accountSid, sid, params)
	return err
}

// ListSipCredentialList converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipCredentialList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipCredentialListParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipCredentialList(ctx, accountSid, params)
	return err
}

// CreateSipCredentialList converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipCredentialList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipCredentialList(ctx, accountSid)
	return err
}

// ListSipCredential converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CredentialListSid" -------------
	var credentialListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, ctx.Param("CredentialListSid"), &credentialListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CredentialListSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipCredentialParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipCredential(ctx, accountSid, credentialListSid, params)
	return err
}

// CreateSipCredential converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CredentialListSid" -------------
	var credentialListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, ctx.Param("CredentialListSid"), &credentialListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CredentialListSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipCredential(ctx, accountSid, credentialListSid)
	return err
}

// DeleteSipCredential converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CredentialListSid" -------------
	var credentialListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, ctx.Param("CredentialListSid"), &credentialListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CredentialListSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipCredential(ctx, accountSid, credentialListSid, sid)
	return err
}

// FetchSipCredential converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CredentialListSid" -------------
	var credentialListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, ctx.Param("CredentialListSid"), &credentialListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CredentialListSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipCredential(ctx, accountSid, credentialListSid, sid)
	return err
}

// UpdateSipCredential converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSipCredential(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "CredentialListSid" -------------
	var credentialListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "CredentialListSid", runtime.ParamLocationPath, ctx.Param("CredentialListSid"), &credentialListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter CredentialListSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSipCredential(ctx, accountSid, credentialListSid, sid)
	return err
}

// DeleteSipCredentialList converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipCredentialList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipCredentialList(ctx, accountSid, sid)
	return err
}

// FetchSipCredentialList converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipCredentialList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipCredentialList(ctx, accountSid, sid)
	return err
}

// UpdateSipCredentialList converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSipCredentialList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSipCredentialList(ctx, accountSid, sid)
	return err
}

// ListSipDomain converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipDomainParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipDomain(ctx, accountSid, params)
	return err
}

// CreateSipDomain converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipDomain(ctx, accountSid)
	return err
}

// ListSipAuthCallsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipAuthCallsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipAuthCallsCredentialListMappingParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipAuthCallsCredentialListMapping(ctx, accountSid, domainSid, params)
	return err
}

// CreateSipAuthCallsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipAuthCallsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipAuthCallsCredentialListMapping(ctx, accountSid, domainSid)
	return err
}

// DeleteSipAuthCallsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipAuthCallsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipAuthCallsCredentialListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// FetchSipAuthCallsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipAuthCallsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipAuthCallsCredentialListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// ListSipAuthCallsIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipAuthCallsIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipAuthCallsIpAccessControlListMappingParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipAuthCallsIpAccessControlListMapping(ctx, accountSid, domainSid, params)
	return err
}

// CreateSipAuthCallsIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipAuthCallsIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipAuthCallsIpAccessControlListMapping(ctx, accountSid, domainSid)
	return err
}

// DeleteSipAuthCallsIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipAuthCallsIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipAuthCallsIpAccessControlListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// FetchSipAuthCallsIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipAuthCallsIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipAuthCallsIpAccessControlListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// ListSipAuthRegistrationsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipAuthRegistrationsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipAuthRegistrationsCredentialListMappingParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipAuthRegistrationsCredentialListMapping(ctx, accountSid, domainSid, params)
	return err
}

// CreateSipAuthRegistrationsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipAuthRegistrationsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipAuthRegistrationsCredentialListMapping(ctx, accountSid, domainSid)
	return err
}

// DeleteSipAuthRegistrationsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipAuthRegistrationsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipAuthRegistrationsCredentialListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// FetchSipAuthRegistrationsCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipAuthRegistrationsCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipAuthRegistrationsCredentialListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// ListSipCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipCredentialListMappingParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipCredentialListMapping(ctx, accountSid, domainSid, params)
	return err
}

// CreateSipCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipCredentialListMapping(ctx, accountSid, domainSid)
	return err
}

// DeleteSipCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipCredentialListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// FetchSipCredentialListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipCredentialListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipCredentialListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// ListSipIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipIpAccessControlListMappingParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipIpAccessControlListMapping(ctx, accountSid, domainSid, params)
	return err
}

// CreateSipIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipIpAccessControlListMapping(ctx, accountSid, domainSid)
	return err
}

// DeleteSipIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipIpAccessControlListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// FetchSipIpAccessControlListMapping converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipIpAccessControlListMapping(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "DomainSid" -------------
	var domainSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "DomainSid", runtime.ParamLocationPath, ctx.Param("DomainSid"), &domainSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter DomainSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipIpAccessControlListMapping(ctx, accountSid, domainSid, sid)
	return err
}

// DeleteSipDomain converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipDomain(ctx, accountSid, sid)
	return err
}

// FetchSipDomain converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipDomain(ctx, accountSid, sid)
	return err
}

// UpdateSipDomain converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSipDomain(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSipDomain(ctx, accountSid, sid)
	return err
}

// ListSipIpAccessControlList converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipIpAccessControlList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipIpAccessControlListParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipIpAccessControlList(ctx, accountSid, params)
	return err
}

// CreateSipIpAccessControlList converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipIpAccessControlList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipIpAccessControlList(ctx, accountSid)
	return err
}

// ListSipIpAddress converts echo context to params.
func (w *ServerInterfaceWrapper) ListSipIpAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "IpAccessControlListSid" -------------
	var ipAccessControlListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ctx.Param("IpAccessControlListSid"), &ipAccessControlListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IpAccessControlListSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSipIpAddressParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSipIpAddress(ctx, accountSid, ipAccessControlListSid, params)
	return err
}

// CreateSipIpAddress converts echo context to params.
func (w *ServerInterfaceWrapper) CreateSipIpAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "IpAccessControlListSid" -------------
	var ipAccessControlListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ctx.Param("IpAccessControlListSid"), &ipAccessControlListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IpAccessControlListSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateSipIpAddress(ctx, accountSid, ipAccessControlListSid)
	return err
}

// DeleteSipIpAddress converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipIpAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "IpAccessControlListSid" -------------
	var ipAccessControlListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ctx.Param("IpAccessControlListSid"), &ipAccessControlListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IpAccessControlListSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipIpAddress(ctx, accountSid, ipAccessControlListSid, sid)
	return err
}

// FetchSipIpAddress converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipIpAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "IpAccessControlListSid" -------------
	var ipAccessControlListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ctx.Param("IpAccessControlListSid"), &ipAccessControlListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IpAccessControlListSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipIpAddress(ctx, accountSid, ipAccessControlListSid, sid)
	return err
}

// UpdateSipIpAddress converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSipIpAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "IpAccessControlListSid" -------------
	var ipAccessControlListSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "IpAccessControlListSid", runtime.ParamLocationPath, ctx.Param("IpAccessControlListSid"), &ipAccessControlListSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IpAccessControlListSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSipIpAddress(ctx, accountSid, ipAccessControlListSid, sid)
	return err
}

// DeleteSipIpAccessControlList converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSipIpAccessControlList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSipIpAccessControlList(ctx, accountSid, sid)
	return err
}

// FetchSipIpAccessControlList converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSipIpAccessControlList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSipIpAccessControlList(ctx, accountSid, sid)
	return err
}

// UpdateSipIpAccessControlList converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSipIpAccessControlList(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSipIpAccessControlList(ctx, accountSid, sid)
	return err
}

// ListShortCode converts echo context to params.
func (w *ServerInterfaceWrapper) ListShortCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListShortCodeParams
	// ------------- Optional query parameter "FriendlyName" -------------

	err = runtime.BindQueryParameter("form", true, false, "FriendlyName", ctx.QueryParams(), &params.FriendlyName)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter FriendlyName: %s", err))
	}

	// ------------- Optional query parameter "ShortCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "ShortCode", ctx.QueryParams(), &params.ShortCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ShortCode: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListShortCode(ctx, accountSid, params)
	return err
}

// FetchShortCode converts echo context to params.
func (w *ServerInterfaceWrapper) FetchShortCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchShortCode(ctx, accountSid, sid)
	return err
}

// UpdateShortCode converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateShortCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateShortCode(ctx, accountSid, sid)
	return err
}

// ListSigningKey converts echo context to params.
func (w *ServerInterfaceWrapper) ListSigningKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListSigningKeyParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListSigningKey(ctx, accountSid, params)
	return err
}

// CreateNewSigningKey converts echo context to params.
func (w *ServerInterfaceWrapper) CreateNewSigningKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateNewSigningKey(ctx, accountSid)
	return err
}

// DeleteSigningKey converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteSigningKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteSigningKey(ctx, accountSid, sid)
	return err
}

// FetchSigningKey converts echo context to params.
func (w *ServerInterfaceWrapper) FetchSigningKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchSigningKey(ctx, accountSid, sid)
	return err
}

// UpdateSigningKey converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSigningKey(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateSigningKey(ctx, accountSid, sid)
	return err
}

// CreateToken converts echo context to params.
func (w *ServerInterfaceWrapper) CreateToken(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateToken(ctx, accountSid)
	return err
}

// ListTranscription converts echo context to params.
func (w *ServerInterfaceWrapper) ListTranscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListTranscriptionParams
	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListTranscription(ctx, accountSid, params)
	return err
}

// DeleteTranscription converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteTranscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteTranscription(ctx, accountSid, sid)
	return err
}

// FetchTranscription converts echo context to params.
func (w *ServerInterfaceWrapper) FetchTranscription(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchTranscription(ctx, accountSid, sid)
	return err
}

// ListUsageRecord converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecord(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecord(ctx, accountSid, params)
	return err
}

// ListUsageRecordAllTime converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordAllTime(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordAllTimeParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordAllTime(ctx, accountSid, params)
	return err
}

// ListUsageRecordDaily converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordDaily(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordDailyParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordDaily(ctx, accountSid, params)
	return err
}

// ListUsageRecordLastMonth converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordLastMonth(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordLastMonthParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordLastMonth(ctx, accountSid, params)
	return err
}

// ListUsageRecordMonthly converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordMonthly(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordMonthlyParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordMonthly(ctx, accountSid, params)
	return err
}

// ListUsageRecordThisMonth converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordThisMonth(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordThisMonthParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordThisMonth(ctx, accountSid, params)
	return err
}

// ListUsageRecordToday converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordToday(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordTodayParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordToday(ctx, accountSid, params)
	return err
}

// ListUsageRecordYearly converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordYearly(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordYearlyParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordYearly(ctx, accountSid, params)
	return err
}

// ListUsageRecordYesterday converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageRecordYesterday(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageRecordYesterdayParams
	// ------------- Optional query parameter "Category" -------------

	err = runtime.BindQueryParameter("form", true, false, "Category", ctx.QueryParams(), &params.Category)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Category: %s", err))
	}

	// ------------- Optional query parameter "StartDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "StartDate", ctx.QueryParams(), &params.StartDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter StartDate: %s", err))
	}

	// ------------- Optional query parameter "EndDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "EndDate", ctx.QueryParams(), &params.EndDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter EndDate: %s", err))
	}

	// ------------- Optional query parameter "IncludeSubaccounts" -------------

	err = runtime.BindQueryParameter("form", true, false, "IncludeSubaccounts", ctx.QueryParams(), &params.IncludeSubaccounts)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter IncludeSubaccounts: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageRecordYesterday(ctx, accountSid, params)
	return err
}

// ListUsageTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) ListUsageTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListUsageTriggerParams
	// ------------- Optional query parameter "Recurring" -------------

	err = runtime.BindQueryParameter("form", true, false, "Recurring", ctx.QueryParams(), &params.Recurring)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Recurring: %s", err))
	}

	// ------------- Optional query parameter "TriggerBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "TriggerBy", ctx.QueryParams(), &params.TriggerBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter TriggerBy: %s", err))
	}

	// ------------- Optional query parameter "UsageCategory" -------------

	err = runtime.BindQueryParameter("form", true, false, "UsageCategory", ctx.QueryParams(), &params.UsageCategory)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter UsageCategory: %s", err))
	}

	// ------------- Optional query parameter "PageSize" -------------

	err = runtime.BindQueryParameter("form", true, false, "PageSize", ctx.QueryParams(), &params.PageSize)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter PageSize: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ListUsageTrigger(ctx, accountSid, params)
	return err
}

// CreateUsageTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) CreateUsageTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateUsageTrigger(ctx, accountSid)
	return err
}

// DeleteUsageTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUsageTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteUsageTrigger(ctx, accountSid, sid)
	return err
}

// FetchUsageTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) FetchUsageTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchUsageTrigger(ctx, accountSid, sid)
	return err
}

// UpdateUsageTrigger converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateUsageTrigger(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "AccountSid" -------------
	var accountSid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "AccountSid", runtime.ParamLocationPath, ctx.Param("AccountSid"), &accountSid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter AccountSid: %s", err))
	}

	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateUsageTrigger(ctx, accountSid, sid)
	return err
}

// FetchAccount converts echo context to params.
func (w *ServerInterfaceWrapper) FetchAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.FetchAccount(ctx, sid)
	return err
}

// UpdateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "Sid" -------------
	var sid string

	err = runtime.BindStyledParameterWithLocation("simple", false, "Sid", runtime.ParamLocationPath, ctx.Param("Sid"), &sid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Sid: %s", err))
	}

	ctx.Set(AccountSid_authTokenScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.UpdateAccount(ctx, sid)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/2010-04-01/Accounts.json", wrapper.ListAccount)
	router.POST(baseURL+"/2010-04-01/Accounts.json", wrapper.CreateAccount)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Addresses.json", wrapper.ListAddress)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Addresses.json", wrapper.CreateAddress)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Addresses/:AddressSid/DependentPhoneNumbers.json", wrapper.ListDependentPhoneNumber)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Addresses/:Sid.json", wrapper.DeleteAddress)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Addresses/:Sid.json", wrapper.FetchAddress)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Addresses/:Sid.json", wrapper.UpdateAddress)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Applications.json", wrapper.ListApplication)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Applications.json", wrapper.CreateApplication)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Applications/:Sid.json", wrapper.DeleteApplication)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Applications/:Sid.json", wrapper.FetchApplication)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Applications/:Sid.json", wrapper.UpdateApplication)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AuthorizedConnectApps.json", wrapper.ListAuthorizedConnectApp)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AuthorizedConnectApps/:ConnectAppSid.json", wrapper.FetchAuthorizedConnectApp)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers.json", wrapper.ListAvailablePhoneNumberCountry)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode.json", wrapper.FetchAvailablePhoneNumberCountry)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode/Local.json", wrapper.ListAvailablePhoneNumberLocal)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode/MachineToMachine.json", wrapper.ListAvailablePhoneNumberMachineToMachine)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode/Mobile.json", wrapper.ListAvailablePhoneNumberMobile)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode/National.json", wrapper.ListAvailablePhoneNumberNational)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode/SharedCost.json", wrapper.ListAvailablePhoneNumberSharedCost)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode/TollFree.json", wrapper.ListAvailablePhoneNumberTollFree)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/AvailablePhoneNumbers/:CountryCode/Voip.json", wrapper.ListAvailablePhoneNumberVoip)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Balance.json", wrapper.FetchBalance)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls.json", wrapper.ListCall)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls.json", wrapper.CreateCall)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/FeedbackSummary.json", wrapper.CreateCallFeedbackSummary)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/FeedbackSummary/:Sid.json", wrapper.DeleteCallFeedbackSummary)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/FeedbackSummary/:Sid.json", wrapper.FetchCallFeedbackSummary)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Events.json", wrapper.ListCallEvent)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Feedback.json", wrapper.FetchCallFeedback)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Feedback.json", wrapper.UpdateCallFeedback)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Notifications.json", wrapper.ListCallNotification)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Notifications/:Sid.json", wrapper.FetchCallNotification)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Payments.json", wrapper.CreatePayments)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Payments/:Sid.json", wrapper.UpdatePayments)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Recordings.json", wrapper.ListCallRecording)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Recordings.json", wrapper.CreateCallRecording)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Recordings/:Sid.json", wrapper.DeleteCallRecording)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Recordings/:Sid.json", wrapper.FetchCallRecording)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Recordings/:Sid.json", wrapper.UpdateCallRecording)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Siprec.json", wrapper.CreateSiprec)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Siprec/:Sid.json", wrapper.UpdateSiprec)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Streams.json", wrapper.CreateStream)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:CallSid/Streams/:Sid.json", wrapper.UpdateStream)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:Sid.json", wrapper.DeleteCall)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:Sid.json", wrapper.FetchCall)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Calls/:Sid.json", wrapper.UpdateCall)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences.json", wrapper.ListConference)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Participants.json", wrapper.ListParticipant)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Participants.json", wrapper.CreateParticipant)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Participants/:CallSid.json", wrapper.DeleteParticipant)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Participants/:CallSid.json", wrapper.FetchParticipant)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Participants/:CallSid.json", wrapper.UpdateParticipant)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Recordings.json", wrapper.ListConferenceRecording)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Recordings/:Sid.json", wrapper.DeleteConferenceRecording)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Recordings/:Sid.json", wrapper.FetchConferenceRecording)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:ConferenceSid/Recordings/:Sid.json", wrapper.UpdateConferenceRecording)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:Sid.json", wrapper.FetchConference)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Conferences/:Sid.json", wrapper.UpdateConference)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/ConnectApps.json", wrapper.ListConnectApp)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/ConnectApps/:Sid.json", wrapper.DeleteConnectApp)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/ConnectApps/:Sid.json", wrapper.FetchConnectApp)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/ConnectApps/:Sid.json", wrapper.UpdateConnectApp)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers.json", wrapper.ListIncomingPhoneNumber)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers.json", wrapper.CreateIncomingPhoneNumber)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/Local.json", wrapper.ListIncomingPhoneNumberLocal)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/Local.json", wrapper.CreateIncomingPhoneNumberLocal)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/Mobile.json", wrapper.ListIncomingPhoneNumberMobile)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/Mobile.json", wrapper.CreateIncomingPhoneNumberMobile)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/TollFree.json", wrapper.ListIncomingPhoneNumberTollFree)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/TollFree.json", wrapper.CreateIncomingPhoneNumberTollFree)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:ResourceSid/AssignedAddOns.json", wrapper.ListIncomingPhoneNumberAssignedAddOn)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:ResourceSid/AssignedAddOns.json", wrapper.CreateIncomingPhoneNumberAssignedAddOn)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:ResourceSid/AssignedAddOns/:AssignedAddOnSid/Extensions.json", wrapper.ListIncomingPhoneNumberAssignedAddOnExtension)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:ResourceSid/AssignedAddOns/:AssignedAddOnSid/Extensions/:Sid.json", wrapper.FetchIncomingPhoneNumberAssignedAddOnExtension)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:ResourceSid/AssignedAddOns/:Sid.json", wrapper.DeleteIncomingPhoneNumberAssignedAddOn)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:ResourceSid/AssignedAddOns/:Sid.json", wrapper.FetchIncomingPhoneNumberAssignedAddOn)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:Sid.json", wrapper.DeleteIncomingPhoneNumber)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:Sid.json", wrapper.FetchIncomingPhoneNumber)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/IncomingPhoneNumbers/:Sid.json", wrapper.UpdateIncomingPhoneNumber)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Keys.json", wrapper.ListKey)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Keys.json", wrapper.CreateNewKey)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Keys/:Sid.json", wrapper.DeleteKey)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Keys/:Sid.json", wrapper.FetchKey)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Keys/:Sid.json", wrapper.UpdateKey)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages.json", wrapper.ListMessage)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages.json", wrapper.CreateMessage)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages/:MessageSid/Feedback.json", wrapper.CreateMessageFeedback)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages/:MessageSid/Media.json", wrapper.ListMedia)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages/:MessageSid/Media/:Sid.json", wrapper.DeleteMedia)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages/:MessageSid/Media/:Sid.json", wrapper.FetchMedia)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages/:Sid.json", wrapper.DeleteMessage)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages/:Sid.json", wrapper.FetchMessage)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Messages/:Sid.json", wrapper.UpdateMessage)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Notifications.json", wrapper.ListNotification)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Notifications/:Sid.json", wrapper.FetchNotification)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/OutgoingCallerIds.json", wrapper.ListOutgoingCallerId)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/OutgoingCallerIds.json", wrapper.CreateValidationRequest)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/OutgoingCallerIds/:Sid.json", wrapper.DeleteOutgoingCallerId)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/OutgoingCallerIds/:Sid.json", wrapper.FetchOutgoingCallerId)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/OutgoingCallerIds/:Sid.json", wrapper.UpdateOutgoingCallerId)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues.json", wrapper.ListQueue)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues.json", wrapper.CreateQueue)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues/:QueueSid/Members.json", wrapper.ListMember)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues/:QueueSid/Members/:CallSid.json", wrapper.FetchMember)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues/:QueueSid/Members/:CallSid.json", wrapper.UpdateMember)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues/:Sid.json", wrapper.DeleteQueue)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues/:Sid.json", wrapper.FetchQueue)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Queues/:Sid.json", wrapper.UpdateQueue)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings.json", wrapper.ListRecording)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:RecordingSid/Transcriptions.json", wrapper.ListRecordingTranscription)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:RecordingSid/Transcriptions/:Sid.json", wrapper.DeleteRecordingTranscription)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:RecordingSid/Transcriptions/:Sid.json", wrapper.FetchRecordingTranscription)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:ReferenceSid/AddOnResults.json", wrapper.ListRecordingAddOnResult)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:ReferenceSid/AddOnResults/:AddOnResultSid/Payloads.json", wrapper.ListRecordingAddOnResultPayload)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:ReferenceSid/AddOnResults/:AddOnResultSid/Payloads/:Sid.json", wrapper.DeleteRecordingAddOnResultPayload)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:ReferenceSid/AddOnResults/:AddOnResultSid/Payloads/:Sid.json", wrapper.FetchRecordingAddOnResultPayload)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:ReferenceSid/AddOnResults/:Sid.json", wrapper.DeleteRecordingAddOnResult)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:ReferenceSid/AddOnResults/:Sid.json", wrapper.FetchRecordingAddOnResult)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:Sid.json", wrapper.DeleteRecording)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Recordings/:Sid.json", wrapper.FetchRecording)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists.json", wrapper.ListSipCredentialList)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists.json", wrapper.CreateSipCredentialList)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:CredentialListSid/Credentials.json", wrapper.ListSipCredential)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:CredentialListSid/Credentials.json", wrapper.CreateSipCredential)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:CredentialListSid/Credentials/:Sid.json", wrapper.DeleteSipCredential)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:CredentialListSid/Credentials/:Sid.json", wrapper.FetchSipCredential)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:CredentialListSid/Credentials/:Sid.json", wrapper.UpdateSipCredential)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:Sid.json", wrapper.DeleteSipCredentialList)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:Sid.json", wrapper.FetchSipCredentialList)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/CredentialLists/:Sid.json", wrapper.UpdateSipCredentialList)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains.json", wrapper.ListSipDomain)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains.json", wrapper.CreateSipDomain)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/CredentialListMappings.json", wrapper.ListSipAuthCallsCredentialListMapping)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/CredentialListMappings.json", wrapper.CreateSipAuthCallsCredentialListMapping)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/CredentialListMappings/:Sid.json", wrapper.DeleteSipAuthCallsCredentialListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/CredentialListMappings/:Sid.json", wrapper.FetchSipAuthCallsCredentialListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/IpAccessControlListMappings.json", wrapper.ListSipAuthCallsIpAccessControlListMapping)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/IpAccessControlListMappings.json", wrapper.CreateSipAuthCallsIpAccessControlListMapping)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/IpAccessControlListMappings/:Sid.json", wrapper.DeleteSipAuthCallsIpAccessControlListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Calls/IpAccessControlListMappings/:Sid.json", wrapper.FetchSipAuthCallsIpAccessControlListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Registrations/CredentialListMappings.json", wrapper.ListSipAuthRegistrationsCredentialListMapping)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Registrations/CredentialListMappings.json", wrapper.CreateSipAuthRegistrationsCredentialListMapping)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Registrations/CredentialListMappings/:Sid.json", wrapper.DeleteSipAuthRegistrationsCredentialListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/Auth/Registrations/CredentialListMappings/:Sid.json", wrapper.FetchSipAuthRegistrationsCredentialListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/CredentialListMappings.json", wrapper.ListSipCredentialListMapping)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/CredentialListMappings.json", wrapper.CreateSipCredentialListMapping)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/CredentialListMappings/:Sid.json", wrapper.DeleteSipCredentialListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/CredentialListMappings/:Sid.json", wrapper.FetchSipCredentialListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/IpAccessControlListMappings.json", wrapper.ListSipIpAccessControlListMapping)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/IpAccessControlListMappings.json", wrapper.CreateSipIpAccessControlListMapping)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/IpAccessControlListMappings/:Sid.json", wrapper.DeleteSipIpAccessControlListMapping)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:DomainSid/IpAccessControlListMappings/:Sid.json", wrapper.FetchSipIpAccessControlListMapping)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:Sid.json", wrapper.DeleteSipDomain)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:Sid.json", wrapper.FetchSipDomain)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/Domains/:Sid.json", wrapper.UpdateSipDomain)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists.json", wrapper.ListSipIpAccessControlList)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists.json", wrapper.CreateSipIpAccessControlList)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:IpAccessControlListSid/IpAddresses.json", wrapper.ListSipIpAddress)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:IpAccessControlListSid/IpAddresses.json", wrapper.CreateSipIpAddress)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:IpAccessControlListSid/IpAddresses/:Sid.json", wrapper.DeleteSipIpAddress)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:IpAccessControlListSid/IpAddresses/:Sid.json", wrapper.FetchSipIpAddress)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:IpAccessControlListSid/IpAddresses/:Sid.json", wrapper.UpdateSipIpAddress)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:Sid.json", wrapper.DeleteSipIpAccessControlList)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:Sid.json", wrapper.FetchSipIpAccessControlList)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SIP/IpAccessControlLists/:Sid.json", wrapper.UpdateSipIpAccessControlList)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SMS/ShortCodes.json", wrapper.ListShortCode)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SMS/ShortCodes/:Sid.json", wrapper.FetchShortCode)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SMS/ShortCodes/:Sid.json", wrapper.UpdateShortCode)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SigningKeys.json", wrapper.ListSigningKey)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SigningKeys.json", wrapper.CreateNewSigningKey)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/SigningKeys/:Sid.json", wrapper.DeleteSigningKey)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/SigningKeys/:Sid.json", wrapper.FetchSigningKey)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/SigningKeys/:Sid.json", wrapper.UpdateSigningKey)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Tokens.json", wrapper.CreateToken)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Transcriptions.json", wrapper.ListTranscription)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Transcriptions/:Sid.json", wrapper.DeleteTranscription)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Transcriptions/:Sid.json", wrapper.FetchTranscription)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records.json", wrapper.ListUsageRecord)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/AllTime.json", wrapper.ListUsageRecordAllTime)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/Daily.json", wrapper.ListUsageRecordDaily)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/LastMonth.json", wrapper.ListUsageRecordLastMonth)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/Monthly.json", wrapper.ListUsageRecordMonthly)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/ThisMonth.json", wrapper.ListUsageRecordThisMonth)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/Today.json", wrapper.ListUsageRecordToday)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/Yearly.json", wrapper.ListUsageRecordYearly)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Records/Yesterday.json", wrapper.ListUsageRecordYesterday)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Triggers.json", wrapper.ListUsageTrigger)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Triggers.json", wrapper.CreateUsageTrigger)
	router.DELETE(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Triggers/:Sid.json", wrapper.DeleteUsageTrigger)
	router.GET(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Triggers/:Sid.json", wrapper.FetchUsageTrigger)
	router.POST(baseURL+"/2010-04-01/Accounts/:AccountSid/Usage/Triggers/:Sid.json", wrapper.UpdateUsageTrigger)
	router.GET(baseURL+"/2010-04-01/Accounts/:Sid.json", wrapper.FetchAccount)
	router.POST(baseURL+"/2010-04-01/Accounts/:Sid.json", wrapper.UpdateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rHvNuGjTDA8JZmspFxwnxue2VELLsvqnjaNlXtaOFLxqO0qmsDm94SgC0YDjZLy+5IQKqV43lop4QqQ+",
	"Xa/tcePEwEvNwq5olOG4RNd0vLk00LamoCLCsGMcO/qCEDMc4a0+cSy2/RcJ+UFD3vDJ+kUGRRoXGLxN",
	"OTfJOptfGo2essv1pbK0vkwiwtqHdlHUvysmpv59E9n6ncxkqpWkmtdGkVt6CDy1laPV3BCp9S+ZY1bu",
	"XUK5Jb5dpWugAfqNLHABxmdYxQVsBlKQCpBnGcOZxpiyIMZsmmnaVy5aWL9k7kRrFdaQRcMIqwZXMeBE",
	"wN034cL2zLRBpUPzRrrTunFwFZpM98uYkmvCOkChtFCLck9vBtIxgk9GXYA6TBr/5vEFbtZygKm87gj7",
	"fPhr0H16OdWSgRPYyiWHdLva2vOKfMLb84pdoRCVH0Mcx0NFE+IBEh4g4QESHiDhARIeIOEBEh4g4QES",
	"HiDhARIeIOEBEh4g4QESHiDhARIeIOEBEh4g4QESHiDhARIeIOEBEh4g4QESHiDhARIeIOEBEh4g8WgB",
	"EnCO8+gIj47w6AiPjvDoCI+O8OgIj47w6AiPjvDoCI+O8OgIj47w6AiPjvDoCI+O8OgIj47w6AiPjvDo",
	"CI+O8OgIj47w6AiPjvDoCI+O8OgIj454tOgIvb2H4Nj2EAkPkfAQCQ+R8BAJD5HwEAkPkfAQCQ+R8BAJ",
	"D5HwEAkPkfAQCQ+R8BAJD5HwEAkPkfAQCQ+R8BAJD5HwEAkPkfAQCQ+R8BAJD5HwEAkPkXi0EAnr0/b4",
	"CI+P8PgIj4/w+AiPj/D4CI+P8PgIj4/w+AiPj/D4CI+P8PgIj4/w+AiPj/D4CI+P8PgIj4/w+AiPj/D4",
	"CI+P8PgIj4/w+AiPj/D4CI+PeLT4CL2ofAgJD5HwEAkPkfAQCQ+R8BAJD5HwEAkPkfAQCQ+R8BAJD5Hw",
	"EAkPkfAQCQ+R8BAJD5HwEAkPkfAQCQ+R8BAJD5HwEAkPkfAQCQ+R8BAJD5F47BAJHmEfQMKjIzw6wqMj",
	"PDrCoyM8OsKjIzw6wqMjPDrCoyM8OsKjIzw6wqMjPDrCoyM8OsKjIzw6wqMjPDrCoyM8OsKjIzw6wqMj",
	"PDrCoyM8OsKjIx4vOmJBsPD5NTw8wsMjPDzCwyM8PMLDIzw8wsMjPDzCwyM8PMLDIzw8wsMjPDzCwyM8",
	"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",
	"DPIxkwD9pDzqo/mMxqRUu/UJp7G5DENcOnxjUCmbm0HncoaGhvotDrVIcA63nGFsDTYUMujDzYWR4YXm",
	"8rOJTDAyPHC0FfQUzPFk3sRay2NrOCvgk01D/aqps2yzKz0HzqfLw6Ea6tCPcjioCSVhrJ69fs9YR2tg",
	"oKuJPHWHvtdFot7NsvIkhe79M6pcE5d4TlNBwh0SaW1wwJp6Gxyu+cvbl/FUWtKenrdVV1XtOlxjrp5z",
	"n4DXNQ8G8Bn6tpJipBSpANysIEj0gZ9OS3kgcrT+FcXoBItLooxYM2EJaqVKfYMXNlpFUDgdoXGY83y9",
	"9hGdgP91jqXFR+UJre206jd2pVvRmOBF+V6IlielDxqiFtgt+WJQT25eAKjcUMU/cJytrQO8c+sr2euA",
	"kL1OKOliSLoZk/0OKNnvhJKXHVDyshNKXnVAyatOKHndASWvO6HkTQeUvOmEkrcdUPK2E0redUDJu04o",
	"+XsHlPy9C0o6YCedcJP9Dnj9fie8fr8DXr/fCa/f72JyupmdDnj9fie8fr8DXr/fCa/f74DX73fC6/c7",
	"4PX7nfD6/Q54/X4nvH6/A16/3wmv3++A1+93wus72MSd7OGXHfD6l53w+pcd8PqXnfD6lx3w+ped8PqX",
	"XSyTbtZJB7z+ZSe8/mUHvP5lJ7z+ZQe8/mUnvP5lB7z+ZSe8/mUHvP5lJ7z+ZQe8/mUnvL6DrdPJznnV",
	"Aa9/1Qmvf9UBr3/VCa9/1QGvf9UJr3/VAa9/1Qmvf9XFgu1mxXbA6191wutfdcDrX3XC6191wOtfdcLr",
	"X3XA6191wutfdcDrX3XC6ztYsJ2s19cd8PrXnfD61x3w+ted8PrXHfD6153w+tcd8PrXnfD61x3w+ted",
	"8PrXXWydbvZOB7z+dSe8/nUHvP51J7z+dQe8/nUnvP51B7z+dSe8voNl0skqedMBr3/TCa9/0wGvf9MJ",
	"r3/TAa9/0wmvf9MBr3/TCa9/0wGvf9MJr3/TAa9/0wmvf9PFJu5mF3fA6990wuvfdMDr33TC6990wOvf",
	"dMLrO5icTubmbQe8/m0nvP5tB7z+bSe8/m0HvP5tJ7z+bQe8/m0nvP5tB7z+bSe8/m0HvP5tJ7z+bQe8",
	"/m0nvP5tF+ykG37SAa9/2wmvf9sBr3/bCa/vYEg6GZF3HfD6d53w+ncd8Pp3nfD6dx3w+ned8Pp3HfD6",
	"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",
	"sCkAmwKwKQCbArApAJsCsCkAmwKwKQCbArApAJsCsCkAmwKwKQCbArApAJsCsCkAmwKwKQCbArApAJsC",
	"sCkAmwKwKQCbArApAJsCsCkAm7oAbEqwVHcGAbMGuimHwQSE04MinC4NnmODvE3rgJzsVwLEKUCcAsQp",
	"QJwCxClAnALEKUCcAsQpQJwCxClAnALEKUCcAsQpQJwCxClAnALEKUCcAsQpQJwCxClAnALEKUCcAsQp",
	"QJwCxClAnALEKUCcAsQpQJy6AHGyCIF18E0WARPQTQ+KbrqdULle/iaQZOtAm/JPBHBTADcFcFMANwVw",
	"UwA3BXBTADcFcFMANwVwUwA3BXBTADcFcFMANwVwUwA3BXBTADcFcFMANwVwUwA3BXBTADcFcFMANwVw",
	"UwA3BXBTADcFcFMAN3UB3KTZ3fr5m3IYTEA4PSzCicd43h7dpJ9uC2yyzwZQUwA1BVBTADUFUFMANQVQ",
	"UwA1BVBTADUFUFMANQVQUwA1BVBTADUFUFMANQVQUwA1BVBTADUFUFMANQVQUwA1BVBTADUFUFMANQVQ",
	"UwA1BVBTADU9PqgJwCzr4Jn0CwHL9KBYps8Ei41K0c0JFi1RTeYbAdYUYE0B1hRgTQHWFGBNAdYUYE0B",
	"1hRgTQHWFGBNAdYUYE0B1hRgTQHWFGBNAdYUYE0B1hRgTQHWFGBNAdYUYE0B1hRgTQHWFGBNAdYUYE0B",
	"1hRgTV2ANc0NmmUNXJPBvwRg0wMDmzTPWydR09y90RrWVDwfkE0B2RSQTQHZFJBNAdkUkE0B2RSQTQHZ",
	"FJBNAdkUkE0B2RSQTQHZFJBNAdkUkE0B2RSQTQHZFJBNAdkUkE0B2RSQTQHZFJBNAdkUkE0B2RSQTQHZ",
	"1AFkkwO0rAVusi8FfNOD4JtuBR2PiZANsKbfyXDC+RdpxJpxaKM5zxAf5fJOEDnhCVhBFudUbuPa8Uhs",
	"WJB7ta/st9GQJJyNKRtrrqWZkGPAmSSxvpbiL0a2W7zCUa8JS2XH85gYKtuFAwRRjWB6WaS1CiT0btJP",
	"l0blwZ5yGQvur0EPDSwmaNADKWmQjQP3QlODx+iUIZJO1Rzd4yQjoIa6P0dogJNE0ZQMoBGJmDn3rm2p",
	"QVZdu8drYVTQe3PCozt/1DuauwRj9tOtlGw9f5ag0YiSJC6BxxZnr5g+WH09fbAr7OSBu3CglUDzmSGJ",
	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
