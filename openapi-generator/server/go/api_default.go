/*
 * Twilio - Api
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.29.1
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"CreateAccount",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts.json",
			c.CreateAccount,
		},
		{
			"CreateAddress",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Addresses.json",
			c.CreateAddress,
		},
		{
			"CreateApplication",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Applications.json",
			c.CreateApplication,
		},
		{
			"CreateCall",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls.json",
			c.CreateCall,
		},
		{
			"CreateCallFeedbackSummary",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary.json",
			c.CreateCallFeedbackSummary,
		},
		{
			"CreateCallRecording",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json",
			c.CreateCallRecording,
		},
		{
			"CreateIncomingPhoneNumber",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json",
			c.CreateIncomingPhoneNumber,
		},
		{
			"CreateIncomingPhoneNumberAssignedAddOn",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json",
			c.CreateIncomingPhoneNumberAssignedAddOn,
		},
		{
			"CreateIncomingPhoneNumberLocal",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json",
			c.CreateIncomingPhoneNumberLocal,
		},
		{
			"CreateIncomingPhoneNumberMobile",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json",
			c.CreateIncomingPhoneNumberMobile,
		},
		{
			"CreateIncomingPhoneNumberTollFree",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json",
			c.CreateIncomingPhoneNumberTollFree,
		},
		{
			"CreateMessage",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Messages.json",
			c.CreateMessage,
		},
		{
			"CreateMessageFeedback",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Feedback.json",
			c.CreateMessageFeedback,
		},
		{
			"CreateNewKey",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Keys.json",
			c.CreateNewKey,
		},
		{
			"CreateNewSigningKey",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SigningKeys.json",
			c.CreateNewSigningKey,
		},
		{
			"CreateParticipant",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json",
			c.CreateParticipant,
		},
		{
			"CreatePayments",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments.json",
			c.CreatePayments,
		},
		{
			"CreateQueue",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Queues.json",
			c.CreateQueue,
		},
		{
			"CreateSipAuthCallsCredentialListMapping",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json",
			c.CreateSipAuthCallsCredentialListMapping,
		},
		{
			"CreateSipAuthCallsIpAccessControlListMapping",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json",
			c.CreateSipAuthCallsIpAccessControlListMapping,
		},
		{
			"CreateSipAuthRegistrationsCredentialListMapping",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json",
			c.CreateSipAuthRegistrationsCredentialListMapping,
		},
		{
			"CreateSipCredential",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json",
			c.CreateSipCredential,
		},
		{
			"CreateSipCredentialList",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json",
			c.CreateSipCredentialList,
		},
		{
			"CreateSipCredentialListMapping",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json",
			c.CreateSipCredentialListMapping,
		},
		{
			"CreateSipDomain",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json",
			c.CreateSipDomain,
		},
		{
			"CreateSipIpAccessControlList",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json",
			c.CreateSipIpAccessControlList,
		},
		{
			"CreateSipIpAccessControlListMapping",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json",
			c.CreateSipIpAccessControlListMapping,
		},
		{
			"CreateSipIpAddress",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json",
			c.CreateSipIpAddress,
		},
		{
			"CreateSiprec",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec.json",
			c.CreateSiprec,
		},
		{
			"CreateStream",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams.json",
			c.CreateStream,
		},
		{
			"CreateToken",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Tokens.json",
			c.CreateToken,
		},
		{
			"CreateUsageTrigger",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json",
			c.CreateUsageTrigger,
		},
		{
			"CreateValidationRequest",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json",
			c.CreateValidationRequest,
		},
		{
			"DeleteAddress",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json",
			c.DeleteAddress,
		},
		{
			"DeleteApplication",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json",
			c.DeleteApplication,
		},
		{
			"DeleteCall",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json",
			c.DeleteCall,
		},
		{
			"DeleteCallFeedbackSummary",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json",
			c.DeleteCallFeedbackSummary,
		},
		{
			"DeleteCallRecording",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json",
			c.DeleteCallRecording,
		},
		{
			"DeleteConferenceRecording",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json",
			c.DeleteConferenceRecording,
		},
		{
			"DeleteConnectApp",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json",
			c.DeleteConnectApp,
		},
		{
			"DeleteIncomingPhoneNumber",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json",
			c.DeleteIncomingPhoneNumber,
		},
		{
			"DeleteIncomingPhoneNumberAssignedAddOn",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json",
			c.DeleteIncomingPhoneNumberAssignedAddOn,
		},
		{
			"DeleteKey",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json",
			c.DeleteKey,
		},
		{
			"DeleteMedia",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json",
			c.DeleteMedia,
		},
		{
			"DeleteMessage",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json",
			c.DeleteMessage,
		},
		{
			"DeleteOutgoingCallerId",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json",
			c.DeleteOutgoingCallerId,
		},
		{
			"DeleteParticipant",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json",
			c.DeleteParticipant,
		},
		{
			"DeleteQueue",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json",
			c.DeleteQueue,
		},
		{
			"DeleteRecording",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json",
			c.DeleteRecording,
		},
		{
			"DeleteRecordingAddOnResult",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json",
			c.DeleteRecordingAddOnResult,
		},
		{
			"DeleteRecordingAddOnResultPayload",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json",
			c.DeleteRecordingAddOnResultPayload,
		},
		{
			"DeleteRecordingTranscription",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json",
			c.DeleteRecordingTranscription,
		},
		{
			"DeleteSigningKey",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json",
			c.DeleteSigningKey,
		},
		{
			"DeleteSipAuthCallsCredentialListMapping",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json",
			c.DeleteSipAuthCallsCredentialListMapping,
		},
		{
			"DeleteSipAuthCallsIpAccessControlListMapping",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json",
			c.DeleteSipAuthCallsIpAccessControlListMapping,
		},
		{
			"DeleteSipAuthRegistrationsCredentialListMapping",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json",
			c.DeleteSipAuthRegistrationsCredentialListMapping,
		},
		{
			"DeleteSipCredential",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json",
			c.DeleteSipCredential,
		},
		{
			"DeleteSipCredentialList",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json",
			c.DeleteSipCredentialList,
		},
		{
			"DeleteSipCredentialListMapping",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json",
			c.DeleteSipCredentialListMapping,
		},
		{
			"DeleteSipDomain",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json",
			c.DeleteSipDomain,
		},
		{
			"DeleteSipIpAccessControlList",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json",
			c.DeleteSipIpAccessControlList,
		},
		{
			"DeleteSipIpAccessControlListMapping",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json",
			c.DeleteSipIpAccessControlListMapping,
		},
		{
			"DeleteSipIpAddress",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json",
			c.DeleteSipIpAddress,
		},
		{
			"DeleteTranscription",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json",
			c.DeleteTranscription,
		},
		{
			"DeleteUsageTrigger",
			strings.ToUpper("Delete"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json",
			c.DeleteUsageTrigger,
		},
		{
			"FetchAccount",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{Sid}.json",
			c.FetchAccount,
		},
		{
			"FetchAddress",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json",
			c.FetchAddress,
		},
		{
			"FetchApplication",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json",
			c.FetchApplication,
		},
		{
			"FetchAuthorizedConnectApp",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps/{ConnectAppSid}.json",
			c.FetchAuthorizedConnectApp,
		},
		{
			"FetchAvailablePhoneNumberCountry",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}.json",
			c.FetchAvailablePhoneNumberCountry,
		},
		{
			"FetchBalance",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Balance.json",
			c.FetchBalance,
		},
		{
			"FetchCall",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json",
			c.FetchCall,
		},
		{
			"FetchCallFeedback",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json",
			c.FetchCallFeedback,
		},
		{
			"FetchCallFeedbackSummary",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/FeedbackSummary/{Sid}.json",
			c.FetchCallFeedbackSummary,
		},
		{
			"FetchCallNotification",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications/{Sid}.json",
			c.FetchCallNotification,
		},
		{
			"FetchCallRecording",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json",
			c.FetchCallRecording,
		},
		{
			"FetchConference",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json",
			c.FetchConference,
		},
		{
			"FetchConferenceRecording",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json",
			c.FetchConferenceRecording,
		},
		{
			"FetchConnectApp",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json",
			c.FetchConnectApp,
		},
		{
			"FetchIncomingPhoneNumber",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json",
			c.FetchIncomingPhoneNumber,
		},
		{
			"FetchIncomingPhoneNumberAssignedAddOn",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{Sid}.json",
			c.FetchIncomingPhoneNumberAssignedAddOn,
		},
		{
			"FetchIncomingPhoneNumberAssignedAddOnExtension",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions/{Sid}.json",
			c.FetchIncomingPhoneNumberAssignedAddOnExtension,
		},
		{
			"FetchKey",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json",
			c.FetchKey,
		},
		{
			"FetchMedia",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media/{Sid}.json",
			c.FetchMedia,
		},
		{
			"FetchMember",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json",
			c.FetchMember,
		},
		{
			"FetchMessage",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json",
			c.FetchMessage,
		},
		{
			"FetchNotification",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Notifications/{Sid}.json",
			c.FetchNotification,
		},
		{
			"FetchOutgoingCallerId",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json",
			c.FetchOutgoingCallerId,
		},
		{
			"FetchParticipant",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json",
			c.FetchParticipant,
		},
		{
			"FetchQueue",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json",
			c.FetchQueue,
		},
		{
			"FetchRecording",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{Sid}.json",
			c.FetchRecording,
		},
		{
			"FetchRecordingAddOnResult",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{Sid}.json",
			c.FetchRecordingAddOnResult,
		},
		{
			"FetchRecordingAddOnResultPayload",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads/{Sid}.json",
			c.FetchRecordingAddOnResultPayload,
		},
		{
			"FetchRecordingTranscription",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions/{Sid}.json",
			c.FetchRecordingTranscription,
		},
		{
			"FetchShortCode",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json",
			c.FetchShortCode,
		},
		{
			"FetchSigningKey",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json",
			c.FetchSigningKey,
		},
		{
			"FetchSipAuthCallsCredentialListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings/{Sid}.json",
			c.FetchSipAuthCallsCredentialListMapping,
		},
		{
			"FetchSipAuthCallsIpAccessControlListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings/{Sid}.json",
			c.FetchSipAuthCallsIpAccessControlListMapping,
		},
		{
			"FetchSipAuthRegistrationsCredentialListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings/{Sid}.json",
			c.FetchSipAuthRegistrationsCredentialListMapping,
		},
		{
			"FetchSipCredential",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json",
			c.FetchSipCredential,
		},
		{
			"FetchSipCredentialList",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json",
			c.FetchSipCredentialList,
		},
		{
			"FetchSipCredentialListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings/{Sid}.json",
			c.FetchSipCredentialListMapping,
		},
		{
			"FetchSipDomain",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json",
			c.FetchSipDomain,
		},
		{
			"FetchSipIpAccessControlList",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json",
			c.FetchSipIpAccessControlList,
		},
		{
			"FetchSipIpAccessControlListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings/{Sid}.json",
			c.FetchSipIpAccessControlListMapping,
		},
		{
			"FetchSipIpAddress",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json",
			c.FetchSipIpAddress,
		},
		{
			"FetchTranscription",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Transcriptions/{Sid}.json",
			c.FetchTranscription,
		},
		{
			"FetchUsageTrigger",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json",
			c.FetchUsageTrigger,
		},
		{
			"ListAccount",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts.json",
			c.ListAccount,
		},
		{
			"ListAddress",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Addresses.json",
			c.ListAddress,
		},
		{
			"ListApplication",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Applications.json",
			c.ListApplication,
		},
		{
			"ListAuthorizedConnectApp",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AuthorizedConnectApps.json",
			c.ListAuthorizedConnectApp,
		},
		{
			"ListAvailablePhoneNumberCountry",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers.json",
			c.ListAvailablePhoneNumberCountry,
		},
		{
			"ListAvailablePhoneNumberLocal",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Local.json",
			c.ListAvailablePhoneNumberLocal,
		},
		{
			"ListAvailablePhoneNumberMachineToMachine",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/MachineToMachine.json",
			c.ListAvailablePhoneNumberMachineToMachine,
		},
		{
			"ListAvailablePhoneNumberMobile",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Mobile.json",
			c.ListAvailablePhoneNumberMobile,
		},
		{
			"ListAvailablePhoneNumberNational",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/National.json",
			c.ListAvailablePhoneNumberNational,
		},
		{
			"ListAvailablePhoneNumberSharedCost",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/SharedCost.json",
			c.ListAvailablePhoneNumberSharedCost,
		},
		{
			"ListAvailablePhoneNumberTollFree",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/TollFree.json",
			c.ListAvailablePhoneNumberTollFree,
		},
		{
			"ListAvailablePhoneNumberVoip",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/AvailablePhoneNumbers/{CountryCode}/Voip.json",
			c.ListAvailablePhoneNumberVoip,
		},
		{
			"ListCall",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls.json",
			c.ListCall,
		},
		{
			"ListCallEvent",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Events.json",
			c.ListCallEvent,
		},
		{
			"ListCallNotification",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Notifications.json",
			c.ListCallNotification,
		},
		{
			"ListCallRecording",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings.json",
			c.ListCallRecording,
		},
		{
			"ListConference",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences.json",
			c.ListConference,
		},
		{
			"ListConferenceRecording",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings.json",
			c.ListConferenceRecording,
		},
		{
			"ListConnectApp",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/ConnectApps.json",
			c.ListConnectApp,
		},
		{
			"ListDependentPhoneNumber",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Addresses/{AddressSid}/DependentPhoneNumbers.json",
			c.ListDependentPhoneNumber,
		},
		{
			"ListIncomingPhoneNumber",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers.json",
			c.ListIncomingPhoneNumber,
		},
		{
			"ListIncomingPhoneNumberAssignedAddOn",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns.json",
			c.ListIncomingPhoneNumberAssignedAddOn,
		},
		{
			"ListIncomingPhoneNumberAssignedAddOnExtension",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{ResourceSid}/AssignedAddOns/{AssignedAddOnSid}/Extensions.json",
			c.ListIncomingPhoneNumberAssignedAddOnExtension,
		},
		{
			"ListIncomingPhoneNumberLocal",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Local.json",
			c.ListIncomingPhoneNumberLocal,
		},
		{
			"ListIncomingPhoneNumberMobile",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/Mobile.json",
			c.ListIncomingPhoneNumberMobile,
		},
		{
			"ListIncomingPhoneNumberTollFree",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/TollFree.json",
			c.ListIncomingPhoneNumberTollFree,
		},
		{
			"ListKey",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Keys.json",
			c.ListKey,
		},
		{
			"ListMedia",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Messages/{MessageSid}/Media.json",
			c.ListMedia,
		},
		{
			"ListMember",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members.json",
			c.ListMember,
		},
		{
			"ListMessage",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Messages.json",
			c.ListMessage,
		},
		{
			"ListNotification",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Notifications.json",
			c.ListNotification,
		},
		{
			"ListOutgoingCallerId",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds.json",
			c.ListOutgoingCallerId,
		},
		{
			"ListParticipant",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants.json",
			c.ListParticipant,
		},
		{
			"ListQueue",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Queues.json",
			c.ListQueue,
		},
		{
			"ListRecording",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings.json",
			c.ListRecording,
		},
		{
			"ListRecordingAddOnResult",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults.json",
			c.ListRecordingAddOnResult,
		},
		{
			"ListRecordingAddOnResultPayload",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{ReferenceSid}/AddOnResults/{AddOnResultSid}/Payloads.json",
			c.ListRecordingAddOnResultPayload,
		},
		{
			"ListRecordingTranscription",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Recordings/{RecordingSid}/Transcriptions.json",
			c.ListRecordingTranscription,
		},
		{
			"ListShortCode",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes.json",
			c.ListShortCode,
		},
		{
			"ListSigningKey",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SigningKeys.json",
			c.ListSigningKey,
		},
		{
			"ListSipAuthCallsCredentialListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/CredentialListMappings.json",
			c.ListSipAuthCallsCredentialListMapping,
		},
		{
			"ListSipAuthCallsIpAccessControlListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Calls/IpAccessControlListMappings.json",
			c.ListSipAuthCallsIpAccessControlListMapping,
		},
		{
			"ListSipAuthRegistrationsCredentialListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/Auth/Registrations/CredentialListMappings.json",
			c.ListSipAuthRegistrationsCredentialListMapping,
		},
		{
			"ListSipCredential",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials.json",
			c.ListSipCredential,
		},
		{
			"ListSipCredentialList",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists.json",
			c.ListSipCredentialList,
		},
		{
			"ListSipCredentialListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/CredentialListMappings.json",
			c.ListSipCredentialListMapping,
		},
		{
			"ListSipDomain",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains.json",
			c.ListSipDomain,
		},
		{
			"ListSipIpAccessControlList",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists.json",
			c.ListSipIpAccessControlList,
		},
		{
			"ListSipIpAccessControlListMapping",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{DomainSid}/IpAccessControlListMappings.json",
			c.ListSipIpAccessControlListMapping,
		},
		{
			"ListSipIpAddress",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses.json",
			c.ListSipIpAddress,
		},
		{
			"ListTranscription",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Transcriptions.json",
			c.ListTranscription,
		},
		{
			"ListUsageRecord",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records.json",
			c.ListUsageRecord,
		},
		{
			"ListUsageRecordAllTime",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/AllTime.json",
			c.ListUsageRecordAllTime,
		},
		{
			"ListUsageRecordDaily",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/Daily.json",
			c.ListUsageRecordDaily,
		},
		{
			"ListUsageRecordLastMonth",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/LastMonth.json",
			c.ListUsageRecordLastMonth,
		},
		{
			"ListUsageRecordMonthly",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/Monthly.json",
			c.ListUsageRecordMonthly,
		},
		{
			"ListUsageRecordThisMonth",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/ThisMonth.json",
			c.ListUsageRecordThisMonth,
		},
		{
			"ListUsageRecordToday",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/Today.json",
			c.ListUsageRecordToday,
		},
		{
			"ListUsageRecordYearly",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yearly.json",
			c.ListUsageRecordYearly,
		},
		{
			"ListUsageRecordYesterday",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Records/Yesterday.json",
			c.ListUsageRecordYesterday,
		},
		{
			"ListUsageTrigger",
			strings.ToUpper("Get"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Triggers.json",
			c.ListUsageTrigger,
		},
		{
			"UpdateAccount",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{Sid}.json",
			c.UpdateAccount,
		},
		{
			"UpdateAddress",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Addresses/{Sid}.json",
			c.UpdateAddress,
		},
		{
			"UpdateApplication",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Applications/{Sid}.json",
			c.UpdateApplication,
		},
		{
			"UpdateCall",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{Sid}.json",
			c.UpdateCall,
		},
		{
			"UpdateCallFeedback",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Feedback.json",
			c.UpdateCallFeedback,
		},
		{
			"UpdateCallRecording",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Recordings/{Sid}.json",
			c.UpdateCallRecording,
		},
		{
			"UpdateConference",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{Sid}.json",
			c.UpdateConference,
		},
		{
			"UpdateConferenceRecording",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Recordings/{Sid}.json",
			c.UpdateConferenceRecording,
		},
		{
			"UpdateConnectApp",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/ConnectApps/{Sid}.json",
			c.UpdateConnectApp,
		},
		{
			"UpdateIncomingPhoneNumber",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/IncomingPhoneNumbers/{Sid}.json",
			c.UpdateIncomingPhoneNumber,
		},
		{
			"UpdateKey",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Keys/{Sid}.json",
			c.UpdateKey,
		},
		{
			"UpdateMember",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Queues/{QueueSid}/Members/{CallSid}.json",
			c.UpdateMember,
		},
		{
			"UpdateMessage",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Messages/{Sid}.json",
			c.UpdateMessage,
		},
		{
			"UpdateOutgoingCallerId",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/OutgoingCallerIds/{Sid}.json",
			c.UpdateOutgoingCallerId,
		},
		{
			"UpdateParticipant",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Conferences/{ConferenceSid}/Participants/{CallSid}.json",
			c.UpdateParticipant,
		},
		{
			"UpdatePayments",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Payments/{Sid}.json",
			c.UpdatePayments,
		},
		{
			"UpdateQueue",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Queues/{Sid}.json",
			c.UpdateQueue,
		},
		{
			"UpdateShortCode",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SMS/ShortCodes/{Sid}.json",
			c.UpdateShortCode,
		},
		{
			"UpdateSigningKey",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SigningKeys/{Sid}.json",
			c.UpdateSigningKey,
		},
		{
			"UpdateSipCredential",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{CredentialListSid}/Credentials/{Sid}.json",
			c.UpdateSipCredential,
		},
		{
			"UpdateSipCredentialList",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/CredentialLists/{Sid}.json",
			c.UpdateSipCredentialList,
		},
		{
			"UpdateSipDomain",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/Domains/{Sid}.json",
			c.UpdateSipDomain,
		},
		{
			"UpdateSipIpAccessControlList",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{Sid}.json",
			c.UpdateSipIpAccessControlList,
		},
		{
			"UpdateSipIpAddress",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/SIP/IpAccessControlLists/{IpAccessControlListSid}/IpAddresses/{Sid}.json",
			c.UpdateSipIpAddress,
		},
		{
			"UpdateSiprec",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Siprec/{Sid}.json",
			c.UpdateSiprec,
		},
		{
			"UpdateStream",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Calls/{CallSid}/Streams/{Sid}.json",
			c.UpdateStream,
		},
		{
			"UpdateUsageTrigger",
			strings.ToUpper("Post"),
			"/2010-04-01/Accounts/{AccountSid}/Usage/Triggers/{Sid}.json",
			c.UpdateUsageTrigger,
		},
	}
}

// CreateAccount - 
func (c *DefaultApiController) CreateAccount(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.CreateAccount(r.Context(), friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateAddress - 
func (c *DefaultApiController) CreateAddress(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				cityParam := r.FormValue("City")
				customerNameParam := r.FormValue("CustomerName")
				isoCountryParam := r.FormValue("IsoCountry")
				postalCodeParam := r.FormValue("PostalCode")
				regionParam := r.FormValue("Region")
				streetParam := r.FormValue("Street")
				autoCorrectAddressParam := r.FormValue("AutoCorrectAddress")
				emergencyEnabledParam := r.FormValue("EmergencyEnabled")
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.CreateAddress(r.Context(), accountSidParam, cityParam, customerNameParam, isoCountryParam, postalCodeParam, regionParam, streetParam, autoCorrectAddressParam, emergencyEnabledParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateApplication - 
func (c *DefaultApiController) CreateApplication(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				apiVersionParam := r.FormValue("ApiVersion")
				friendlyNameParam := r.FormValue("FriendlyName")
				messageStatusCallbackParam := r.FormValue("MessageStatusCallback")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsStatusCallbackParam := r.FormValue("SmsStatusCallback")
				smsUrlParam := r.FormValue("SmsUrl")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				voiceCallerIdLookupParam := r.FormValue("VoiceCallerIdLookup")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.CreateApplication(r.Context(), accountSidParam, apiVersionParam, friendlyNameParam, messageStatusCallbackParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsStatusCallbackParam, smsUrlParam, statusCallbackParam, statusCallbackMethodParam, voiceCallerIdLookupParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateCall - 
func (c *DefaultApiController) CreateCall(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				fromParam := r.FormValue("From")
				toParam := r.FormValue("To")
				applicationSidParam := r.FormValue("ApplicationSid")
				asyncAmdParam := r.FormValue("AsyncAmd")
				asyncAmdStatusCallbackParam := r.FormValue("AsyncAmdStatusCallback")
				asyncAmdStatusCallbackMethodParam := r.FormValue("AsyncAmdStatusCallbackMethod")
				byocParam := r.FormValue("Byoc")
				callReasonParam := r.FormValue("CallReason")
				callTokenParam := r.FormValue("CallToken")
				callerIdParam := r.FormValue("CallerId")
				fallbackMethodParam := r.FormValue("FallbackMethod")
				fallbackUrlParam := r.FormValue("FallbackUrl")
				machineDetectionParam := r.FormValue("MachineDetection")
			
	machineDetectionSilenceTimeoutParam, err := parseInt32Parameter(r.FormValue("MachineDetectionSilenceTimeout"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	machineDetectionSilenceTimeoutParam := r.FormValue("MachineDetectionSilenceTimeout")
			
	machineDetectionSpeechEndThresholdParam, err := parseInt32Parameter(r.FormValue("MachineDetectionSpeechEndThreshold"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	machineDetectionSpeechEndThresholdParam := r.FormValue("MachineDetectionSpeechEndThreshold")
			
	machineDetectionSpeechThresholdParam, err := parseInt32Parameter(r.FormValue("MachineDetectionSpeechThreshold"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	machineDetectionSpeechThresholdParam := r.FormValue("MachineDetectionSpeechThreshold")
			
	machineDetectionTimeoutParam, err := parseInt32Parameter(r.FormValue("MachineDetectionTimeout"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	machineDetectionTimeoutParam := r.FormValue("MachineDetectionTimeout")
				methodParam := r.FormValue("Method")
				recordParam := r.FormValue("Record")
				recordingChannelsParam := r.FormValue("RecordingChannels")
				recordingStatusCallbackParam := r.FormValue("RecordingStatusCallback")
				recordingStatusCallbackEventParam := r.FormValue("RecordingStatusCallbackEvent")
				recordingStatusCallbackMethodParam := r.FormValue("RecordingStatusCallbackMethod")
				recordingTrackParam := r.FormValue("RecordingTrack")
				sendDigitsParam := r.FormValue("SendDigits")
				sipAuthPasswordParam := r.FormValue("SipAuthPassword")
				sipAuthUsernameParam := r.FormValue("SipAuthUsername")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackEventParam := r.FormValue("StatusCallbackEvent")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
			
	timeLimitParam, err := parseInt32Parameter(r.FormValue("TimeLimit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	timeLimitParam := r.FormValue("TimeLimit")
			
	timeoutParam, err := parseInt32Parameter(r.FormValue("Timeout"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	timeoutParam := r.FormValue("Timeout")
				trimParam := r.FormValue("Trim")
				twimlParam := r.FormValue("Twiml")
				urlParam := r.FormValue("Url")
	result, err := c.service.CreateCall(r.Context(), accountSidParam, fromParam, toParam, applicationSidParam, asyncAmdParam, asyncAmdStatusCallbackParam, asyncAmdStatusCallbackMethodParam, byocParam, callReasonParam, callTokenParam, callerIdParam, fallbackMethodParam, fallbackUrlParam, machineDetectionParam, machineDetectionSilenceTimeoutParam, machineDetectionSpeechEndThresholdParam, machineDetectionSpeechThresholdParam, machineDetectionTimeoutParam, methodParam, recordParam, recordingChannelsParam, recordingStatusCallbackParam, recordingStatusCallbackEventParam, recordingStatusCallbackMethodParam, recordingTrackParam, sendDigitsParam, sipAuthPasswordParam, sipAuthUsernameParam, statusCallbackParam, statusCallbackEventParam, statusCallbackMethodParam, timeLimitParam, timeoutParam, trimParam, twimlParam, urlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateCallFeedbackSummary - 
func (c *DefaultApiController) CreateCallFeedbackSummary(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				endDateParam := r.FormValue("EndDate")
				startDateParam := r.FormValue("StartDate")
				includeSubaccountsParam := r.FormValue("IncludeSubaccounts")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
	result, err := c.service.CreateCallFeedbackSummary(r.Context(), accountSidParam, endDateParam, startDateParam, includeSubaccountsParam, statusCallbackParam, statusCallbackMethodParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateCallRecording - 
func (c *DefaultApiController) CreateCallRecording(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
				recordingChannelsParam := r.FormValue("RecordingChannels")
				recordingStatusCallbackParam := r.FormValue("RecordingStatusCallback")
				recordingStatusCallbackEventParam := r.FormValue("RecordingStatusCallbackEvent")
				recordingStatusCallbackMethodParam := r.FormValue("RecordingStatusCallbackMethod")
				recordingTrackParam := r.FormValue("RecordingTrack")
				trimParam := r.FormValue("Trim")
	result, err := c.service.CreateCallRecording(r.Context(), accountSidParam, callSidParam, recordingChannelsParam, recordingStatusCallbackParam, recordingStatusCallbackEventParam, recordingStatusCallbackMethodParam, recordingTrackParam, trimParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateIncomingPhoneNumber - 
func (c *DefaultApiController) CreateIncomingPhoneNumber(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				addressSidParam := r.FormValue("AddressSid")
				apiVersionParam := r.FormValue("ApiVersion")
				areaCodeParam := r.FormValue("AreaCode")
				bundleSidParam := r.FormValue("BundleSid")
				emergencyAddressSidParam := r.FormValue("EmergencyAddressSid")
				emergencyStatusParam := r.FormValue("EmergencyStatus")
				friendlyNameParam := r.FormValue("FriendlyName")
				identitySidParam := r.FormValue("IdentitySid")
				phoneNumberParam := r.FormValue("PhoneNumber")
				smsApplicationSidParam := r.FormValue("SmsApplicationSid")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsUrlParam := r.FormValue("SmsUrl")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				trunkSidParam := r.FormValue("TrunkSid")
				voiceApplicationSidParam := r.FormValue("VoiceApplicationSid")
				voiceCallerIdLookupParam := r.FormValue("VoiceCallerIdLookup")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceReceiveModeParam := r.FormValue("VoiceReceiveMode")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.CreateIncomingPhoneNumber(r.Context(), accountSidParam, addressSidParam, apiVersionParam, areaCodeParam, bundleSidParam, emergencyAddressSidParam, emergencyStatusParam, friendlyNameParam, identitySidParam, phoneNumberParam, smsApplicationSidParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsUrlParam, statusCallbackParam, statusCallbackMethodParam, trunkSidParam, voiceApplicationSidParam, voiceCallerIdLookupParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceReceiveModeParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateIncomingPhoneNumberAssignedAddOn - 
func (c *DefaultApiController) CreateIncomingPhoneNumberAssignedAddOn(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	resourceSidParam := params["ResourceSid"]
	
				installedAddOnSidParam := r.FormValue("InstalledAddOnSid")
	result, err := c.service.CreateIncomingPhoneNumberAssignedAddOn(r.Context(), accountSidParam, resourceSidParam, installedAddOnSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateIncomingPhoneNumberLocal - 
func (c *DefaultApiController) CreateIncomingPhoneNumberLocal(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				phoneNumberParam := r.FormValue("PhoneNumber")
				addressSidParam := r.FormValue("AddressSid")
				apiVersionParam := r.FormValue("ApiVersion")
				bundleSidParam := r.FormValue("BundleSid")
				emergencyAddressSidParam := r.FormValue("EmergencyAddressSid")
				emergencyStatusParam := r.FormValue("EmergencyStatus")
				friendlyNameParam := r.FormValue("FriendlyName")
				identitySidParam := r.FormValue("IdentitySid")
				smsApplicationSidParam := r.FormValue("SmsApplicationSid")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsUrlParam := r.FormValue("SmsUrl")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				trunkSidParam := r.FormValue("TrunkSid")
				voiceApplicationSidParam := r.FormValue("VoiceApplicationSid")
				voiceCallerIdLookupParam := r.FormValue("VoiceCallerIdLookup")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceReceiveModeParam := r.FormValue("VoiceReceiveMode")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.CreateIncomingPhoneNumberLocal(r.Context(), accountSidParam, phoneNumberParam, addressSidParam, apiVersionParam, bundleSidParam, emergencyAddressSidParam, emergencyStatusParam, friendlyNameParam, identitySidParam, smsApplicationSidParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsUrlParam, statusCallbackParam, statusCallbackMethodParam, trunkSidParam, voiceApplicationSidParam, voiceCallerIdLookupParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceReceiveModeParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateIncomingPhoneNumberMobile - 
func (c *DefaultApiController) CreateIncomingPhoneNumberMobile(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				phoneNumberParam := r.FormValue("PhoneNumber")
				addressSidParam := r.FormValue("AddressSid")
				apiVersionParam := r.FormValue("ApiVersion")
				bundleSidParam := r.FormValue("BundleSid")
				emergencyAddressSidParam := r.FormValue("EmergencyAddressSid")
				emergencyStatusParam := r.FormValue("EmergencyStatus")
				friendlyNameParam := r.FormValue("FriendlyName")
				identitySidParam := r.FormValue("IdentitySid")
				smsApplicationSidParam := r.FormValue("SmsApplicationSid")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsUrlParam := r.FormValue("SmsUrl")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				trunkSidParam := r.FormValue("TrunkSid")
				voiceApplicationSidParam := r.FormValue("VoiceApplicationSid")
				voiceCallerIdLookupParam := r.FormValue("VoiceCallerIdLookup")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceReceiveModeParam := r.FormValue("VoiceReceiveMode")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.CreateIncomingPhoneNumberMobile(r.Context(), accountSidParam, phoneNumberParam, addressSidParam, apiVersionParam, bundleSidParam, emergencyAddressSidParam, emergencyStatusParam, friendlyNameParam, identitySidParam, smsApplicationSidParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsUrlParam, statusCallbackParam, statusCallbackMethodParam, trunkSidParam, voiceApplicationSidParam, voiceCallerIdLookupParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceReceiveModeParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateIncomingPhoneNumberTollFree - 
func (c *DefaultApiController) CreateIncomingPhoneNumberTollFree(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				phoneNumberParam := r.FormValue("PhoneNumber")
				addressSidParam := r.FormValue("AddressSid")
				apiVersionParam := r.FormValue("ApiVersion")
				bundleSidParam := r.FormValue("BundleSid")
				emergencyAddressSidParam := r.FormValue("EmergencyAddressSid")
				emergencyStatusParam := r.FormValue("EmergencyStatus")
				friendlyNameParam := r.FormValue("FriendlyName")
				identitySidParam := r.FormValue("IdentitySid")
				smsApplicationSidParam := r.FormValue("SmsApplicationSid")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsUrlParam := r.FormValue("SmsUrl")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				trunkSidParam := r.FormValue("TrunkSid")
				voiceApplicationSidParam := r.FormValue("VoiceApplicationSid")
				voiceCallerIdLookupParam := r.FormValue("VoiceCallerIdLookup")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceReceiveModeParam := r.FormValue("VoiceReceiveMode")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.CreateIncomingPhoneNumberTollFree(r.Context(), accountSidParam, phoneNumberParam, addressSidParam, apiVersionParam, bundleSidParam, emergencyAddressSidParam, emergencyStatusParam, friendlyNameParam, identitySidParam, smsApplicationSidParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsUrlParam, statusCallbackParam, statusCallbackMethodParam, trunkSidParam, voiceApplicationSidParam, voiceCallerIdLookupParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceReceiveModeParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateMessage - 
func (c *DefaultApiController) CreateMessage(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				toParam := r.FormValue("To")
				addressRetentionParam := r.FormValue("AddressRetention")
				applicationSidParam := r.FormValue("ApplicationSid")
			
	attemptParam, err := parseInt32Parameter(r.FormValue("Attempt"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	attemptParam := r.FormValue("Attempt")
				bodyParam := r.FormValue("Body")
				contentRetentionParam := r.FormValue("ContentRetention")
				forceDeliveryParam := r.FormValue("ForceDelivery")
				fromParam := r.FormValue("From")
				maxPriceParam := r.FormValue("MaxPrice")
				mediaUrlParam := r.FormValue("MediaUrl")
				messagingServiceSidParam := r.FormValue("MessagingServiceSid")
				persistentActionParam := r.FormValue("PersistentAction")
				provideFeedbackParam := r.FormValue("ProvideFeedback")
				scheduleTypeParam := r.FormValue("ScheduleType")
				sendAsMmsParam := r.FormValue("SendAsMms")
				sendAtParam := r.FormValue("SendAt")
				smartEncodedParam := r.FormValue("SmartEncoded")
				statusCallbackParam := r.FormValue("StatusCallback")
			
	validityPeriodParam, err := parseInt32Parameter(r.FormValue("ValidityPeriod"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	validityPeriodParam := r.FormValue("ValidityPeriod")
	result, err := c.service.CreateMessage(r.Context(), accountSidParam, toParam, addressRetentionParam, applicationSidParam, attemptParam, bodyParam, contentRetentionParam, forceDeliveryParam, fromParam, maxPriceParam, mediaUrlParam, messagingServiceSidParam, persistentActionParam, provideFeedbackParam, scheduleTypeParam, sendAsMmsParam, sendAtParam, smartEncodedParam, statusCallbackParam, validityPeriodParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateMessageFeedback - 
func (c *DefaultApiController) CreateMessageFeedback(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	messageSidParam := params["MessageSid"]
	
				outcomeParam := r.FormValue("Outcome")
	result, err := c.service.CreateMessageFeedback(r.Context(), accountSidParam, messageSidParam, outcomeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateNewKey - 
func (c *DefaultApiController) CreateNewKey(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.CreateNewKey(r.Context(), accountSidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateNewSigningKey - 
func (c *DefaultApiController) CreateNewSigningKey(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.CreateNewSigningKey(r.Context(), accountSidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateParticipant - 
func (c *DefaultApiController) CreateParticipant(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
				fromParam := r.FormValue("From")
				toParam := r.FormValue("To")
				beepParam := r.FormValue("Beep")
				byocParam := r.FormValue("Byoc")
				callReasonParam := r.FormValue("CallReason")
				callSidToCoachParam := r.FormValue("CallSidToCoach")
				callerIdParam := r.FormValue("CallerId")
				coachingParam := r.FormValue("Coaching")
				conferenceRecordParam := r.FormValue("ConferenceRecord")
				conferenceRecordingStatusCallbackParam := r.FormValue("ConferenceRecordingStatusCallback")
				conferenceRecordingStatusCallbackEventParam := r.FormValue("ConferenceRecordingStatusCallbackEvent")
				conferenceRecordingStatusCallbackMethodParam := r.FormValue("ConferenceRecordingStatusCallbackMethod")
				conferenceStatusCallbackParam := r.FormValue("ConferenceStatusCallback")
				conferenceStatusCallbackEventParam := r.FormValue("ConferenceStatusCallbackEvent")
				conferenceStatusCallbackMethodParam := r.FormValue("ConferenceStatusCallbackMethod")
				conferenceTrimParam := r.FormValue("ConferenceTrim")
				earlyMediaParam := r.FormValue("EarlyMedia")
				endConferenceOnExitParam := r.FormValue("EndConferenceOnExit")
				jitterBufferSizeParam := r.FormValue("JitterBufferSize")
				labelParam := r.FormValue("Label")
			
	maxParticipantsParam, err := parseInt32Parameter(r.FormValue("MaxParticipants"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxParticipantsParam := r.FormValue("MaxParticipants")
				mutedParam := r.FormValue("Muted")
				recordParam := r.FormValue("Record")
				recordingChannelsParam := r.FormValue("RecordingChannels")
				recordingStatusCallbackParam := r.FormValue("RecordingStatusCallback")
				recordingStatusCallbackEventParam := r.FormValue("RecordingStatusCallbackEvent")
				recordingStatusCallbackMethodParam := r.FormValue("RecordingStatusCallbackMethod")
				recordingTrackParam := r.FormValue("RecordingTrack")
				regionParam := r.FormValue("Region")
				sipAuthPasswordParam := r.FormValue("SipAuthPassword")
				sipAuthUsernameParam := r.FormValue("SipAuthUsername")
				startConferenceOnEnterParam := r.FormValue("StartConferenceOnEnter")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackEventParam := r.FormValue("StatusCallbackEvent")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
			
	timeLimitParam, err := parseInt32Parameter(r.FormValue("TimeLimit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	timeLimitParam := r.FormValue("TimeLimit")
			
	timeoutParam, err := parseInt32Parameter(r.FormValue("Timeout"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	timeoutParam := r.FormValue("Timeout")
				waitMethodParam := r.FormValue("WaitMethod")
				waitUrlParam := r.FormValue("WaitUrl")
	result, err := c.service.CreateParticipant(r.Context(), accountSidParam, conferenceSidParam, fromParam, toParam, beepParam, byocParam, callReasonParam, callSidToCoachParam, callerIdParam, coachingParam, conferenceRecordParam, conferenceRecordingStatusCallbackParam, conferenceRecordingStatusCallbackEventParam, conferenceRecordingStatusCallbackMethodParam, conferenceStatusCallbackParam, conferenceStatusCallbackEventParam, conferenceStatusCallbackMethodParam, conferenceTrimParam, earlyMediaParam, endConferenceOnExitParam, jitterBufferSizeParam, labelParam, maxParticipantsParam, mutedParam, recordParam, recordingChannelsParam, recordingStatusCallbackParam, recordingStatusCallbackEventParam, recordingStatusCallbackMethodParam, recordingTrackParam, regionParam, sipAuthPasswordParam, sipAuthUsernameParam, startConferenceOnEnterParam, statusCallbackParam, statusCallbackEventParam, statusCallbackMethodParam, timeLimitParam, timeoutParam, waitMethodParam, waitUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreatePayments - 
func (c *DefaultApiController) CreatePayments(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
				idempotencyKeyParam := r.FormValue("IdempotencyKey")
				statusCallbackParam := r.FormValue("StatusCallback")
				bankAccountTypeParam := r.FormValue("BankAccountType")
				chargeAmountParam := r.FormValue("ChargeAmount")
				currencyParam := r.FormValue("Currency")
				descriptionParam := r.FormValue("Description")
				inputParam := r.FormValue("Input")
			
	minPostalCodeLengthParam, err := parseInt32Parameter(r.FormValue("MinPostalCodeLength"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	minPostalCodeLengthParam := r.FormValue("MinPostalCodeLength")
				parameterParam := r.FormValue("Parameter")
				paymentConnectorParam := r.FormValue("PaymentConnector")
				paymentMethodParam := r.FormValue("PaymentMethod")
				postalCodeParam := r.FormValue("PostalCode")
				securityCodeParam := r.FormValue("SecurityCode")
			
	timeoutParam, err := parseInt32Parameter(r.FormValue("Timeout"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	timeoutParam := r.FormValue("Timeout")
				tokenTypeParam := r.FormValue("TokenType")
				validCardTypesParam := r.FormValue("ValidCardTypes")
	result, err := c.service.CreatePayments(r.Context(), accountSidParam, callSidParam, idempotencyKeyParam, statusCallbackParam, bankAccountTypeParam, chargeAmountParam, currencyParam, descriptionParam, inputParam, minPostalCodeLengthParam, parameterParam, paymentConnectorParam, paymentMethodParam, postalCodeParam, securityCodeParam, timeoutParam, tokenTypeParam, validCardTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateQueue - 
func (c *DefaultApiController) CreateQueue(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
			
	maxSizeParam, err := parseInt32Parameter(r.FormValue("MaxSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxSizeParam := r.FormValue("MaxSize")
	result, err := c.service.CreateQueue(r.Context(), accountSidParam, friendlyNameParam, maxSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipAuthCallsCredentialListMapping - 
func (c *DefaultApiController) CreateSipAuthCallsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
				credentialListSidParam := r.FormValue("CredentialListSid")
	result, err := c.service.CreateSipAuthCallsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, credentialListSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipAuthCallsIpAccessControlListMapping - 
func (c *DefaultApiController) CreateSipAuthCallsIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
				ipAccessControlListSidParam := r.FormValue("IpAccessControlListSid")
	result, err := c.service.CreateSipAuthCallsIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, ipAccessControlListSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipAuthRegistrationsCredentialListMapping - 
func (c *DefaultApiController) CreateSipAuthRegistrationsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
				credentialListSidParam := r.FormValue("CredentialListSid")
	result, err := c.service.CreateSipAuthRegistrationsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, credentialListSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipCredential - 
func (c *DefaultApiController) CreateSipCredential(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	credentialListSidParam := params["CredentialListSid"]
	
				passwordParam := r.FormValue("Password")
				usernameParam := r.FormValue("Username")
	result, err := c.service.CreateSipCredential(r.Context(), accountSidParam, credentialListSidParam, passwordParam, usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipCredentialList - 
func (c *DefaultApiController) CreateSipCredentialList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.CreateSipCredentialList(r.Context(), accountSidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipCredentialListMapping - 
func (c *DefaultApiController) CreateSipCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
				credentialListSidParam := r.FormValue("CredentialListSid")
	result, err := c.service.CreateSipCredentialListMapping(r.Context(), accountSidParam, domainSidParam, credentialListSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipDomain - 
func (c *DefaultApiController) CreateSipDomain(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				domainNameParam := r.FormValue("DomainName")
				byocTrunkSidParam := r.FormValue("ByocTrunkSid")
				emergencyCallerSidParam := r.FormValue("EmergencyCallerSid")
				emergencyCallingEnabledParam := r.FormValue("EmergencyCallingEnabled")
				friendlyNameParam := r.FormValue("FriendlyName")
				secureParam := r.FormValue("Secure")
				sipRegistrationParam := r.FormValue("SipRegistration")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceStatusCallbackMethodParam := r.FormValue("VoiceStatusCallbackMethod")
				voiceStatusCallbackUrlParam := r.FormValue("VoiceStatusCallbackUrl")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.CreateSipDomain(r.Context(), accountSidParam, domainNameParam, byocTrunkSidParam, emergencyCallerSidParam, emergencyCallingEnabledParam, friendlyNameParam, secureParam, sipRegistrationParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceStatusCallbackMethodParam, voiceStatusCallbackUrlParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipIpAccessControlList - 
func (c *DefaultApiController) CreateSipIpAccessControlList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.CreateSipIpAccessControlList(r.Context(), accountSidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipIpAccessControlListMapping - 
func (c *DefaultApiController) CreateSipIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
				ipAccessControlListSidParam := r.FormValue("IpAccessControlListSid")
	result, err := c.service.CreateSipIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, ipAccessControlListSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSipIpAddress - 
func (c *DefaultApiController) CreateSipIpAddress(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	ipAccessControlListSidParam := params["IpAccessControlListSid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
				ipAddressParam := r.FormValue("IpAddress")
			
	cidrPrefixLengthParam, err := parseInt32Parameter(r.FormValue("CidrPrefixLength"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	cidrPrefixLengthParam := r.FormValue("CidrPrefixLength")
	result, err := c.service.CreateSipIpAddress(r.Context(), accountSidParam, ipAccessControlListSidParam, friendlyNameParam, ipAddressParam, cidrPrefixLengthParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateSiprec - 
func (c *DefaultApiController) CreateSiprec(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
				connectorNameParam := r.FormValue("ConnectorName")
				nameParam := r.FormValue("Name")
				parameter1NameParam := r.FormValue("Parameter1.Name")
				parameter1ValueParam := r.FormValue("Parameter1.Value")
				parameter10NameParam := r.FormValue("Parameter10.Name")
				parameter10ValueParam := r.FormValue("Parameter10.Value")
				parameter11NameParam := r.FormValue("Parameter11.Name")
				parameter11ValueParam := r.FormValue("Parameter11.Value")
				parameter12NameParam := r.FormValue("Parameter12.Name")
				parameter12ValueParam := r.FormValue("Parameter12.Value")
				parameter13NameParam := r.FormValue("Parameter13.Name")
				parameter13ValueParam := r.FormValue("Parameter13.Value")
				parameter14NameParam := r.FormValue("Parameter14.Name")
				parameter14ValueParam := r.FormValue("Parameter14.Value")
				parameter15NameParam := r.FormValue("Parameter15.Name")
				parameter15ValueParam := r.FormValue("Parameter15.Value")
				parameter16NameParam := r.FormValue("Parameter16.Name")
				parameter16ValueParam := r.FormValue("Parameter16.Value")
				parameter17NameParam := r.FormValue("Parameter17.Name")
				parameter17ValueParam := r.FormValue("Parameter17.Value")
				parameter18NameParam := r.FormValue("Parameter18.Name")
				parameter18ValueParam := r.FormValue("Parameter18.Value")
				parameter19NameParam := r.FormValue("Parameter19.Name")
				parameter19ValueParam := r.FormValue("Parameter19.Value")
				parameter2NameParam := r.FormValue("Parameter2.Name")
				parameter2ValueParam := r.FormValue("Parameter2.Value")
				parameter20NameParam := r.FormValue("Parameter20.Name")
				parameter20ValueParam := r.FormValue("Parameter20.Value")
				parameter21NameParam := r.FormValue("Parameter21.Name")
				parameter21ValueParam := r.FormValue("Parameter21.Value")
				parameter22NameParam := r.FormValue("Parameter22.Name")
				parameter22ValueParam := r.FormValue("Parameter22.Value")
				parameter23NameParam := r.FormValue("Parameter23.Name")
				parameter23ValueParam := r.FormValue("Parameter23.Value")
				parameter24NameParam := r.FormValue("Parameter24.Name")
				parameter24ValueParam := r.FormValue("Parameter24.Value")
				parameter25NameParam := r.FormValue("Parameter25.Name")
				parameter25ValueParam := r.FormValue("Parameter25.Value")
				parameter26NameParam := r.FormValue("Parameter26.Name")
				parameter26ValueParam := r.FormValue("Parameter26.Value")
				parameter27NameParam := r.FormValue("Parameter27.Name")
				parameter27ValueParam := r.FormValue("Parameter27.Value")
				parameter28NameParam := r.FormValue("Parameter28.Name")
				parameter28ValueParam := r.FormValue("Parameter28.Value")
				parameter29NameParam := r.FormValue("Parameter29.Name")
				parameter29ValueParam := r.FormValue("Parameter29.Value")
				parameter3NameParam := r.FormValue("Parameter3.Name")
				parameter3ValueParam := r.FormValue("Parameter3.Value")
				parameter30NameParam := r.FormValue("Parameter30.Name")
				parameter30ValueParam := r.FormValue("Parameter30.Value")
				parameter31NameParam := r.FormValue("Parameter31.Name")
				parameter31ValueParam := r.FormValue("Parameter31.Value")
				parameter32NameParam := r.FormValue("Parameter32.Name")
				parameter32ValueParam := r.FormValue("Parameter32.Value")
				parameter33NameParam := r.FormValue("Parameter33.Name")
				parameter33ValueParam := r.FormValue("Parameter33.Value")
				parameter34NameParam := r.FormValue("Parameter34.Name")
				parameter34ValueParam := r.FormValue("Parameter34.Value")
				parameter35NameParam := r.FormValue("Parameter35.Name")
				parameter35ValueParam := r.FormValue("Parameter35.Value")
				parameter36NameParam := r.FormValue("Parameter36.Name")
				parameter36ValueParam := r.FormValue("Parameter36.Value")
				parameter37NameParam := r.FormValue("Parameter37.Name")
				parameter37ValueParam := r.FormValue("Parameter37.Value")
				parameter38NameParam := r.FormValue("Parameter38.Name")
				parameter38ValueParam := r.FormValue("Parameter38.Value")
				parameter39NameParam := r.FormValue("Parameter39.Name")
				parameter39ValueParam := r.FormValue("Parameter39.Value")
				parameter4NameParam := r.FormValue("Parameter4.Name")
				parameter4ValueParam := r.FormValue("Parameter4.Value")
				parameter40NameParam := r.FormValue("Parameter40.Name")
				parameter40ValueParam := r.FormValue("Parameter40.Value")
				parameter41NameParam := r.FormValue("Parameter41.Name")
				parameter41ValueParam := r.FormValue("Parameter41.Value")
				parameter42NameParam := r.FormValue("Parameter42.Name")
				parameter42ValueParam := r.FormValue("Parameter42.Value")
				parameter43NameParam := r.FormValue("Parameter43.Name")
				parameter43ValueParam := r.FormValue("Parameter43.Value")
				parameter44NameParam := r.FormValue("Parameter44.Name")
				parameter44ValueParam := r.FormValue("Parameter44.Value")
				parameter45NameParam := r.FormValue("Parameter45.Name")
				parameter45ValueParam := r.FormValue("Parameter45.Value")
				parameter46NameParam := r.FormValue("Parameter46.Name")
				parameter46ValueParam := r.FormValue("Parameter46.Value")
				parameter47NameParam := r.FormValue("Parameter47.Name")
				parameter47ValueParam := r.FormValue("Parameter47.Value")
				parameter48NameParam := r.FormValue("Parameter48.Name")
				parameter48ValueParam := r.FormValue("Parameter48.Value")
				parameter49NameParam := r.FormValue("Parameter49.Name")
				parameter49ValueParam := r.FormValue("Parameter49.Value")
				parameter5NameParam := r.FormValue("Parameter5.Name")
				parameter5ValueParam := r.FormValue("Parameter5.Value")
				parameter50NameParam := r.FormValue("Parameter50.Name")
				parameter50ValueParam := r.FormValue("Parameter50.Value")
				parameter51NameParam := r.FormValue("Parameter51.Name")
				parameter51ValueParam := r.FormValue("Parameter51.Value")
				parameter52NameParam := r.FormValue("Parameter52.Name")
				parameter52ValueParam := r.FormValue("Parameter52.Value")
				parameter53NameParam := r.FormValue("Parameter53.Name")
				parameter53ValueParam := r.FormValue("Parameter53.Value")
				parameter54NameParam := r.FormValue("Parameter54.Name")
				parameter54ValueParam := r.FormValue("Parameter54.Value")
				parameter55NameParam := r.FormValue("Parameter55.Name")
				parameter55ValueParam := r.FormValue("Parameter55.Value")
				parameter56NameParam := r.FormValue("Parameter56.Name")
				parameter56ValueParam := r.FormValue("Parameter56.Value")
				parameter57NameParam := r.FormValue("Parameter57.Name")
				parameter57ValueParam := r.FormValue("Parameter57.Value")
				parameter58NameParam := r.FormValue("Parameter58.Name")
				parameter58ValueParam := r.FormValue("Parameter58.Value")
				parameter59NameParam := r.FormValue("Parameter59.Name")
				parameter59ValueParam := r.FormValue("Parameter59.Value")
				parameter6NameParam := r.FormValue("Parameter6.Name")
				parameter6ValueParam := r.FormValue("Parameter6.Value")
				parameter60NameParam := r.FormValue("Parameter60.Name")
				parameter60ValueParam := r.FormValue("Parameter60.Value")
				parameter61NameParam := r.FormValue("Parameter61.Name")
				parameter61ValueParam := r.FormValue("Parameter61.Value")
				parameter62NameParam := r.FormValue("Parameter62.Name")
				parameter62ValueParam := r.FormValue("Parameter62.Value")
				parameter63NameParam := r.FormValue("Parameter63.Name")
				parameter63ValueParam := r.FormValue("Parameter63.Value")
				parameter64NameParam := r.FormValue("Parameter64.Name")
				parameter64ValueParam := r.FormValue("Parameter64.Value")
				parameter65NameParam := r.FormValue("Parameter65.Name")
				parameter65ValueParam := r.FormValue("Parameter65.Value")
				parameter66NameParam := r.FormValue("Parameter66.Name")
				parameter66ValueParam := r.FormValue("Parameter66.Value")
				parameter67NameParam := r.FormValue("Parameter67.Name")
				parameter67ValueParam := r.FormValue("Parameter67.Value")
				parameter68NameParam := r.FormValue("Parameter68.Name")
				parameter68ValueParam := r.FormValue("Parameter68.Value")
				parameter69NameParam := r.FormValue("Parameter69.Name")
				parameter69ValueParam := r.FormValue("Parameter69.Value")
				parameter7NameParam := r.FormValue("Parameter7.Name")
				parameter7ValueParam := r.FormValue("Parameter7.Value")
				parameter70NameParam := r.FormValue("Parameter70.Name")
				parameter70ValueParam := r.FormValue("Parameter70.Value")
				parameter71NameParam := r.FormValue("Parameter71.Name")
				parameter71ValueParam := r.FormValue("Parameter71.Value")
				parameter72NameParam := r.FormValue("Parameter72.Name")
				parameter72ValueParam := r.FormValue("Parameter72.Value")
				parameter73NameParam := r.FormValue("Parameter73.Name")
				parameter73ValueParam := r.FormValue("Parameter73.Value")
				parameter74NameParam := r.FormValue("Parameter74.Name")
				parameter74ValueParam := r.FormValue("Parameter74.Value")
				parameter75NameParam := r.FormValue("Parameter75.Name")
				parameter75ValueParam := r.FormValue("Parameter75.Value")
				parameter76NameParam := r.FormValue("Parameter76.Name")
				parameter76ValueParam := r.FormValue("Parameter76.Value")
				parameter77NameParam := r.FormValue("Parameter77.Name")
				parameter77ValueParam := r.FormValue("Parameter77.Value")
				parameter78NameParam := r.FormValue("Parameter78.Name")
				parameter78ValueParam := r.FormValue("Parameter78.Value")
				parameter79NameParam := r.FormValue("Parameter79.Name")
				parameter79ValueParam := r.FormValue("Parameter79.Value")
				parameter8NameParam := r.FormValue("Parameter8.Name")
				parameter8ValueParam := r.FormValue("Parameter8.Value")
				parameter80NameParam := r.FormValue("Parameter80.Name")
				parameter80ValueParam := r.FormValue("Parameter80.Value")
				parameter81NameParam := r.FormValue("Parameter81.Name")
				parameter81ValueParam := r.FormValue("Parameter81.Value")
				parameter82NameParam := r.FormValue("Parameter82.Name")
				parameter82ValueParam := r.FormValue("Parameter82.Value")
				parameter83NameParam := r.FormValue("Parameter83.Name")
				parameter83ValueParam := r.FormValue("Parameter83.Value")
				parameter84NameParam := r.FormValue("Parameter84.Name")
				parameter84ValueParam := r.FormValue("Parameter84.Value")
				parameter85NameParam := r.FormValue("Parameter85.Name")
				parameter85ValueParam := r.FormValue("Parameter85.Value")
				parameter86NameParam := r.FormValue("Parameter86.Name")
				parameter86ValueParam := r.FormValue("Parameter86.Value")
				parameter87NameParam := r.FormValue("Parameter87.Name")
				parameter87ValueParam := r.FormValue("Parameter87.Value")
				parameter88NameParam := r.FormValue("Parameter88.Name")
				parameter88ValueParam := r.FormValue("Parameter88.Value")
				parameter89NameParam := r.FormValue("Parameter89.Name")
				parameter89ValueParam := r.FormValue("Parameter89.Value")
				parameter9NameParam := r.FormValue("Parameter9.Name")
				parameter9ValueParam := r.FormValue("Parameter9.Value")
				parameter90NameParam := r.FormValue("Parameter90.Name")
				parameter90ValueParam := r.FormValue("Parameter90.Value")
				parameter91NameParam := r.FormValue("Parameter91.Name")
				parameter91ValueParam := r.FormValue("Parameter91.Value")
				parameter92NameParam := r.FormValue("Parameter92.Name")
				parameter92ValueParam := r.FormValue("Parameter92.Value")
				parameter93NameParam := r.FormValue("Parameter93.Name")
				parameter93ValueParam := r.FormValue("Parameter93.Value")
				parameter94NameParam := r.FormValue("Parameter94.Name")
				parameter94ValueParam := r.FormValue("Parameter94.Value")
				parameter95NameParam := r.FormValue("Parameter95.Name")
				parameter95ValueParam := r.FormValue("Parameter95.Value")
				parameter96NameParam := r.FormValue("Parameter96.Name")
				parameter96ValueParam := r.FormValue("Parameter96.Value")
				parameter97NameParam := r.FormValue("Parameter97.Name")
				parameter97ValueParam := r.FormValue("Parameter97.Value")
				parameter98NameParam := r.FormValue("Parameter98.Name")
				parameter98ValueParam := r.FormValue("Parameter98.Value")
				parameter99NameParam := r.FormValue("Parameter99.Name")
				parameter99ValueParam := r.FormValue("Parameter99.Value")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				trackParam := r.FormValue("Track")
	result, err := c.service.CreateSiprec(r.Context(), accountSidParam, callSidParam, connectorNameParam, nameParam, parameter1NameParam, parameter1ValueParam, parameter10NameParam, parameter10ValueParam, parameter11NameParam, parameter11ValueParam, parameter12NameParam, parameter12ValueParam, parameter13NameParam, parameter13ValueParam, parameter14NameParam, parameter14ValueParam, parameter15NameParam, parameter15ValueParam, parameter16NameParam, parameter16ValueParam, parameter17NameParam, parameter17ValueParam, parameter18NameParam, parameter18ValueParam, parameter19NameParam, parameter19ValueParam, parameter2NameParam, parameter2ValueParam, parameter20NameParam, parameter20ValueParam, parameter21NameParam, parameter21ValueParam, parameter22NameParam, parameter22ValueParam, parameter23NameParam, parameter23ValueParam, parameter24NameParam, parameter24ValueParam, parameter25NameParam, parameter25ValueParam, parameter26NameParam, parameter26ValueParam, parameter27NameParam, parameter27ValueParam, parameter28NameParam, parameter28ValueParam, parameter29NameParam, parameter29ValueParam, parameter3NameParam, parameter3ValueParam, parameter30NameParam, parameter30ValueParam, parameter31NameParam, parameter31ValueParam, parameter32NameParam, parameter32ValueParam, parameter33NameParam, parameter33ValueParam, parameter34NameParam, parameter34ValueParam, parameter35NameParam, parameter35ValueParam, parameter36NameParam, parameter36ValueParam, parameter37NameParam, parameter37ValueParam, parameter38NameParam, parameter38ValueParam, parameter39NameParam, parameter39ValueParam, parameter4NameParam, parameter4ValueParam, parameter40NameParam, parameter40ValueParam, parameter41NameParam, parameter41ValueParam, parameter42NameParam, parameter42ValueParam, parameter43NameParam, parameter43ValueParam, parameter44NameParam, parameter44ValueParam, parameter45NameParam, parameter45ValueParam, parameter46NameParam, parameter46ValueParam, parameter47NameParam, parameter47ValueParam, parameter48NameParam, parameter48ValueParam, parameter49NameParam, parameter49ValueParam, parameter5NameParam, parameter5ValueParam, parameter50NameParam, parameter50ValueParam, parameter51NameParam, parameter51ValueParam, parameter52NameParam, parameter52ValueParam, parameter53NameParam, parameter53ValueParam, parameter54NameParam, parameter54ValueParam, parameter55NameParam, parameter55ValueParam, parameter56NameParam, parameter56ValueParam, parameter57NameParam, parameter57ValueParam, parameter58NameParam, parameter58ValueParam, parameter59NameParam, parameter59ValueParam, parameter6NameParam, parameter6ValueParam, parameter60NameParam, parameter60ValueParam, parameter61NameParam, parameter61ValueParam, parameter62NameParam, parameter62ValueParam, parameter63NameParam, parameter63ValueParam, parameter64NameParam, parameter64ValueParam, parameter65NameParam, parameter65ValueParam, parameter66NameParam, parameter66ValueParam, parameter67NameParam, parameter67ValueParam, parameter68NameParam, parameter68ValueParam, parameter69NameParam, parameter69ValueParam, parameter7NameParam, parameter7ValueParam, parameter70NameParam, parameter70ValueParam, parameter71NameParam, parameter71ValueParam, parameter72NameParam, parameter72ValueParam, parameter73NameParam, parameter73ValueParam, parameter74NameParam, parameter74ValueParam, parameter75NameParam, parameter75ValueParam, parameter76NameParam, parameter76ValueParam, parameter77NameParam, parameter77ValueParam, parameter78NameParam, parameter78ValueParam, parameter79NameParam, parameter79ValueParam, parameter8NameParam, parameter8ValueParam, parameter80NameParam, parameter80ValueParam, parameter81NameParam, parameter81ValueParam, parameter82NameParam, parameter82ValueParam, parameter83NameParam, parameter83ValueParam, parameter84NameParam, parameter84ValueParam, parameter85NameParam, parameter85ValueParam, parameter86NameParam, parameter86ValueParam, parameter87NameParam, parameter87ValueParam, parameter88NameParam, parameter88ValueParam, parameter89NameParam, parameter89ValueParam, parameter9NameParam, parameter9ValueParam, parameter90NameParam, parameter90ValueParam, parameter91NameParam, parameter91ValueParam, parameter92NameParam, parameter92ValueParam, parameter93NameParam, parameter93ValueParam, parameter94NameParam, parameter94ValueParam, parameter95NameParam, parameter95ValueParam, parameter96NameParam, parameter96ValueParam, parameter97NameParam, parameter97ValueParam, parameter98NameParam, parameter98ValueParam, parameter99NameParam, parameter99ValueParam, statusCallbackParam, statusCallbackMethodParam, trackParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateStream - 
func (c *DefaultApiController) CreateStream(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
				urlParam := r.FormValue("Url")
				nameParam := r.FormValue("Name")
				parameter1NameParam := r.FormValue("Parameter1.Name")
				parameter1ValueParam := r.FormValue("Parameter1.Value")
				parameter10NameParam := r.FormValue("Parameter10.Name")
				parameter10ValueParam := r.FormValue("Parameter10.Value")
				parameter11NameParam := r.FormValue("Parameter11.Name")
				parameter11ValueParam := r.FormValue("Parameter11.Value")
				parameter12NameParam := r.FormValue("Parameter12.Name")
				parameter12ValueParam := r.FormValue("Parameter12.Value")
				parameter13NameParam := r.FormValue("Parameter13.Name")
				parameter13ValueParam := r.FormValue("Parameter13.Value")
				parameter14NameParam := r.FormValue("Parameter14.Name")
				parameter14ValueParam := r.FormValue("Parameter14.Value")
				parameter15NameParam := r.FormValue("Parameter15.Name")
				parameter15ValueParam := r.FormValue("Parameter15.Value")
				parameter16NameParam := r.FormValue("Parameter16.Name")
				parameter16ValueParam := r.FormValue("Parameter16.Value")
				parameter17NameParam := r.FormValue("Parameter17.Name")
				parameter17ValueParam := r.FormValue("Parameter17.Value")
				parameter18NameParam := r.FormValue("Parameter18.Name")
				parameter18ValueParam := r.FormValue("Parameter18.Value")
				parameter19NameParam := r.FormValue("Parameter19.Name")
				parameter19ValueParam := r.FormValue("Parameter19.Value")
				parameter2NameParam := r.FormValue("Parameter2.Name")
				parameter2ValueParam := r.FormValue("Parameter2.Value")
				parameter20NameParam := r.FormValue("Parameter20.Name")
				parameter20ValueParam := r.FormValue("Parameter20.Value")
				parameter21NameParam := r.FormValue("Parameter21.Name")
				parameter21ValueParam := r.FormValue("Parameter21.Value")
				parameter22NameParam := r.FormValue("Parameter22.Name")
				parameter22ValueParam := r.FormValue("Parameter22.Value")
				parameter23NameParam := r.FormValue("Parameter23.Name")
				parameter23ValueParam := r.FormValue("Parameter23.Value")
				parameter24NameParam := r.FormValue("Parameter24.Name")
				parameter24ValueParam := r.FormValue("Parameter24.Value")
				parameter25NameParam := r.FormValue("Parameter25.Name")
				parameter25ValueParam := r.FormValue("Parameter25.Value")
				parameter26NameParam := r.FormValue("Parameter26.Name")
				parameter26ValueParam := r.FormValue("Parameter26.Value")
				parameter27NameParam := r.FormValue("Parameter27.Name")
				parameter27ValueParam := r.FormValue("Parameter27.Value")
				parameter28NameParam := r.FormValue("Parameter28.Name")
				parameter28ValueParam := r.FormValue("Parameter28.Value")
				parameter29NameParam := r.FormValue("Parameter29.Name")
				parameter29ValueParam := r.FormValue("Parameter29.Value")
				parameter3NameParam := r.FormValue("Parameter3.Name")
				parameter3ValueParam := r.FormValue("Parameter3.Value")
				parameter30NameParam := r.FormValue("Parameter30.Name")
				parameter30ValueParam := r.FormValue("Parameter30.Value")
				parameter31NameParam := r.FormValue("Parameter31.Name")
				parameter31ValueParam := r.FormValue("Parameter31.Value")
				parameter32NameParam := r.FormValue("Parameter32.Name")
				parameter32ValueParam := r.FormValue("Parameter32.Value")
				parameter33NameParam := r.FormValue("Parameter33.Name")
				parameter33ValueParam := r.FormValue("Parameter33.Value")
				parameter34NameParam := r.FormValue("Parameter34.Name")
				parameter34ValueParam := r.FormValue("Parameter34.Value")
				parameter35NameParam := r.FormValue("Parameter35.Name")
				parameter35ValueParam := r.FormValue("Parameter35.Value")
				parameter36NameParam := r.FormValue("Parameter36.Name")
				parameter36ValueParam := r.FormValue("Parameter36.Value")
				parameter37NameParam := r.FormValue("Parameter37.Name")
				parameter37ValueParam := r.FormValue("Parameter37.Value")
				parameter38NameParam := r.FormValue("Parameter38.Name")
				parameter38ValueParam := r.FormValue("Parameter38.Value")
				parameter39NameParam := r.FormValue("Parameter39.Name")
				parameter39ValueParam := r.FormValue("Parameter39.Value")
				parameter4NameParam := r.FormValue("Parameter4.Name")
				parameter4ValueParam := r.FormValue("Parameter4.Value")
				parameter40NameParam := r.FormValue("Parameter40.Name")
				parameter40ValueParam := r.FormValue("Parameter40.Value")
				parameter41NameParam := r.FormValue("Parameter41.Name")
				parameter41ValueParam := r.FormValue("Parameter41.Value")
				parameter42NameParam := r.FormValue("Parameter42.Name")
				parameter42ValueParam := r.FormValue("Parameter42.Value")
				parameter43NameParam := r.FormValue("Parameter43.Name")
				parameter43ValueParam := r.FormValue("Parameter43.Value")
				parameter44NameParam := r.FormValue("Parameter44.Name")
				parameter44ValueParam := r.FormValue("Parameter44.Value")
				parameter45NameParam := r.FormValue("Parameter45.Name")
				parameter45ValueParam := r.FormValue("Parameter45.Value")
				parameter46NameParam := r.FormValue("Parameter46.Name")
				parameter46ValueParam := r.FormValue("Parameter46.Value")
				parameter47NameParam := r.FormValue("Parameter47.Name")
				parameter47ValueParam := r.FormValue("Parameter47.Value")
				parameter48NameParam := r.FormValue("Parameter48.Name")
				parameter48ValueParam := r.FormValue("Parameter48.Value")
				parameter49NameParam := r.FormValue("Parameter49.Name")
				parameter49ValueParam := r.FormValue("Parameter49.Value")
				parameter5NameParam := r.FormValue("Parameter5.Name")
				parameter5ValueParam := r.FormValue("Parameter5.Value")
				parameter50NameParam := r.FormValue("Parameter50.Name")
				parameter50ValueParam := r.FormValue("Parameter50.Value")
				parameter51NameParam := r.FormValue("Parameter51.Name")
				parameter51ValueParam := r.FormValue("Parameter51.Value")
				parameter52NameParam := r.FormValue("Parameter52.Name")
				parameter52ValueParam := r.FormValue("Parameter52.Value")
				parameter53NameParam := r.FormValue("Parameter53.Name")
				parameter53ValueParam := r.FormValue("Parameter53.Value")
				parameter54NameParam := r.FormValue("Parameter54.Name")
				parameter54ValueParam := r.FormValue("Parameter54.Value")
				parameter55NameParam := r.FormValue("Parameter55.Name")
				parameter55ValueParam := r.FormValue("Parameter55.Value")
				parameter56NameParam := r.FormValue("Parameter56.Name")
				parameter56ValueParam := r.FormValue("Parameter56.Value")
				parameter57NameParam := r.FormValue("Parameter57.Name")
				parameter57ValueParam := r.FormValue("Parameter57.Value")
				parameter58NameParam := r.FormValue("Parameter58.Name")
				parameter58ValueParam := r.FormValue("Parameter58.Value")
				parameter59NameParam := r.FormValue("Parameter59.Name")
				parameter59ValueParam := r.FormValue("Parameter59.Value")
				parameter6NameParam := r.FormValue("Parameter6.Name")
				parameter6ValueParam := r.FormValue("Parameter6.Value")
				parameter60NameParam := r.FormValue("Parameter60.Name")
				parameter60ValueParam := r.FormValue("Parameter60.Value")
				parameter61NameParam := r.FormValue("Parameter61.Name")
				parameter61ValueParam := r.FormValue("Parameter61.Value")
				parameter62NameParam := r.FormValue("Parameter62.Name")
				parameter62ValueParam := r.FormValue("Parameter62.Value")
				parameter63NameParam := r.FormValue("Parameter63.Name")
				parameter63ValueParam := r.FormValue("Parameter63.Value")
				parameter64NameParam := r.FormValue("Parameter64.Name")
				parameter64ValueParam := r.FormValue("Parameter64.Value")
				parameter65NameParam := r.FormValue("Parameter65.Name")
				parameter65ValueParam := r.FormValue("Parameter65.Value")
				parameter66NameParam := r.FormValue("Parameter66.Name")
				parameter66ValueParam := r.FormValue("Parameter66.Value")
				parameter67NameParam := r.FormValue("Parameter67.Name")
				parameter67ValueParam := r.FormValue("Parameter67.Value")
				parameter68NameParam := r.FormValue("Parameter68.Name")
				parameter68ValueParam := r.FormValue("Parameter68.Value")
				parameter69NameParam := r.FormValue("Parameter69.Name")
				parameter69ValueParam := r.FormValue("Parameter69.Value")
				parameter7NameParam := r.FormValue("Parameter7.Name")
				parameter7ValueParam := r.FormValue("Parameter7.Value")
				parameter70NameParam := r.FormValue("Parameter70.Name")
				parameter70ValueParam := r.FormValue("Parameter70.Value")
				parameter71NameParam := r.FormValue("Parameter71.Name")
				parameter71ValueParam := r.FormValue("Parameter71.Value")
				parameter72NameParam := r.FormValue("Parameter72.Name")
				parameter72ValueParam := r.FormValue("Parameter72.Value")
				parameter73NameParam := r.FormValue("Parameter73.Name")
				parameter73ValueParam := r.FormValue("Parameter73.Value")
				parameter74NameParam := r.FormValue("Parameter74.Name")
				parameter74ValueParam := r.FormValue("Parameter74.Value")
				parameter75NameParam := r.FormValue("Parameter75.Name")
				parameter75ValueParam := r.FormValue("Parameter75.Value")
				parameter76NameParam := r.FormValue("Parameter76.Name")
				parameter76ValueParam := r.FormValue("Parameter76.Value")
				parameter77NameParam := r.FormValue("Parameter77.Name")
				parameter77ValueParam := r.FormValue("Parameter77.Value")
				parameter78NameParam := r.FormValue("Parameter78.Name")
				parameter78ValueParam := r.FormValue("Parameter78.Value")
				parameter79NameParam := r.FormValue("Parameter79.Name")
				parameter79ValueParam := r.FormValue("Parameter79.Value")
				parameter8NameParam := r.FormValue("Parameter8.Name")
				parameter8ValueParam := r.FormValue("Parameter8.Value")
				parameter80NameParam := r.FormValue("Parameter80.Name")
				parameter80ValueParam := r.FormValue("Parameter80.Value")
				parameter81NameParam := r.FormValue("Parameter81.Name")
				parameter81ValueParam := r.FormValue("Parameter81.Value")
				parameter82NameParam := r.FormValue("Parameter82.Name")
				parameter82ValueParam := r.FormValue("Parameter82.Value")
				parameter83NameParam := r.FormValue("Parameter83.Name")
				parameter83ValueParam := r.FormValue("Parameter83.Value")
				parameter84NameParam := r.FormValue("Parameter84.Name")
				parameter84ValueParam := r.FormValue("Parameter84.Value")
				parameter85NameParam := r.FormValue("Parameter85.Name")
				parameter85ValueParam := r.FormValue("Parameter85.Value")
				parameter86NameParam := r.FormValue("Parameter86.Name")
				parameter86ValueParam := r.FormValue("Parameter86.Value")
				parameter87NameParam := r.FormValue("Parameter87.Name")
				parameter87ValueParam := r.FormValue("Parameter87.Value")
				parameter88NameParam := r.FormValue("Parameter88.Name")
				parameter88ValueParam := r.FormValue("Parameter88.Value")
				parameter89NameParam := r.FormValue("Parameter89.Name")
				parameter89ValueParam := r.FormValue("Parameter89.Value")
				parameter9NameParam := r.FormValue("Parameter9.Name")
				parameter9ValueParam := r.FormValue("Parameter9.Value")
				parameter90NameParam := r.FormValue("Parameter90.Name")
				parameter90ValueParam := r.FormValue("Parameter90.Value")
				parameter91NameParam := r.FormValue("Parameter91.Name")
				parameter91ValueParam := r.FormValue("Parameter91.Value")
				parameter92NameParam := r.FormValue("Parameter92.Name")
				parameter92ValueParam := r.FormValue("Parameter92.Value")
				parameter93NameParam := r.FormValue("Parameter93.Name")
				parameter93ValueParam := r.FormValue("Parameter93.Value")
				parameter94NameParam := r.FormValue("Parameter94.Name")
				parameter94ValueParam := r.FormValue("Parameter94.Value")
				parameter95NameParam := r.FormValue("Parameter95.Name")
				parameter95ValueParam := r.FormValue("Parameter95.Value")
				parameter96NameParam := r.FormValue("Parameter96.Name")
				parameter96ValueParam := r.FormValue("Parameter96.Value")
				parameter97NameParam := r.FormValue("Parameter97.Name")
				parameter97ValueParam := r.FormValue("Parameter97.Value")
				parameter98NameParam := r.FormValue("Parameter98.Name")
				parameter98ValueParam := r.FormValue("Parameter98.Value")
				parameter99NameParam := r.FormValue("Parameter99.Name")
				parameter99ValueParam := r.FormValue("Parameter99.Value")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				trackParam := r.FormValue("Track")
	result, err := c.service.CreateStream(r.Context(), accountSidParam, callSidParam, urlParam, nameParam, parameter1NameParam, parameter1ValueParam, parameter10NameParam, parameter10ValueParam, parameter11NameParam, parameter11ValueParam, parameter12NameParam, parameter12ValueParam, parameter13NameParam, parameter13ValueParam, parameter14NameParam, parameter14ValueParam, parameter15NameParam, parameter15ValueParam, parameter16NameParam, parameter16ValueParam, parameter17NameParam, parameter17ValueParam, parameter18NameParam, parameter18ValueParam, parameter19NameParam, parameter19ValueParam, parameter2NameParam, parameter2ValueParam, parameter20NameParam, parameter20ValueParam, parameter21NameParam, parameter21ValueParam, parameter22NameParam, parameter22ValueParam, parameter23NameParam, parameter23ValueParam, parameter24NameParam, parameter24ValueParam, parameter25NameParam, parameter25ValueParam, parameter26NameParam, parameter26ValueParam, parameter27NameParam, parameter27ValueParam, parameter28NameParam, parameter28ValueParam, parameter29NameParam, parameter29ValueParam, parameter3NameParam, parameter3ValueParam, parameter30NameParam, parameter30ValueParam, parameter31NameParam, parameter31ValueParam, parameter32NameParam, parameter32ValueParam, parameter33NameParam, parameter33ValueParam, parameter34NameParam, parameter34ValueParam, parameter35NameParam, parameter35ValueParam, parameter36NameParam, parameter36ValueParam, parameter37NameParam, parameter37ValueParam, parameter38NameParam, parameter38ValueParam, parameter39NameParam, parameter39ValueParam, parameter4NameParam, parameter4ValueParam, parameter40NameParam, parameter40ValueParam, parameter41NameParam, parameter41ValueParam, parameter42NameParam, parameter42ValueParam, parameter43NameParam, parameter43ValueParam, parameter44NameParam, parameter44ValueParam, parameter45NameParam, parameter45ValueParam, parameter46NameParam, parameter46ValueParam, parameter47NameParam, parameter47ValueParam, parameter48NameParam, parameter48ValueParam, parameter49NameParam, parameter49ValueParam, parameter5NameParam, parameter5ValueParam, parameter50NameParam, parameter50ValueParam, parameter51NameParam, parameter51ValueParam, parameter52NameParam, parameter52ValueParam, parameter53NameParam, parameter53ValueParam, parameter54NameParam, parameter54ValueParam, parameter55NameParam, parameter55ValueParam, parameter56NameParam, parameter56ValueParam, parameter57NameParam, parameter57ValueParam, parameter58NameParam, parameter58ValueParam, parameter59NameParam, parameter59ValueParam, parameter6NameParam, parameter6ValueParam, parameter60NameParam, parameter60ValueParam, parameter61NameParam, parameter61ValueParam, parameter62NameParam, parameter62ValueParam, parameter63NameParam, parameter63ValueParam, parameter64NameParam, parameter64ValueParam, parameter65NameParam, parameter65ValueParam, parameter66NameParam, parameter66ValueParam, parameter67NameParam, parameter67ValueParam, parameter68NameParam, parameter68ValueParam, parameter69NameParam, parameter69ValueParam, parameter7NameParam, parameter7ValueParam, parameter70NameParam, parameter70ValueParam, parameter71NameParam, parameter71ValueParam, parameter72NameParam, parameter72ValueParam, parameter73NameParam, parameter73ValueParam, parameter74NameParam, parameter74ValueParam, parameter75NameParam, parameter75ValueParam, parameter76NameParam, parameter76ValueParam, parameter77NameParam, parameter77ValueParam, parameter78NameParam, parameter78ValueParam, parameter79NameParam, parameter79ValueParam, parameter8NameParam, parameter8ValueParam, parameter80NameParam, parameter80ValueParam, parameter81NameParam, parameter81ValueParam, parameter82NameParam, parameter82ValueParam, parameter83NameParam, parameter83ValueParam, parameter84NameParam, parameter84ValueParam, parameter85NameParam, parameter85ValueParam, parameter86NameParam, parameter86ValueParam, parameter87NameParam, parameter87ValueParam, parameter88NameParam, parameter88ValueParam, parameter89NameParam, parameter89ValueParam, parameter9NameParam, parameter9ValueParam, parameter90NameParam, parameter90ValueParam, parameter91NameParam, parameter91ValueParam, parameter92NameParam, parameter92ValueParam, parameter93NameParam, parameter93ValueParam, parameter94NameParam, parameter94ValueParam, parameter95NameParam, parameter95ValueParam, parameter96NameParam, parameter96ValueParam, parameter97NameParam, parameter97ValueParam, parameter98NameParam, parameter98ValueParam, parameter99NameParam, parameter99ValueParam, statusCallbackParam, statusCallbackMethodParam, trackParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateToken - 
func (c *DefaultApiController) CreateToken(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
			
	ttlParam, err := parseInt32Parameter(r.FormValue("Ttl"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	ttlParam := r.FormValue("Ttl")
	result, err := c.service.CreateToken(r.Context(), accountSidParam, ttlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateUsageTrigger - 
func (c *DefaultApiController) CreateUsageTrigger(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				callbackUrlParam := r.FormValue("CallbackUrl")
				triggerValueParam := r.FormValue("TriggerValue")
				usageCategoryParam := r.FormValue("UsageCategory")
				callbackMethodParam := r.FormValue("CallbackMethod")
				friendlyNameParam := r.FormValue("FriendlyName")
				recurringParam := r.FormValue("Recurring")
				triggerByParam := r.FormValue("TriggerBy")
	result, err := c.service.CreateUsageTrigger(r.Context(), accountSidParam, callbackUrlParam, triggerValueParam, usageCategoryParam, callbackMethodParam, friendlyNameParam, recurringParam, triggerByParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// CreateValidationRequest - 
func (c *DefaultApiController) CreateValidationRequest(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
				phoneNumberParam := r.FormValue("PhoneNumber")
			
	callDelayParam, err := parseInt32Parameter(r.FormValue("CallDelay"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	callDelayParam := r.FormValue("CallDelay")
				extensionParam := r.FormValue("Extension")
				friendlyNameParam := r.FormValue("FriendlyName")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
	result, err := c.service.CreateValidationRequest(r.Context(), accountSidParam, phoneNumberParam, callDelayParam, extensionParam, friendlyNameParam, statusCallbackParam, statusCallbackMethodParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteAddress - 
func (c *DefaultApiController) DeleteAddress(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteAddress(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteApplication - 
func (c *DefaultApiController) DeleteApplication(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteApplication(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteCall - 
func (c *DefaultApiController) DeleteCall(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteCall(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteCallFeedbackSummary - 
func (c *DefaultApiController) DeleteCallFeedbackSummary(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteCallFeedbackSummary(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteCallRecording - 
func (c *DefaultApiController) DeleteCallRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteCallRecording(r.Context(), accountSidParam, callSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteConferenceRecording - 
func (c *DefaultApiController) DeleteConferenceRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteConferenceRecording(r.Context(), accountSidParam, conferenceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteConnectApp - 
func (c *DefaultApiController) DeleteConnectApp(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteConnectApp(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteIncomingPhoneNumber - 
func (c *DefaultApiController) DeleteIncomingPhoneNumber(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteIncomingPhoneNumber(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteIncomingPhoneNumberAssignedAddOn - 
func (c *DefaultApiController) DeleteIncomingPhoneNumberAssignedAddOn(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	resourceSidParam := params["ResourceSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteIncomingPhoneNumberAssignedAddOn(r.Context(), accountSidParam, resourceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteKey - 
func (c *DefaultApiController) DeleteKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteKey(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteMedia - 
func (c *DefaultApiController) DeleteMedia(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	messageSidParam := params["MessageSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteMedia(r.Context(), accountSidParam, messageSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteMessage - 
func (c *DefaultApiController) DeleteMessage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteMessage(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteOutgoingCallerId - 
func (c *DefaultApiController) DeleteOutgoingCallerId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteOutgoingCallerId(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteParticipant - 
func (c *DefaultApiController) DeleteParticipant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	callSidParam := params["CallSid"]
	
	result, err := c.service.DeleteParticipant(r.Context(), accountSidParam, conferenceSidParam, callSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteQueue - 
func (c *DefaultApiController) DeleteQueue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteQueue(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteRecording - 
func (c *DefaultApiController) DeleteRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteRecording(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteRecordingAddOnResult - 
func (c *DefaultApiController) DeleteRecordingAddOnResult(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	referenceSidParam := params["ReferenceSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteRecordingAddOnResult(r.Context(), accountSidParam, referenceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteRecordingAddOnResultPayload - 
func (c *DefaultApiController) DeleteRecordingAddOnResultPayload(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	referenceSidParam := params["ReferenceSid"]
	
	addOnResultSidParam := params["AddOnResultSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteRecordingAddOnResultPayload(r.Context(), accountSidParam, referenceSidParam, addOnResultSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteRecordingTranscription - 
func (c *DefaultApiController) DeleteRecordingTranscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	recordingSidParam := params["RecordingSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteRecordingTranscription(r.Context(), accountSidParam, recordingSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSigningKey - 
func (c *DefaultApiController) DeleteSigningKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSigningKey(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipAuthCallsCredentialListMapping - 
func (c *DefaultApiController) DeleteSipAuthCallsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipAuthCallsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipAuthCallsIpAccessControlListMapping - 
func (c *DefaultApiController) DeleteSipAuthCallsIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipAuthCallsIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipAuthRegistrationsCredentialListMapping - 
func (c *DefaultApiController) DeleteSipAuthRegistrationsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipAuthRegistrationsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipCredential - 
func (c *DefaultApiController) DeleteSipCredential(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	credentialListSidParam := params["CredentialListSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipCredential(r.Context(), accountSidParam, credentialListSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipCredentialList - 
func (c *DefaultApiController) DeleteSipCredentialList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipCredentialList(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipCredentialListMapping - 
func (c *DefaultApiController) DeleteSipCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipCredentialListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipDomain - 
func (c *DefaultApiController) DeleteSipDomain(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipDomain(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipIpAccessControlList - 
func (c *DefaultApiController) DeleteSipIpAccessControlList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipIpAccessControlList(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipIpAccessControlListMapping - 
func (c *DefaultApiController) DeleteSipIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteSipIpAddress - 
func (c *DefaultApiController) DeleteSipIpAddress(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	ipAccessControlListSidParam := params["IpAccessControlListSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteSipIpAddress(r.Context(), accountSidParam, ipAccessControlListSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteTranscription - 
func (c *DefaultApiController) DeleteTranscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteTranscription(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// DeleteUsageTrigger - 
func (c *DefaultApiController) DeleteUsageTrigger(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.DeleteUsageTrigger(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchAccount - 
func (c *DefaultApiController) FetchAccount(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sidParam := params["Sid"]
	
	result, err := c.service.FetchAccount(r.Context(), sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchAddress - 
func (c *DefaultApiController) FetchAddress(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchAddress(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchApplication - 
func (c *DefaultApiController) FetchApplication(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchApplication(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchAuthorizedConnectApp - 
func (c *DefaultApiController) FetchAuthorizedConnectApp(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	connectAppSidParam := params["ConnectAppSid"]
	
	result, err := c.service.FetchAuthorizedConnectApp(r.Context(), accountSidParam, connectAppSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchAvailablePhoneNumberCountry - 
func (c *DefaultApiController) FetchAvailablePhoneNumberCountry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	result, err := c.service.FetchAvailablePhoneNumberCountry(r.Context(), accountSidParam, countryCodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchBalance - 
func (c *DefaultApiController) FetchBalance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	result, err := c.service.FetchBalance(r.Context(), accountSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchCall - 
func (c *DefaultApiController) FetchCall(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchCall(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchCallFeedback - 
func (c *DefaultApiController) FetchCallFeedback(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	result, err := c.service.FetchCallFeedback(r.Context(), accountSidParam, callSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchCallFeedbackSummary - 
func (c *DefaultApiController) FetchCallFeedbackSummary(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchCallFeedbackSummary(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchCallNotification - 
func (c *DefaultApiController) FetchCallNotification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchCallNotification(r.Context(), accountSidParam, callSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchCallRecording - 
func (c *DefaultApiController) FetchCallRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchCallRecording(r.Context(), accountSidParam, callSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchConference - 
func (c *DefaultApiController) FetchConference(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchConference(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchConferenceRecording - 
func (c *DefaultApiController) FetchConferenceRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchConferenceRecording(r.Context(), accountSidParam, conferenceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchConnectApp - 
func (c *DefaultApiController) FetchConnectApp(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchConnectApp(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchIncomingPhoneNumber - 
func (c *DefaultApiController) FetchIncomingPhoneNumber(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchIncomingPhoneNumber(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchIncomingPhoneNumberAssignedAddOn - 
func (c *DefaultApiController) FetchIncomingPhoneNumberAssignedAddOn(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	resourceSidParam := params["ResourceSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchIncomingPhoneNumberAssignedAddOn(r.Context(), accountSidParam, resourceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchIncomingPhoneNumberAssignedAddOnExtension - 
func (c *DefaultApiController) FetchIncomingPhoneNumberAssignedAddOnExtension(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	resourceSidParam := params["ResourceSid"]
	
	assignedAddOnSidParam := params["AssignedAddOnSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchIncomingPhoneNumberAssignedAddOnExtension(r.Context(), accountSidParam, resourceSidParam, assignedAddOnSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchKey - 
func (c *DefaultApiController) FetchKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchKey(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchMedia - 
func (c *DefaultApiController) FetchMedia(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	messageSidParam := params["MessageSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchMedia(r.Context(), accountSidParam, messageSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchMember - 
func (c *DefaultApiController) FetchMember(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	queueSidParam := params["QueueSid"]
	
	callSidParam := params["CallSid"]
	
	result, err := c.service.FetchMember(r.Context(), accountSidParam, queueSidParam, callSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchMessage - 
func (c *DefaultApiController) FetchMessage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchMessage(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchNotification - 
func (c *DefaultApiController) FetchNotification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchNotification(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchOutgoingCallerId - 
func (c *DefaultApiController) FetchOutgoingCallerId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchOutgoingCallerId(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchParticipant - 
func (c *DefaultApiController) FetchParticipant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	callSidParam := params["CallSid"]
	
	result, err := c.service.FetchParticipant(r.Context(), accountSidParam, conferenceSidParam, callSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchQueue - 
func (c *DefaultApiController) FetchQueue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchQueue(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchRecording - 
func (c *DefaultApiController) FetchRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	includeSoftDeletedParam, err := parseBoolParameter(query.Get("IncludeSoftDeleted"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	result, err := c.service.FetchRecording(r.Context(), accountSidParam, sidParam, includeSoftDeletedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchRecordingAddOnResult - 
func (c *DefaultApiController) FetchRecordingAddOnResult(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	referenceSidParam := params["ReferenceSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchRecordingAddOnResult(r.Context(), accountSidParam, referenceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchRecordingAddOnResultPayload - 
func (c *DefaultApiController) FetchRecordingAddOnResultPayload(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	referenceSidParam := params["ReferenceSid"]
	
	addOnResultSidParam := params["AddOnResultSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchRecordingAddOnResultPayload(r.Context(), accountSidParam, referenceSidParam, addOnResultSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchRecordingTranscription - 
func (c *DefaultApiController) FetchRecordingTranscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	recordingSidParam := params["RecordingSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchRecordingTranscription(r.Context(), accountSidParam, recordingSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchShortCode - 
func (c *DefaultApiController) FetchShortCode(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchShortCode(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSigningKey - 
func (c *DefaultApiController) FetchSigningKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSigningKey(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipAuthCallsCredentialListMapping - 
func (c *DefaultApiController) FetchSipAuthCallsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipAuthCallsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipAuthCallsIpAccessControlListMapping - 
func (c *DefaultApiController) FetchSipAuthCallsIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipAuthCallsIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipAuthRegistrationsCredentialListMapping - 
func (c *DefaultApiController) FetchSipAuthRegistrationsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipAuthRegistrationsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipCredential - 
func (c *DefaultApiController) FetchSipCredential(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	credentialListSidParam := params["CredentialListSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipCredential(r.Context(), accountSidParam, credentialListSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipCredentialList - 
func (c *DefaultApiController) FetchSipCredentialList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipCredentialList(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipCredentialListMapping - 
func (c *DefaultApiController) FetchSipCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipCredentialListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipDomain - 
func (c *DefaultApiController) FetchSipDomain(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipDomain(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipIpAccessControlList - 
func (c *DefaultApiController) FetchSipIpAccessControlList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipIpAccessControlList(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipIpAccessControlListMapping - 
func (c *DefaultApiController) FetchSipIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchSipIpAddress - 
func (c *DefaultApiController) FetchSipIpAddress(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	ipAccessControlListSidParam := params["IpAccessControlListSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchSipIpAddress(r.Context(), accountSidParam, ipAccessControlListSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchTranscription - 
func (c *DefaultApiController) FetchTranscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchTranscription(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// FetchUsageTrigger - 
func (c *DefaultApiController) FetchUsageTrigger(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
	result, err := c.service.FetchUsageTrigger(r.Context(), accountSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAccount - 
func (c *DefaultApiController) ListAccount(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	friendlyNameParam := query.Get("FriendlyName")
	statusParam := query.Get("Status")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAccount(r.Context(), friendlyNameParam, statusParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAddress - 
func (c *DefaultApiController) ListAddress(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	customerNameParam := query.Get("CustomerName")
	friendlyNameParam := query.Get("FriendlyName")
	isoCountryParam := query.Get("IsoCountry")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAddress(r.Context(), accountSidParam, customerNameParam, friendlyNameParam, isoCountryParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListApplication - 
func (c *DefaultApiController) ListApplication(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	friendlyNameParam := query.Get("FriendlyName")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListApplication(r.Context(), accountSidParam, friendlyNameParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAuthorizedConnectApp - 
func (c *DefaultApiController) ListAuthorizedConnectApp(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAuthorizedConnectApp(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberCountry - 
func (c *DefaultApiController) ListAvailablePhoneNumberCountry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberCountry(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberLocal - 
func (c *DefaultApiController) ListAvailablePhoneNumberLocal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	areaCodeParam, err := parseInt32Parameter(query.Get("AreaCode"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containsParam := query.Get("Contains")
	smsEnabledParam, err := parseBoolParameter(query.Get("SmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	mmsEnabledParam, err := parseBoolParameter(query.Get("MmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	voiceEnabledParam, err := parseBoolParameter(query.Get("VoiceEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeAllAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeAllAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeLocalAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeLocalAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeForeignAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeForeignAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	nearNumberParam := query.Get("NearNumber")
	nearLatLongParam := query.Get("NearLatLong")
	distanceParam, err := parseInt32Parameter(query.Get("Distance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inPostalCodeParam := query.Get("InPostalCode")
	inRegionParam := query.Get("InRegion")
	inRateCenterParam := query.Get("InRateCenter")
	inLataParam := query.Get("InLata")
	inLocalityParam := query.Get("InLocality")
	faxEnabledParam, err := parseBoolParameter(query.Get("FaxEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberLocal(r.Context(), accountSidParam, countryCodeParam, areaCodeParam, containsParam, smsEnabledParam, mmsEnabledParam, voiceEnabledParam, excludeAllAddressRequiredParam, excludeLocalAddressRequiredParam, excludeForeignAddressRequiredParam, betaParam, nearNumberParam, nearLatLongParam, distanceParam, inPostalCodeParam, inRegionParam, inRateCenterParam, inLataParam, inLocalityParam, faxEnabledParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberMachineToMachine - 
func (c *DefaultApiController) ListAvailablePhoneNumberMachineToMachine(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	areaCodeParam, err := parseInt32Parameter(query.Get("AreaCode"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containsParam := query.Get("Contains")
	smsEnabledParam, err := parseBoolParameter(query.Get("SmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	mmsEnabledParam, err := parseBoolParameter(query.Get("MmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	voiceEnabledParam, err := parseBoolParameter(query.Get("VoiceEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeAllAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeAllAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeLocalAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeLocalAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeForeignAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeForeignAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	nearNumberParam := query.Get("NearNumber")
	nearLatLongParam := query.Get("NearLatLong")
	distanceParam, err := parseInt32Parameter(query.Get("Distance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inPostalCodeParam := query.Get("InPostalCode")
	inRegionParam := query.Get("InRegion")
	inRateCenterParam := query.Get("InRateCenter")
	inLataParam := query.Get("InLata")
	inLocalityParam := query.Get("InLocality")
	faxEnabledParam, err := parseBoolParameter(query.Get("FaxEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberMachineToMachine(r.Context(), accountSidParam, countryCodeParam, areaCodeParam, containsParam, smsEnabledParam, mmsEnabledParam, voiceEnabledParam, excludeAllAddressRequiredParam, excludeLocalAddressRequiredParam, excludeForeignAddressRequiredParam, betaParam, nearNumberParam, nearLatLongParam, distanceParam, inPostalCodeParam, inRegionParam, inRateCenterParam, inLataParam, inLocalityParam, faxEnabledParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberMobile - 
func (c *DefaultApiController) ListAvailablePhoneNumberMobile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	areaCodeParam, err := parseInt32Parameter(query.Get("AreaCode"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containsParam := query.Get("Contains")
	smsEnabledParam, err := parseBoolParameter(query.Get("SmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	mmsEnabledParam, err := parseBoolParameter(query.Get("MmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	voiceEnabledParam, err := parseBoolParameter(query.Get("VoiceEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeAllAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeAllAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeLocalAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeLocalAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeForeignAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeForeignAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	nearNumberParam := query.Get("NearNumber")
	nearLatLongParam := query.Get("NearLatLong")
	distanceParam, err := parseInt32Parameter(query.Get("Distance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inPostalCodeParam := query.Get("InPostalCode")
	inRegionParam := query.Get("InRegion")
	inRateCenterParam := query.Get("InRateCenter")
	inLataParam := query.Get("InLata")
	inLocalityParam := query.Get("InLocality")
	faxEnabledParam, err := parseBoolParameter(query.Get("FaxEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberMobile(r.Context(), accountSidParam, countryCodeParam, areaCodeParam, containsParam, smsEnabledParam, mmsEnabledParam, voiceEnabledParam, excludeAllAddressRequiredParam, excludeLocalAddressRequiredParam, excludeForeignAddressRequiredParam, betaParam, nearNumberParam, nearLatLongParam, distanceParam, inPostalCodeParam, inRegionParam, inRateCenterParam, inLataParam, inLocalityParam, faxEnabledParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberNational - 
func (c *DefaultApiController) ListAvailablePhoneNumberNational(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	areaCodeParam, err := parseInt32Parameter(query.Get("AreaCode"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containsParam := query.Get("Contains")
	smsEnabledParam, err := parseBoolParameter(query.Get("SmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	mmsEnabledParam, err := parseBoolParameter(query.Get("MmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	voiceEnabledParam, err := parseBoolParameter(query.Get("VoiceEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeAllAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeAllAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeLocalAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeLocalAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeForeignAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeForeignAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	nearNumberParam := query.Get("NearNumber")
	nearLatLongParam := query.Get("NearLatLong")
	distanceParam, err := parseInt32Parameter(query.Get("Distance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inPostalCodeParam := query.Get("InPostalCode")
	inRegionParam := query.Get("InRegion")
	inRateCenterParam := query.Get("InRateCenter")
	inLataParam := query.Get("InLata")
	inLocalityParam := query.Get("InLocality")
	faxEnabledParam, err := parseBoolParameter(query.Get("FaxEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberNational(r.Context(), accountSidParam, countryCodeParam, areaCodeParam, containsParam, smsEnabledParam, mmsEnabledParam, voiceEnabledParam, excludeAllAddressRequiredParam, excludeLocalAddressRequiredParam, excludeForeignAddressRequiredParam, betaParam, nearNumberParam, nearLatLongParam, distanceParam, inPostalCodeParam, inRegionParam, inRateCenterParam, inLataParam, inLocalityParam, faxEnabledParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberSharedCost - 
func (c *DefaultApiController) ListAvailablePhoneNumberSharedCost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	areaCodeParam, err := parseInt32Parameter(query.Get("AreaCode"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containsParam := query.Get("Contains")
	smsEnabledParam, err := parseBoolParameter(query.Get("SmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	mmsEnabledParam, err := parseBoolParameter(query.Get("MmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	voiceEnabledParam, err := parseBoolParameter(query.Get("VoiceEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeAllAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeAllAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeLocalAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeLocalAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeForeignAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeForeignAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	nearNumberParam := query.Get("NearNumber")
	nearLatLongParam := query.Get("NearLatLong")
	distanceParam, err := parseInt32Parameter(query.Get("Distance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inPostalCodeParam := query.Get("InPostalCode")
	inRegionParam := query.Get("InRegion")
	inRateCenterParam := query.Get("InRateCenter")
	inLataParam := query.Get("InLata")
	inLocalityParam := query.Get("InLocality")
	faxEnabledParam, err := parseBoolParameter(query.Get("FaxEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberSharedCost(r.Context(), accountSidParam, countryCodeParam, areaCodeParam, containsParam, smsEnabledParam, mmsEnabledParam, voiceEnabledParam, excludeAllAddressRequiredParam, excludeLocalAddressRequiredParam, excludeForeignAddressRequiredParam, betaParam, nearNumberParam, nearLatLongParam, distanceParam, inPostalCodeParam, inRegionParam, inRateCenterParam, inLataParam, inLocalityParam, faxEnabledParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberTollFree - 
func (c *DefaultApiController) ListAvailablePhoneNumberTollFree(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	areaCodeParam, err := parseInt32Parameter(query.Get("AreaCode"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containsParam := query.Get("Contains")
	smsEnabledParam, err := parseBoolParameter(query.Get("SmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	mmsEnabledParam, err := parseBoolParameter(query.Get("MmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	voiceEnabledParam, err := parseBoolParameter(query.Get("VoiceEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeAllAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeAllAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeLocalAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeLocalAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeForeignAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeForeignAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	nearNumberParam := query.Get("NearNumber")
	nearLatLongParam := query.Get("NearLatLong")
	distanceParam, err := parseInt32Parameter(query.Get("Distance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inPostalCodeParam := query.Get("InPostalCode")
	inRegionParam := query.Get("InRegion")
	inRateCenterParam := query.Get("InRateCenter")
	inLataParam := query.Get("InLata")
	inLocalityParam := query.Get("InLocality")
	faxEnabledParam, err := parseBoolParameter(query.Get("FaxEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberTollFree(r.Context(), accountSidParam, countryCodeParam, areaCodeParam, containsParam, smsEnabledParam, mmsEnabledParam, voiceEnabledParam, excludeAllAddressRequiredParam, excludeLocalAddressRequiredParam, excludeForeignAddressRequiredParam, betaParam, nearNumberParam, nearLatLongParam, distanceParam, inPostalCodeParam, inRegionParam, inRateCenterParam, inLataParam, inLocalityParam, faxEnabledParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListAvailablePhoneNumberVoip - 
func (c *DefaultApiController) ListAvailablePhoneNumberVoip(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	countryCodeParam := params["CountryCode"]
	
	areaCodeParam, err := parseInt32Parameter(query.Get("AreaCode"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containsParam := query.Get("Contains")
	smsEnabledParam, err := parseBoolParameter(query.Get("SmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	mmsEnabledParam, err := parseBoolParameter(query.Get("MmsEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	voiceEnabledParam, err := parseBoolParameter(query.Get("VoiceEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeAllAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeAllAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeLocalAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeLocalAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	excludeForeignAddressRequiredParam, err := parseBoolParameter(query.Get("ExcludeForeignAddressRequired"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	nearNumberParam := query.Get("NearNumber")
	nearLatLongParam := query.Get("NearLatLong")
	distanceParam, err := parseInt32Parameter(query.Get("Distance"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	inPostalCodeParam := query.Get("InPostalCode")
	inRegionParam := query.Get("InRegion")
	inRateCenterParam := query.Get("InRateCenter")
	inLataParam := query.Get("InLata")
	inLocalityParam := query.Get("InLocality")
	faxEnabledParam, err := parseBoolParameter(query.Get("FaxEnabled"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListAvailablePhoneNumberVoip(r.Context(), accountSidParam, countryCodeParam, areaCodeParam, containsParam, smsEnabledParam, mmsEnabledParam, voiceEnabledParam, excludeAllAddressRequiredParam, excludeLocalAddressRequiredParam, excludeForeignAddressRequiredParam, betaParam, nearNumberParam, nearLatLongParam, distanceParam, inPostalCodeParam, inRegionParam, inRateCenterParam, inLataParam, inLocalityParam, faxEnabledParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListCall - 
func (c *DefaultApiController) ListCall(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	toParam := query.Get("To")
	fromParam := query.Get("From")
	parentCallSidParam := query.Get("ParentCallSid")
	statusParam := query.Get("Status")
	startTimeParam := query.Get("StartTime")
	startTime2Param := query.Get("StartTime&lt;")
	startTime3Param := query.Get("StartTime&gt;")
	endTimeParam := query.Get("EndTime")
	endTime2Param := query.Get("EndTime&lt;")
	endTime3Param := query.Get("EndTime&gt;")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListCall(r.Context(), accountSidParam, toParam, fromParam, parentCallSidParam, statusParam, startTimeParam, startTime2Param, startTime3Param, endTimeParam, endTime2Param, endTime3Param, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListCallEvent - 
func (c *DefaultApiController) ListCallEvent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListCallEvent(r.Context(), accountSidParam, callSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListCallNotification - 
func (c *DefaultApiController) ListCallNotification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	logParam, err := parseInt32Parameter(query.Get("Log"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	messageDateParam := query.Get("MessageDate")
	messageDate2Param := query.Get("MessageDate&lt;")
	messageDate3Param := query.Get("MessageDate&gt;")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListCallNotification(r.Context(), accountSidParam, callSidParam, logParam, messageDateParam, messageDate2Param, messageDate3Param, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListCallRecording - 
func (c *DefaultApiController) ListCallRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	dateCreatedParam := query.Get("DateCreated")
	dateCreated2Param := query.Get("DateCreated&lt;")
	dateCreated3Param := query.Get("DateCreated&gt;")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListCallRecording(r.Context(), accountSidParam, callSidParam, dateCreatedParam, dateCreated2Param, dateCreated3Param, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListConference - 
func (c *DefaultApiController) ListConference(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	dateCreatedParam := query.Get("DateCreated")
	dateCreated2Param := query.Get("DateCreated&lt;")
	dateCreated3Param := query.Get("DateCreated&gt;")
	dateUpdatedParam := query.Get("DateUpdated")
	dateUpdated2Param := query.Get("DateUpdated&lt;")
	dateUpdated3Param := query.Get("DateUpdated&gt;")
	friendlyNameParam := query.Get("FriendlyName")
	statusParam := query.Get("Status")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListConference(r.Context(), accountSidParam, dateCreatedParam, dateCreated2Param, dateCreated3Param, dateUpdatedParam, dateUpdated2Param, dateUpdated3Param, friendlyNameParam, statusParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListConferenceRecording - 
func (c *DefaultApiController) ListConferenceRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	dateCreatedParam := query.Get("DateCreated")
	dateCreated2Param := query.Get("DateCreated&lt;")
	dateCreated3Param := query.Get("DateCreated&gt;")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListConferenceRecording(r.Context(), accountSidParam, conferenceSidParam, dateCreatedParam, dateCreated2Param, dateCreated3Param, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListConnectApp - 
func (c *DefaultApiController) ListConnectApp(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListConnectApp(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListDependentPhoneNumber - 
func (c *DefaultApiController) ListDependentPhoneNumber(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	addressSidParam := params["AddressSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListDependentPhoneNumber(r.Context(), accountSidParam, addressSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListIncomingPhoneNumber - 
func (c *DefaultApiController) ListIncomingPhoneNumber(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	friendlyNameParam := query.Get("FriendlyName")
	phoneNumberParam := query.Get("PhoneNumber")
	originParam := query.Get("Origin")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListIncomingPhoneNumber(r.Context(), accountSidParam, betaParam, friendlyNameParam, phoneNumberParam, originParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListIncomingPhoneNumberAssignedAddOn - 
func (c *DefaultApiController) ListIncomingPhoneNumberAssignedAddOn(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	resourceSidParam := params["ResourceSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListIncomingPhoneNumberAssignedAddOn(r.Context(), accountSidParam, resourceSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListIncomingPhoneNumberAssignedAddOnExtension - 
func (c *DefaultApiController) ListIncomingPhoneNumberAssignedAddOnExtension(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	resourceSidParam := params["ResourceSid"]
	
	assignedAddOnSidParam := params["AssignedAddOnSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListIncomingPhoneNumberAssignedAddOnExtension(r.Context(), accountSidParam, resourceSidParam, assignedAddOnSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListIncomingPhoneNumberLocal - 
func (c *DefaultApiController) ListIncomingPhoneNumberLocal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	friendlyNameParam := query.Get("FriendlyName")
	phoneNumberParam := query.Get("PhoneNumber")
	originParam := query.Get("Origin")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListIncomingPhoneNumberLocal(r.Context(), accountSidParam, betaParam, friendlyNameParam, phoneNumberParam, originParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListIncomingPhoneNumberMobile - 
func (c *DefaultApiController) ListIncomingPhoneNumberMobile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	friendlyNameParam := query.Get("FriendlyName")
	phoneNumberParam := query.Get("PhoneNumber")
	originParam := query.Get("Origin")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListIncomingPhoneNumberMobile(r.Context(), accountSidParam, betaParam, friendlyNameParam, phoneNumberParam, originParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListIncomingPhoneNumberTollFree - 
func (c *DefaultApiController) ListIncomingPhoneNumberTollFree(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	betaParam, err := parseBoolParameter(query.Get("Beta"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	friendlyNameParam := query.Get("FriendlyName")
	phoneNumberParam := query.Get("PhoneNumber")
	originParam := query.Get("Origin")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListIncomingPhoneNumberTollFree(r.Context(), accountSidParam, betaParam, friendlyNameParam, phoneNumberParam, originParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListKey - 
func (c *DefaultApiController) ListKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListKey(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListMedia - 
func (c *DefaultApiController) ListMedia(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	messageSidParam := params["MessageSid"]
	
	dateCreatedParam := query.Get("DateCreated")
	dateCreated2Param := query.Get("DateCreated&lt;")
	dateCreated3Param := query.Get("DateCreated&gt;")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListMedia(r.Context(), accountSidParam, messageSidParam, dateCreatedParam, dateCreated2Param, dateCreated3Param, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListMember - 
func (c *DefaultApiController) ListMember(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	queueSidParam := params["QueueSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListMember(r.Context(), accountSidParam, queueSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListMessage - 
func (c *DefaultApiController) ListMessage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	toParam := query.Get("To")
	fromParam := query.Get("From")
	dateSentParam := query.Get("DateSent")
	dateSent2Param := query.Get("DateSent&lt;")
	dateSent3Param := query.Get("DateSent&gt;")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListMessage(r.Context(), accountSidParam, toParam, fromParam, dateSentParam, dateSent2Param, dateSent3Param, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListNotification - 
func (c *DefaultApiController) ListNotification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	logParam, err := parseInt32Parameter(query.Get("Log"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	messageDateParam := query.Get("MessageDate")
	messageDate2Param := query.Get("MessageDate&lt;")
	messageDate3Param := query.Get("MessageDate&gt;")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListNotification(r.Context(), accountSidParam, logParam, messageDateParam, messageDate2Param, messageDate3Param, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListOutgoingCallerId - 
func (c *DefaultApiController) ListOutgoingCallerId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	phoneNumberParam := query.Get("PhoneNumber")
	friendlyNameParam := query.Get("FriendlyName")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListOutgoingCallerId(r.Context(), accountSidParam, phoneNumberParam, friendlyNameParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListParticipant - 
func (c *DefaultApiController) ListParticipant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	mutedParam, err := parseBoolParameter(query.Get("Muted"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	holdParam, err := parseBoolParameter(query.Get("Hold"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	coachingParam, err := parseBoolParameter(query.Get("Coaching"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListParticipant(r.Context(), accountSidParam, conferenceSidParam, mutedParam, holdParam, coachingParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListQueue - 
func (c *DefaultApiController) ListQueue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListQueue(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListRecording - 
func (c *DefaultApiController) ListRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	dateCreatedParam := query.Get("DateCreated")
	dateCreated2Param := query.Get("DateCreated&lt;")
	dateCreated3Param := query.Get("DateCreated&gt;")
	callSidParam := query.Get("CallSid")
	conferenceSidParam := query.Get("ConferenceSid")
	includeSoftDeletedParam, err := parseBoolParameter(query.Get("IncludeSoftDeleted"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListRecording(r.Context(), accountSidParam, dateCreatedParam, dateCreated2Param, dateCreated3Param, callSidParam, conferenceSidParam, includeSoftDeletedParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListRecordingAddOnResult - 
func (c *DefaultApiController) ListRecordingAddOnResult(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	referenceSidParam := params["ReferenceSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListRecordingAddOnResult(r.Context(), accountSidParam, referenceSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListRecordingAddOnResultPayload - 
func (c *DefaultApiController) ListRecordingAddOnResultPayload(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	referenceSidParam := params["ReferenceSid"]
	
	addOnResultSidParam := params["AddOnResultSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListRecordingAddOnResultPayload(r.Context(), accountSidParam, referenceSidParam, addOnResultSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListRecordingTranscription - 
func (c *DefaultApiController) ListRecordingTranscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	recordingSidParam := params["RecordingSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListRecordingTranscription(r.Context(), accountSidParam, recordingSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListShortCode - 
func (c *DefaultApiController) ListShortCode(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	friendlyNameParam := query.Get("FriendlyName")
	shortCodeParam := query.Get("ShortCode")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListShortCode(r.Context(), accountSidParam, friendlyNameParam, shortCodeParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSigningKey - 
func (c *DefaultApiController) ListSigningKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSigningKey(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipAuthCallsCredentialListMapping - 
func (c *DefaultApiController) ListSipAuthCallsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipAuthCallsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipAuthCallsIpAccessControlListMapping - 
func (c *DefaultApiController) ListSipAuthCallsIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipAuthCallsIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipAuthRegistrationsCredentialListMapping - 
func (c *DefaultApiController) ListSipAuthRegistrationsCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipAuthRegistrationsCredentialListMapping(r.Context(), accountSidParam, domainSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipCredential - 
func (c *DefaultApiController) ListSipCredential(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	credentialListSidParam := params["CredentialListSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipCredential(r.Context(), accountSidParam, credentialListSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipCredentialList - 
func (c *DefaultApiController) ListSipCredentialList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipCredentialList(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipCredentialListMapping - 
func (c *DefaultApiController) ListSipCredentialListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipCredentialListMapping(r.Context(), accountSidParam, domainSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipDomain - 
func (c *DefaultApiController) ListSipDomain(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipDomain(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipIpAccessControlList - 
func (c *DefaultApiController) ListSipIpAccessControlList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipIpAccessControlList(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipIpAccessControlListMapping - 
func (c *DefaultApiController) ListSipIpAccessControlListMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	domainSidParam := params["DomainSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipIpAccessControlListMapping(r.Context(), accountSidParam, domainSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListSipIpAddress - 
func (c *DefaultApiController) ListSipIpAddress(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	ipAccessControlListSidParam := params["IpAccessControlListSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListSipIpAddress(r.Context(), accountSidParam, ipAccessControlListSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListTranscription - 
func (c *DefaultApiController) ListTranscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListTranscription(r.Context(), accountSidParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecord - 
func (c *DefaultApiController) ListUsageRecord(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecord(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordAllTime - 
func (c *DefaultApiController) ListUsageRecordAllTime(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordAllTime(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordDaily - 
func (c *DefaultApiController) ListUsageRecordDaily(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordDaily(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordLastMonth - 
func (c *DefaultApiController) ListUsageRecordLastMonth(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordLastMonth(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordMonthly - 
func (c *DefaultApiController) ListUsageRecordMonthly(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordMonthly(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordThisMonth - 
func (c *DefaultApiController) ListUsageRecordThisMonth(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordThisMonth(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordToday - 
func (c *DefaultApiController) ListUsageRecordToday(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordToday(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordYearly - 
func (c *DefaultApiController) ListUsageRecordYearly(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordYearly(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageRecordYesterday - 
func (c *DefaultApiController) ListUsageRecordYesterday(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	categoryParam := query.Get("Category")
	startDateParam := query.Get("StartDate")
	endDateParam := query.Get("EndDate")
	includeSubaccountsParam, err := parseBoolParameter(query.Get("IncludeSubaccounts"))
	if err != nil {
		w.WriteHeader(500)
		return
	}
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageRecordYesterday(r.Context(), accountSidParam, categoryParam, startDateParam, endDateParam, includeSubaccountsParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// ListUsageTrigger - 
func (c *DefaultApiController) ListUsageTrigger(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	accountSidParam := params["AccountSid"]
	
	recurringParam := query.Get("Recurring")
	triggerByParam := query.Get("TriggerBy")
	usageCategoryParam := query.Get("UsageCategory")
	pageSizeParam, err := parseInt32Parameter(query.Get("PageSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ListUsageTrigger(r.Context(), accountSidParam, recurringParam, triggerByParam, usageCategoryParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateAccount - 
func (c *DefaultApiController) UpdateAccount(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	sidParam := params["Sid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
				statusParam := r.FormValue("Status")
	result, err := c.service.UpdateAccount(r.Context(), sidParam, friendlyNameParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateAddress - 
func (c *DefaultApiController) UpdateAddress(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				autoCorrectAddressParam := r.FormValue("AutoCorrectAddress")
				cityParam := r.FormValue("City")
				customerNameParam := r.FormValue("CustomerName")
				emergencyEnabledParam := r.FormValue("EmergencyEnabled")
				friendlyNameParam := r.FormValue("FriendlyName")
				postalCodeParam := r.FormValue("PostalCode")
				regionParam := r.FormValue("Region")
				streetParam := r.FormValue("Street")
	result, err := c.service.UpdateAddress(r.Context(), accountSidParam, sidParam, autoCorrectAddressParam, cityParam, customerNameParam, emergencyEnabledParam, friendlyNameParam, postalCodeParam, regionParam, streetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateApplication - 
func (c *DefaultApiController) UpdateApplication(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				apiVersionParam := r.FormValue("ApiVersion")
				friendlyNameParam := r.FormValue("FriendlyName")
				messageStatusCallbackParam := r.FormValue("MessageStatusCallback")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsStatusCallbackParam := r.FormValue("SmsStatusCallback")
				smsUrlParam := r.FormValue("SmsUrl")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				voiceCallerIdLookupParam := r.FormValue("VoiceCallerIdLookup")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.UpdateApplication(r.Context(), accountSidParam, sidParam, apiVersionParam, friendlyNameParam, messageStatusCallbackParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsStatusCallbackParam, smsUrlParam, statusCallbackParam, statusCallbackMethodParam, voiceCallerIdLookupParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateCall - 
func (c *DefaultApiController) UpdateCall(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				fallbackMethodParam := r.FormValue("FallbackMethod")
				fallbackUrlParam := r.FormValue("FallbackUrl")
				methodParam := r.FormValue("Method")
				statusParam := r.FormValue("Status")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
			
	timeLimitParam, err := parseInt32Parameter(r.FormValue("TimeLimit"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	timeLimitParam := r.FormValue("TimeLimit")
				twimlParam := r.FormValue("Twiml")
				urlParam := r.FormValue("Url")
	result, err := c.service.UpdateCall(r.Context(), accountSidParam, sidParam, fallbackMethodParam, fallbackUrlParam, methodParam, statusParam, statusCallbackParam, statusCallbackMethodParam, timeLimitParam, twimlParam, urlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateCallFeedback - 
func (c *DefaultApiController) UpdateCallFeedback(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
				issueParam := r.FormValue("Issue")
			
	qualityScoreParam, err := parseInt32Parameter(r.FormValue("QualityScore"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	qualityScoreParam := r.FormValue("QualityScore")
	result, err := c.service.UpdateCallFeedback(r.Context(), accountSidParam, callSidParam, issueParam, qualityScoreParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateCallRecording - 
func (c *DefaultApiController) UpdateCallRecording(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	sidParam := params["Sid"]
	
				statusParam := r.FormValue("Status")
				pauseBehaviorParam := r.FormValue("PauseBehavior")
	result, err := c.service.UpdateCallRecording(r.Context(), accountSidParam, callSidParam, sidParam, statusParam, pauseBehaviorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateConference - 
func (c *DefaultApiController) UpdateConference(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				announceMethodParam := r.FormValue("AnnounceMethod")
				announceUrlParam := r.FormValue("AnnounceUrl")
				statusParam := r.FormValue("Status")
	result, err := c.service.UpdateConference(r.Context(), accountSidParam, sidParam, announceMethodParam, announceUrlParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateConferenceRecording - 
func (c *DefaultApiController) UpdateConferenceRecording(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	sidParam := params["Sid"]
	
				statusParam := r.FormValue("Status")
				pauseBehaviorParam := r.FormValue("PauseBehavior")
	result, err := c.service.UpdateConferenceRecording(r.Context(), accountSidParam, conferenceSidParam, sidParam, statusParam, pauseBehaviorParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateConnectApp - 
func (c *DefaultApiController) UpdateConnectApp(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				authorizeRedirectUrlParam := r.FormValue("AuthorizeRedirectUrl")
				companyNameParam := r.FormValue("CompanyName")
				deauthorizeCallbackMethodParam := r.FormValue("DeauthorizeCallbackMethod")
				deauthorizeCallbackUrlParam := r.FormValue("DeauthorizeCallbackUrl")
				descriptionParam := r.FormValue("Description")
				friendlyNameParam := r.FormValue("FriendlyName")
				homepageUrlParam := r.FormValue("HomepageUrl")
				permissionsParam := r.FormValue("Permissions")
	result, err := c.service.UpdateConnectApp(r.Context(), accountSidParam, sidParam, authorizeRedirectUrlParam, companyNameParam, deauthorizeCallbackMethodParam, deauthorizeCallbackUrlParam, descriptionParam, friendlyNameParam, homepageUrlParam, permissionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateIncomingPhoneNumber - 
func (c *DefaultApiController) UpdateIncomingPhoneNumber(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				accountSid2Param := r.FormValue("AccountSid")
				addressSidParam := r.FormValue("AddressSid")
				apiVersionParam := r.FormValue("ApiVersion")
				bundleSidParam := r.FormValue("BundleSid")
				emergencyAddressSidParam := r.FormValue("EmergencyAddressSid")
				emergencyStatusParam := r.FormValue("EmergencyStatus")
				friendlyNameParam := r.FormValue("FriendlyName")
				identitySidParam := r.FormValue("IdentitySid")
				smsApplicationSidParam := r.FormValue("SmsApplicationSid")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsUrlParam := r.FormValue("SmsUrl")
				statusCallbackParam := r.FormValue("StatusCallback")
				statusCallbackMethodParam := r.FormValue("StatusCallbackMethod")
				trunkSidParam := r.FormValue("TrunkSid")
				voiceApplicationSidParam := r.FormValue("VoiceApplicationSid")
				voiceCallerIdLookupParam := r.FormValue("VoiceCallerIdLookup")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceReceiveModeParam := r.FormValue("VoiceReceiveMode")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.UpdateIncomingPhoneNumber(r.Context(), accountSidParam, sidParam, accountSid2Param, addressSidParam, apiVersionParam, bundleSidParam, emergencyAddressSidParam, emergencyStatusParam, friendlyNameParam, identitySidParam, smsApplicationSidParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsUrlParam, statusCallbackParam, statusCallbackMethodParam, trunkSidParam, voiceApplicationSidParam, voiceCallerIdLookupParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceReceiveModeParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateKey - 
func (c *DefaultApiController) UpdateKey(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.UpdateKey(r.Context(), accountSidParam, sidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateMember - 
func (c *DefaultApiController) UpdateMember(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	queueSidParam := params["QueueSid"]
	
	callSidParam := params["CallSid"]
	
				urlParam := r.FormValue("Url")
				methodParam := r.FormValue("Method")
	result, err := c.service.UpdateMember(r.Context(), accountSidParam, queueSidParam, callSidParam, urlParam, methodParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateMessage - 
func (c *DefaultApiController) UpdateMessage(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				bodyParam := r.FormValue("Body")
				statusParam := r.FormValue("Status")
	result, err := c.service.UpdateMessage(r.Context(), accountSidParam, sidParam, bodyParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateOutgoingCallerId - 
func (c *DefaultApiController) UpdateOutgoingCallerId(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.UpdateOutgoingCallerId(r.Context(), accountSidParam, sidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateParticipant - 
func (c *DefaultApiController) UpdateParticipant(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	conferenceSidParam := params["ConferenceSid"]
	
	callSidParam := params["CallSid"]
	
				announceMethodParam := r.FormValue("AnnounceMethod")
				announceUrlParam := r.FormValue("AnnounceUrl")
				beepOnExitParam := r.FormValue("BeepOnExit")
				callSidToCoachParam := r.FormValue("CallSidToCoach")
				coachingParam := r.FormValue("Coaching")
				endConferenceOnExitParam := r.FormValue("EndConferenceOnExit")
				holdParam := r.FormValue("Hold")
				holdMethodParam := r.FormValue("HoldMethod")
				holdUrlParam := r.FormValue("HoldUrl")
				mutedParam := r.FormValue("Muted")
				waitMethodParam := r.FormValue("WaitMethod")
				waitUrlParam := r.FormValue("WaitUrl")
	result, err := c.service.UpdateParticipant(r.Context(), accountSidParam, conferenceSidParam, callSidParam, announceMethodParam, announceUrlParam, beepOnExitParam, callSidToCoachParam, coachingParam, endConferenceOnExitParam, holdParam, holdMethodParam, holdUrlParam, mutedParam, waitMethodParam, waitUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdatePayments - 
func (c *DefaultApiController) UpdatePayments(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	sidParam := params["Sid"]
	
				idempotencyKeyParam := r.FormValue("IdempotencyKey")
				statusCallbackParam := r.FormValue("StatusCallback")
				captureParam := r.FormValue("Capture")
				statusParam := r.FormValue("Status")
	result, err := c.service.UpdatePayments(r.Context(), accountSidParam, callSidParam, sidParam, idempotencyKeyParam, statusCallbackParam, captureParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateQueue - 
func (c *DefaultApiController) UpdateQueue(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
			
	maxSizeParam, err := parseInt32Parameter(r.FormValue("MaxSize"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxSizeParam := r.FormValue("MaxSize")
	result, err := c.service.UpdateQueue(r.Context(), accountSidParam, sidParam, friendlyNameParam, maxSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateShortCode - 
func (c *DefaultApiController) UpdateShortCode(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				apiVersionParam := r.FormValue("ApiVersion")
				friendlyNameParam := r.FormValue("FriendlyName")
				smsFallbackMethodParam := r.FormValue("SmsFallbackMethod")
				smsFallbackUrlParam := r.FormValue("SmsFallbackUrl")
				smsMethodParam := r.FormValue("SmsMethod")
				smsUrlParam := r.FormValue("SmsUrl")
	result, err := c.service.UpdateShortCode(r.Context(), accountSidParam, sidParam, apiVersionParam, friendlyNameParam, smsFallbackMethodParam, smsFallbackUrlParam, smsMethodParam, smsUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateSigningKey - 
func (c *DefaultApiController) UpdateSigningKey(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.UpdateSigningKey(r.Context(), accountSidParam, sidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateSipCredential - 
func (c *DefaultApiController) UpdateSipCredential(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	credentialListSidParam := params["CredentialListSid"]
	
	sidParam := params["Sid"]
	
				passwordParam := r.FormValue("Password")
	result, err := c.service.UpdateSipCredential(r.Context(), accountSidParam, credentialListSidParam, sidParam, passwordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateSipCredentialList - 
func (c *DefaultApiController) UpdateSipCredentialList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.UpdateSipCredentialList(r.Context(), accountSidParam, sidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateSipDomain - 
func (c *DefaultApiController) UpdateSipDomain(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				byocTrunkSidParam := r.FormValue("ByocTrunkSid")
				domainNameParam := r.FormValue("DomainName")
				emergencyCallerSidParam := r.FormValue("EmergencyCallerSid")
				emergencyCallingEnabledParam := r.FormValue("EmergencyCallingEnabled")
				friendlyNameParam := r.FormValue("FriendlyName")
				secureParam := r.FormValue("Secure")
				sipRegistrationParam := r.FormValue("SipRegistration")
				voiceFallbackMethodParam := r.FormValue("VoiceFallbackMethod")
				voiceFallbackUrlParam := r.FormValue("VoiceFallbackUrl")
				voiceMethodParam := r.FormValue("VoiceMethod")
				voiceStatusCallbackMethodParam := r.FormValue("VoiceStatusCallbackMethod")
				voiceStatusCallbackUrlParam := r.FormValue("VoiceStatusCallbackUrl")
				voiceUrlParam := r.FormValue("VoiceUrl")
	result, err := c.service.UpdateSipDomain(r.Context(), accountSidParam, sidParam, byocTrunkSidParam, domainNameParam, emergencyCallerSidParam, emergencyCallingEnabledParam, friendlyNameParam, secureParam, sipRegistrationParam, voiceFallbackMethodParam, voiceFallbackUrlParam, voiceMethodParam, voiceStatusCallbackMethodParam, voiceStatusCallbackUrlParam, voiceUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateSipIpAccessControlList - 
func (c *DefaultApiController) UpdateSipIpAccessControlList(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.UpdateSipIpAccessControlList(r.Context(), accountSidParam, sidParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateSipIpAddress - 
func (c *DefaultApiController) UpdateSipIpAddress(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	ipAccessControlListSidParam := params["IpAccessControlListSid"]
	
	sidParam := params["Sid"]
	
			
	cidrPrefixLengthParam, err := parseInt32Parameter(r.FormValue("CidrPrefixLength"), false)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	cidrPrefixLengthParam := r.FormValue("CidrPrefixLength")
				friendlyNameParam := r.FormValue("FriendlyName")
				ipAddressParam := r.FormValue("IpAddress")
	result, err := c.service.UpdateSipIpAddress(r.Context(), accountSidParam, ipAccessControlListSidParam, sidParam, cidrPrefixLengthParam, friendlyNameParam, ipAddressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateSiprec - 
func (c *DefaultApiController) UpdateSiprec(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	sidParam := params["Sid"]
	
				statusParam := r.FormValue("Status")
	result, err := c.service.UpdateSiprec(r.Context(), accountSidParam, callSidParam, sidParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateStream - 
func (c *DefaultApiController) UpdateStream(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	callSidParam := params["CallSid"]
	
	sidParam := params["Sid"]
	
				statusParam := r.FormValue("Status")
	result, err := c.service.UpdateStream(r.Context(), accountSidParam, callSidParam, sidParam, statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}

// UpdateUsageTrigger - 
func (c *DefaultApiController) UpdateUsageTrigger(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	accountSidParam := params["AccountSid"]
	
	sidParam := params["Sid"]
	
				callbackMethodParam := r.FormValue("CallbackMethod")
				callbackUrlParam := r.FormValue("CallbackUrl")
				friendlyNameParam := r.FormValue("FriendlyName")
	result, err := c.service.UpdateUsageTrigger(r.Context(), accountSidParam, sidParam, callbackMethodParam, callbackUrlParam, friendlyNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, result.Headers, w)

}
