/*
Twilio - Api

This is the public Twilio REST API.

API version: 1.29.1
Contact: support@twilio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiV2010AccountUsageUsageTrigger struct for ApiV2010AccountUsageUsageTrigger
type ApiV2010AccountUsageUsageTrigger struct {
	// The SID of the Account that this trigger monitors
	AccountSid NullableString `json:"account_sid,omitempty"`
	// The API version used to create the resource
	ApiVersion NullableString `json:"api_version,omitempty"`
	// The HTTP method we use to call callback_url
	CallbackMethod NullableString `json:"callback_method,omitempty"`
	// he URL we call when the trigger fires
	CallbackUrl NullableString `json:"callback_url,omitempty"`
	// The current value of the field the trigger is watching
	CurrentValue NullableString `json:"current_value,omitempty"`
	// The RFC 2822 date and time in GMT that the resource was created
	DateCreated NullableString `json:"date_created,omitempty"`
	// The RFC 2822 date and time in GMT that the trigger was last fired
	DateFired NullableString `json:"date_fired,omitempty"`
	// The RFC 2822 date and time in GMT that the resource was last updated
	DateUpdated NullableString `json:"date_updated,omitempty"`
	// The string that you assigned to describe the trigger
	FriendlyName NullableString `json:"friendly_name,omitempty"`
	// The frequency of a recurring UsageTrigger
	Recurring NullableString `json:"recurring,omitempty"`
	// The unique string that identifies the resource
	Sid NullableString `json:"sid,omitempty"`
	// The field in the UsageRecord resource that fires the trigger
	TriggerBy NullableString `json:"trigger_by,omitempty"`
	// The value at which the trigger will fire
	TriggerValue NullableString `json:"trigger_value,omitempty"`
	// The URI of the resource, relative to `https://api.twilio.com`
	Uri NullableString `json:"uri,omitempty"`
	// The usage category the trigger watches
	UsageCategory NullableString `json:"usage_category,omitempty"`
	// The URI of the UsageRecord resource this trigger watches
	UsageRecordUri NullableString `json:"usage_record_uri,omitempty"`
}

// NewApiV2010AccountUsageUsageTrigger instantiates a new ApiV2010AccountUsageUsageTrigger object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV2010AccountUsageUsageTrigger() *ApiV2010AccountUsageUsageTrigger {
	this := ApiV2010AccountUsageUsageTrigger{}
	return &this
}

// NewApiV2010AccountUsageUsageTriggerWithDefaults instantiates a new ApiV2010AccountUsageUsageTrigger object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV2010AccountUsageUsageTriggerWithDefaults() *ApiV2010AccountUsageUsageTrigger {
	this := ApiV2010AccountUsageUsageTrigger{}
	return &this
}

// GetAccountSid returns the AccountSid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetAccountSid() string {
	if o == nil || o.AccountSid.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountSid.Get()
}

// GetAccountSidOk returns a tuple with the AccountSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetAccountSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountSid.Get(), o.AccountSid.IsSet()
}

// HasAccountSid returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasAccountSid() bool {
	if o != nil && o.AccountSid.IsSet() {
		return true
	}

	return false
}

// SetAccountSid gets a reference to the given NullableString and assigns it to the AccountSid field.
func (o *ApiV2010AccountUsageUsageTrigger) SetAccountSid(v string) {
	o.AccountSid.Set(&v)
}
// SetAccountSidNil sets the value for AccountSid to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetAccountSidNil() {
	o.AccountSid.Set(nil)
}

// UnsetAccountSid ensures that no value is present for AccountSid, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetAccountSid() {
	o.AccountSid.Unset()
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetApiVersion() string {
	if o == nil || o.ApiVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion.Get()
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiVersion.Get(), o.ApiVersion.IsSet()
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasApiVersion() bool {
	if o != nil && o.ApiVersion.IsSet() {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given NullableString and assigns it to the ApiVersion field.
func (o *ApiV2010AccountUsageUsageTrigger) SetApiVersion(v string) {
	o.ApiVersion.Set(&v)
}
// SetApiVersionNil sets the value for ApiVersion to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetApiVersionNil() {
	o.ApiVersion.Set(nil)
}

// UnsetApiVersion ensures that no value is present for ApiVersion, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetApiVersion() {
	o.ApiVersion.Unset()
}

// GetCallbackMethod returns the CallbackMethod field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetCallbackMethod() string {
	if o == nil || o.CallbackMethod.Get() == nil {
		var ret string
		return ret
	}
	return *o.CallbackMethod.Get()
}

// GetCallbackMethodOk returns a tuple with the CallbackMethod field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetCallbackMethodOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackMethod.Get(), o.CallbackMethod.IsSet()
}

// HasCallbackMethod returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasCallbackMethod() bool {
	if o != nil && o.CallbackMethod.IsSet() {
		return true
	}

	return false
}

// SetCallbackMethod gets a reference to the given NullableString and assigns it to the CallbackMethod field.
func (o *ApiV2010AccountUsageUsageTrigger) SetCallbackMethod(v string) {
	o.CallbackMethod.Set(&v)
}
// SetCallbackMethodNil sets the value for CallbackMethod to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetCallbackMethodNil() {
	o.CallbackMethod.Set(nil)
}

// UnsetCallbackMethod ensures that no value is present for CallbackMethod, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetCallbackMethod() {
	o.CallbackMethod.Unset()
}

// GetCallbackUrl returns the CallbackUrl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetCallbackUrl() string {
	if o == nil || o.CallbackUrl.Get() == nil {
		var ret string
		return ret
	}
	return *o.CallbackUrl.Get()
}

// GetCallbackUrlOk returns a tuple with the CallbackUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetCallbackUrlOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CallbackUrl.Get(), o.CallbackUrl.IsSet()
}

// HasCallbackUrl returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasCallbackUrl() bool {
	if o != nil && o.CallbackUrl.IsSet() {
		return true
	}

	return false
}

// SetCallbackUrl gets a reference to the given NullableString and assigns it to the CallbackUrl field.
func (o *ApiV2010AccountUsageUsageTrigger) SetCallbackUrl(v string) {
	o.CallbackUrl.Set(&v)
}
// SetCallbackUrlNil sets the value for CallbackUrl to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetCallbackUrlNil() {
	o.CallbackUrl.Set(nil)
}

// UnsetCallbackUrl ensures that no value is present for CallbackUrl, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetCallbackUrl() {
	o.CallbackUrl.Unset()
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetCurrentValue() string {
	if o == nil || o.CurrentValue.Get() == nil {
		var ret string
		return ret
	}
	return *o.CurrentValue.Get()
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetCurrentValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CurrentValue.Get(), o.CurrentValue.IsSet()
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasCurrentValue() bool {
	if o != nil && o.CurrentValue.IsSet() {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given NullableString and assigns it to the CurrentValue field.
func (o *ApiV2010AccountUsageUsageTrigger) SetCurrentValue(v string) {
	o.CurrentValue.Set(&v)
}
// SetCurrentValueNil sets the value for CurrentValue to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetCurrentValueNil() {
	o.CurrentValue.Set(nil)
}

// UnsetCurrentValue ensures that no value is present for CurrentValue, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetCurrentValue() {
	o.CurrentValue.Unset()
}

// GetDateCreated returns the DateCreated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetDateCreated() string {
	if o == nil || o.DateCreated.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateCreated.Get()
}

// GetDateCreatedOk returns a tuple with the DateCreated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetDateCreatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateCreated.Get(), o.DateCreated.IsSet()
}

// HasDateCreated returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasDateCreated() bool {
	if o != nil && o.DateCreated.IsSet() {
		return true
	}

	return false
}

// SetDateCreated gets a reference to the given NullableString and assigns it to the DateCreated field.
func (o *ApiV2010AccountUsageUsageTrigger) SetDateCreated(v string) {
	o.DateCreated.Set(&v)
}
// SetDateCreatedNil sets the value for DateCreated to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetDateCreatedNil() {
	o.DateCreated.Set(nil)
}

// UnsetDateCreated ensures that no value is present for DateCreated, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetDateCreated() {
	o.DateCreated.Unset()
}

// GetDateFired returns the DateFired field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetDateFired() string {
	if o == nil || o.DateFired.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateFired.Get()
}

// GetDateFiredOk returns a tuple with the DateFired field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetDateFiredOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateFired.Get(), o.DateFired.IsSet()
}

// HasDateFired returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasDateFired() bool {
	if o != nil && o.DateFired.IsSet() {
		return true
	}

	return false
}

// SetDateFired gets a reference to the given NullableString and assigns it to the DateFired field.
func (o *ApiV2010AccountUsageUsageTrigger) SetDateFired(v string) {
	o.DateFired.Set(&v)
}
// SetDateFiredNil sets the value for DateFired to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetDateFiredNil() {
	o.DateFired.Set(nil)
}

// UnsetDateFired ensures that no value is present for DateFired, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetDateFired() {
	o.DateFired.Unset()
}

// GetDateUpdated returns the DateUpdated field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetDateUpdated() string {
	if o == nil || o.DateUpdated.Get() == nil {
		var ret string
		return ret
	}
	return *o.DateUpdated.Get()
}

// GetDateUpdatedOk returns a tuple with the DateUpdated field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetDateUpdatedOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.DateUpdated.Get(), o.DateUpdated.IsSet()
}

// HasDateUpdated returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasDateUpdated() bool {
	if o != nil && o.DateUpdated.IsSet() {
		return true
	}

	return false
}

// SetDateUpdated gets a reference to the given NullableString and assigns it to the DateUpdated field.
func (o *ApiV2010AccountUsageUsageTrigger) SetDateUpdated(v string) {
	o.DateUpdated.Set(&v)
}
// SetDateUpdatedNil sets the value for DateUpdated to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetDateUpdatedNil() {
	o.DateUpdated.Set(nil)
}

// UnsetDateUpdated ensures that no value is present for DateUpdated, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetDateUpdated() {
	o.DateUpdated.Unset()
}

// GetFriendlyName returns the FriendlyName field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetFriendlyName() string {
	if o == nil || o.FriendlyName.Get() == nil {
		var ret string
		return ret
	}
	return *o.FriendlyName.Get()
}

// GetFriendlyNameOk returns a tuple with the FriendlyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetFriendlyNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.FriendlyName.Get(), o.FriendlyName.IsSet()
}

// HasFriendlyName returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasFriendlyName() bool {
	if o != nil && o.FriendlyName.IsSet() {
		return true
	}

	return false
}

// SetFriendlyName gets a reference to the given NullableString and assigns it to the FriendlyName field.
func (o *ApiV2010AccountUsageUsageTrigger) SetFriendlyName(v string) {
	o.FriendlyName.Set(&v)
}
// SetFriendlyNameNil sets the value for FriendlyName to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetFriendlyNameNil() {
	o.FriendlyName.Set(nil)
}

// UnsetFriendlyName ensures that no value is present for FriendlyName, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetFriendlyName() {
	o.FriendlyName.Unset()
}

// GetRecurring returns the Recurring field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetRecurring() string {
	if o == nil || o.Recurring.Get() == nil {
		var ret string
		return ret
	}
	return *o.Recurring.Get()
}

// GetRecurringOk returns a tuple with the Recurring field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetRecurringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Recurring.Get(), o.Recurring.IsSet()
}

// HasRecurring returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasRecurring() bool {
	if o != nil && o.Recurring.IsSet() {
		return true
	}

	return false
}

// SetRecurring gets a reference to the given NullableString and assigns it to the Recurring field.
func (o *ApiV2010AccountUsageUsageTrigger) SetRecurring(v string) {
	o.Recurring.Set(&v)
}
// SetRecurringNil sets the value for Recurring to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetRecurringNil() {
	o.Recurring.Set(nil)
}

// UnsetRecurring ensures that no value is present for Recurring, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetRecurring() {
	o.Recurring.Unset()
}

// GetSid returns the Sid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetSid() string {
	if o == nil || o.Sid.Get() == nil {
		var ret string
		return ret
	}
	return *o.Sid.Get()
}

// GetSidOk returns a tuple with the Sid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sid.Get(), o.Sid.IsSet()
}

// HasSid returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasSid() bool {
	if o != nil && o.Sid.IsSet() {
		return true
	}

	return false
}

// SetSid gets a reference to the given NullableString and assigns it to the Sid field.
func (o *ApiV2010AccountUsageUsageTrigger) SetSid(v string) {
	o.Sid.Set(&v)
}
// SetSidNil sets the value for Sid to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetSidNil() {
	o.Sid.Set(nil)
}

// UnsetSid ensures that no value is present for Sid, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetSid() {
	o.Sid.Unset()
}

// GetTriggerBy returns the TriggerBy field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetTriggerBy() string {
	if o == nil || o.TriggerBy.Get() == nil {
		var ret string
		return ret
	}
	return *o.TriggerBy.Get()
}

// GetTriggerByOk returns a tuple with the TriggerBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetTriggerByOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TriggerBy.Get(), o.TriggerBy.IsSet()
}

// HasTriggerBy returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasTriggerBy() bool {
	if o != nil && o.TriggerBy.IsSet() {
		return true
	}

	return false
}

// SetTriggerBy gets a reference to the given NullableString and assigns it to the TriggerBy field.
func (o *ApiV2010AccountUsageUsageTrigger) SetTriggerBy(v string) {
	o.TriggerBy.Set(&v)
}
// SetTriggerByNil sets the value for TriggerBy to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetTriggerByNil() {
	o.TriggerBy.Set(nil)
}

// UnsetTriggerBy ensures that no value is present for TriggerBy, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetTriggerBy() {
	o.TriggerBy.Unset()
}

// GetTriggerValue returns the TriggerValue field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetTriggerValue() string {
	if o == nil || o.TriggerValue.Get() == nil {
		var ret string
		return ret
	}
	return *o.TriggerValue.Get()
}

// GetTriggerValueOk returns a tuple with the TriggerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetTriggerValueOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TriggerValue.Get(), o.TriggerValue.IsSet()
}

// HasTriggerValue returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasTriggerValue() bool {
	if o != nil && o.TriggerValue.IsSet() {
		return true
	}

	return false
}

// SetTriggerValue gets a reference to the given NullableString and assigns it to the TriggerValue field.
func (o *ApiV2010AccountUsageUsageTrigger) SetTriggerValue(v string) {
	o.TriggerValue.Set(&v)
}
// SetTriggerValueNil sets the value for TriggerValue to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetTriggerValueNil() {
	o.TriggerValue.Set(nil)
}

// UnsetTriggerValue ensures that no value is present for TriggerValue, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetTriggerValue() {
	o.TriggerValue.Unset()
}

// GetUri returns the Uri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetUri() string {
	if o == nil || o.Uri.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uri.Get()
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uri.Get(), o.Uri.IsSet()
}

// HasUri returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasUri() bool {
	if o != nil && o.Uri.IsSet() {
		return true
	}

	return false
}

// SetUri gets a reference to the given NullableString and assigns it to the Uri field.
func (o *ApiV2010AccountUsageUsageTrigger) SetUri(v string) {
	o.Uri.Set(&v)
}
// SetUriNil sets the value for Uri to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetUriNil() {
	o.Uri.Set(nil)
}

// UnsetUri ensures that no value is present for Uri, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetUri() {
	o.Uri.Unset()
}

// GetUsageCategory returns the UsageCategory field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetUsageCategory() string {
	if o == nil || o.UsageCategory.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageCategory.Get()
}

// GetUsageCategoryOk returns a tuple with the UsageCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetUsageCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageCategory.Get(), o.UsageCategory.IsSet()
}

// HasUsageCategory returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasUsageCategory() bool {
	if o != nil && o.UsageCategory.IsSet() {
		return true
	}

	return false
}

// SetUsageCategory gets a reference to the given NullableString and assigns it to the UsageCategory field.
func (o *ApiV2010AccountUsageUsageTrigger) SetUsageCategory(v string) {
	o.UsageCategory.Set(&v)
}
// SetUsageCategoryNil sets the value for UsageCategory to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetUsageCategoryNil() {
	o.UsageCategory.Set(nil)
}

// UnsetUsageCategory ensures that no value is present for UsageCategory, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetUsageCategory() {
	o.UsageCategory.Unset()
}

// GetUsageRecordUri returns the UsageRecordUri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageTrigger) GetUsageRecordUri() string {
	if o == nil || o.UsageRecordUri.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageRecordUri.Get()
}

// GetUsageRecordUriOk returns a tuple with the UsageRecordUri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageTrigger) GetUsageRecordUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageRecordUri.Get(), o.UsageRecordUri.IsSet()
}

// HasUsageRecordUri returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageTrigger) HasUsageRecordUri() bool {
	if o != nil && o.UsageRecordUri.IsSet() {
		return true
	}

	return false
}

// SetUsageRecordUri gets a reference to the given NullableString and assigns it to the UsageRecordUri field.
func (o *ApiV2010AccountUsageUsageTrigger) SetUsageRecordUri(v string) {
	o.UsageRecordUri.Set(&v)
}
// SetUsageRecordUriNil sets the value for UsageRecordUri to be an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) SetUsageRecordUriNil() {
	o.UsageRecordUri.Set(nil)
}

// UnsetUsageRecordUri ensures that no value is present for UsageRecordUri, not even an explicit nil
func (o *ApiV2010AccountUsageUsageTrigger) UnsetUsageRecordUri() {
	o.UsageRecordUri.Unset()
}

func (o ApiV2010AccountUsageUsageTrigger) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountSid.IsSet() {
		toSerialize["account_sid"] = o.AccountSid.Get()
	}
	if o.ApiVersion.IsSet() {
		toSerialize["api_version"] = o.ApiVersion.Get()
	}
	if o.CallbackMethod.IsSet() {
		toSerialize["callback_method"] = o.CallbackMethod.Get()
	}
	if o.CallbackUrl.IsSet() {
		toSerialize["callback_url"] = o.CallbackUrl.Get()
	}
	if o.CurrentValue.IsSet() {
		toSerialize["current_value"] = o.CurrentValue.Get()
	}
	if o.DateCreated.IsSet() {
		toSerialize["date_created"] = o.DateCreated.Get()
	}
	if o.DateFired.IsSet() {
		toSerialize["date_fired"] = o.DateFired.Get()
	}
	if o.DateUpdated.IsSet() {
		toSerialize["date_updated"] = o.DateUpdated.Get()
	}
	if o.FriendlyName.IsSet() {
		toSerialize["friendly_name"] = o.FriendlyName.Get()
	}
	if o.Recurring.IsSet() {
		toSerialize["recurring"] = o.Recurring.Get()
	}
	if o.Sid.IsSet() {
		toSerialize["sid"] = o.Sid.Get()
	}
	if o.TriggerBy.IsSet() {
		toSerialize["trigger_by"] = o.TriggerBy.Get()
	}
	if o.TriggerValue.IsSet() {
		toSerialize["trigger_value"] = o.TriggerValue.Get()
	}
	if o.Uri.IsSet() {
		toSerialize["uri"] = o.Uri.Get()
	}
	if o.UsageCategory.IsSet() {
		toSerialize["usage_category"] = o.UsageCategory.Get()
	}
	if o.UsageRecordUri.IsSet() {
		toSerialize["usage_record_uri"] = o.UsageRecordUri.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableApiV2010AccountUsageUsageTrigger struct {
	value *ApiV2010AccountUsageUsageTrigger
	isSet bool
}

func (v NullableApiV2010AccountUsageUsageTrigger) Get() *ApiV2010AccountUsageUsageTrigger {
	return v.value
}

func (v *NullableApiV2010AccountUsageUsageTrigger) Set(val *ApiV2010AccountUsageUsageTrigger) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV2010AccountUsageUsageTrigger) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV2010AccountUsageUsageTrigger) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV2010AccountUsageUsageTrigger(val *ApiV2010AccountUsageUsageTrigger) *NullableApiV2010AccountUsageUsageTrigger {
	return &NullableApiV2010AccountUsageUsageTrigger{value: val, isSet: true}
}

func (v NullableApiV2010AccountUsageUsageTrigger) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV2010AccountUsageUsageTrigger) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


