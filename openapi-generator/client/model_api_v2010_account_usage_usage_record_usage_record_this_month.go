/*
Twilio - Api

This is the public Twilio REST API.

API version: 1.29.1
Contact: support@twilio.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ApiV2010AccountUsageUsageRecordUsageRecordThisMonth struct for ApiV2010AccountUsageUsageRecordUsageRecordThisMonth
type ApiV2010AccountUsageUsageRecordUsageRecordThisMonth struct {
	// The SID of the Account accrued the usage
	AccountSid NullableString `json:"account_sid,omitempty"`
	// The API version used to create the resource
	ApiVersion NullableString `json:"api_version,omitempty"`
	// Usage records up to date as of this timestamp
	AsOf NullableString `json:"as_of,omitempty"`
	// The category of usage
	Category NullableString `json:"category,omitempty"`
	// The number of usage events
	Count NullableString `json:"count,omitempty"`
	// The units in which count is measured
	CountUnit NullableString `json:"count_unit,omitempty"`
	// A plain-language description of the usage category
	Description NullableString `json:"description,omitempty"`
	// The last date for which usage is included in the UsageRecord
	EndDate NullableString `json:"end_date,omitempty"`
	// The total price of the usage
	Price NullableFloat32 `json:"price,omitempty"`
	// The currency in which `price` is measured
	PriceUnit NullableString `json:"price_unit,omitempty"`
	// The first date for which usage is included in this UsageRecord
	StartDate NullableString `json:"start_date,omitempty"`
	// A list of related resources identified by their relative URIs
	SubresourceUris map[string]interface{} `json:"subresource_uris,omitempty"`
	// The URI of the resource, relative to `https://api.twilio.com`
	Uri NullableString `json:"uri,omitempty"`
	// The amount of usage
	Usage NullableString `json:"usage,omitempty"`
	// The units in which usage is measured
	UsageUnit NullableString `json:"usage_unit,omitempty"`
}

// NewApiV2010AccountUsageUsageRecordUsageRecordThisMonth instantiates a new ApiV2010AccountUsageUsageRecordUsageRecordThisMonth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewApiV2010AccountUsageUsageRecordUsageRecordThisMonth() *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth {
	this := ApiV2010AccountUsageUsageRecordUsageRecordThisMonth{}
	return &this
}

// NewApiV2010AccountUsageUsageRecordUsageRecordThisMonthWithDefaults instantiates a new ApiV2010AccountUsageUsageRecordUsageRecordThisMonth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewApiV2010AccountUsageUsageRecordUsageRecordThisMonthWithDefaults() *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth {
	this := ApiV2010AccountUsageUsageRecordUsageRecordThisMonth{}
	return &this
}

// GetAccountSid returns the AccountSid field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetAccountSid() string {
	if o == nil || o.AccountSid.Get() == nil {
		var ret string
		return ret
	}
	return *o.AccountSid.Get()
}

// GetAccountSidOk returns a tuple with the AccountSid field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetAccountSidOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccountSid.Get(), o.AccountSid.IsSet()
}

// HasAccountSid returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasAccountSid() bool {
	if o != nil && o.AccountSid.IsSet() {
		return true
	}

	return false
}

// SetAccountSid gets a reference to the given NullableString and assigns it to the AccountSid field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetAccountSid(v string) {
	o.AccountSid.Set(&v)
}
// SetAccountSidNil sets the value for AccountSid to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetAccountSidNil() {
	o.AccountSid.Set(nil)
}

// UnsetAccountSid ensures that no value is present for AccountSid, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetAccountSid() {
	o.AccountSid.Unset()
}

// GetApiVersion returns the ApiVersion field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetApiVersion() string {
	if o == nil || o.ApiVersion.Get() == nil {
		var ret string
		return ret
	}
	return *o.ApiVersion.Get()
}

// GetApiVersionOk returns a tuple with the ApiVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetApiVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ApiVersion.Get(), o.ApiVersion.IsSet()
}

// HasApiVersion returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasApiVersion() bool {
	if o != nil && o.ApiVersion.IsSet() {
		return true
	}

	return false
}

// SetApiVersion gets a reference to the given NullableString and assigns it to the ApiVersion field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetApiVersion(v string) {
	o.ApiVersion.Set(&v)
}
// SetApiVersionNil sets the value for ApiVersion to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetApiVersionNil() {
	o.ApiVersion.Set(nil)
}

// UnsetApiVersion ensures that no value is present for ApiVersion, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetApiVersion() {
	o.ApiVersion.Unset()
}

// GetAsOf returns the AsOf field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetAsOf() string {
	if o == nil || o.AsOf.Get() == nil {
		var ret string
		return ret
	}
	return *o.AsOf.Get()
}

// GetAsOfOk returns a tuple with the AsOf field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetAsOfOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.AsOf.Get(), o.AsOf.IsSet()
}

// HasAsOf returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasAsOf() bool {
	if o != nil && o.AsOf.IsSet() {
		return true
	}

	return false
}

// SetAsOf gets a reference to the given NullableString and assigns it to the AsOf field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetAsOf(v string) {
	o.AsOf.Set(&v)
}
// SetAsOfNil sets the value for AsOf to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetAsOfNil() {
	o.AsOf.Set(nil)
}

// UnsetAsOf ensures that no value is present for AsOf, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetAsOf() {
	o.AsOf.Unset()
}

// GetCategory returns the Category field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetCategory() string {
	if o == nil || o.Category.Get() == nil {
		var ret string
		return ret
	}
	return *o.Category.Get()
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Category.Get(), o.Category.IsSet()
}

// HasCategory returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasCategory() bool {
	if o != nil && o.Category.IsSet() {
		return true
	}

	return false
}

// SetCategory gets a reference to the given NullableString and assigns it to the Category field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetCategory(v string) {
	o.Category.Set(&v)
}
// SetCategoryNil sets the value for Category to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetCategoryNil() {
	o.Category.Set(nil)
}

// UnsetCategory ensures that no value is present for Category, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetCategory() {
	o.Category.Unset()
}

// GetCount returns the Count field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetCount() string {
	if o == nil || o.Count.Get() == nil {
		var ret string
		return ret
	}
	return *o.Count.Get()
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetCountOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Count.Get(), o.Count.IsSet()
}

// HasCount returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasCount() bool {
	if o != nil && o.Count.IsSet() {
		return true
	}

	return false
}

// SetCount gets a reference to the given NullableString and assigns it to the Count field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetCount(v string) {
	o.Count.Set(&v)
}
// SetCountNil sets the value for Count to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetCountNil() {
	o.Count.Set(nil)
}

// UnsetCount ensures that no value is present for Count, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetCount() {
	o.Count.Unset()
}

// GetCountUnit returns the CountUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetCountUnit() string {
	if o == nil || o.CountUnit.Get() == nil {
		var ret string
		return ret
	}
	return *o.CountUnit.Get()
}

// GetCountUnitOk returns a tuple with the CountUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetCountUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.CountUnit.Get(), o.CountUnit.IsSet()
}

// HasCountUnit returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasCountUnit() bool {
	if o != nil && o.CountUnit.IsSet() {
		return true
	}

	return false
}

// SetCountUnit gets a reference to the given NullableString and assigns it to the CountUnit field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetCountUnit(v string) {
	o.CountUnit.Set(&v)
}
// SetCountUnitNil sets the value for CountUnit to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetCountUnitNil() {
	o.CountUnit.Set(nil)
}

// UnsetCountUnit ensures that no value is present for CountUnit, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetCountUnit() {
	o.CountUnit.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetDescription() string {
	if o == nil || o.Description.Get() == nil {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetDescription() {
	o.Description.Unset()
}

// GetEndDate returns the EndDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetEndDate() string {
	if o == nil || o.EndDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.EndDate.Get()
}

// GetEndDateOk returns a tuple with the EndDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetEndDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.EndDate.Get(), o.EndDate.IsSet()
}

// HasEndDate returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasEndDate() bool {
	if o != nil && o.EndDate.IsSet() {
		return true
	}

	return false
}

// SetEndDate gets a reference to the given NullableString and assigns it to the EndDate field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetEndDate(v string) {
	o.EndDate.Set(&v)
}
// SetEndDateNil sets the value for EndDate to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetEndDateNil() {
	o.EndDate.Set(nil)
}

// UnsetEndDate ensures that no value is present for EndDate, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetEndDate() {
	o.EndDate.Unset()
}

// GetPrice returns the Price field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetPrice() float32 {
	if o == nil || o.Price.Get() == nil {
		var ret float32
		return ret
	}
	return *o.Price.Get()
}

// GetPriceOk returns a tuple with the Price field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetPriceOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Price.Get(), o.Price.IsSet()
}

// HasPrice returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasPrice() bool {
	if o != nil && o.Price.IsSet() {
		return true
	}

	return false
}

// SetPrice gets a reference to the given NullableFloat32 and assigns it to the Price field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetPrice(v float32) {
	o.Price.Set(&v)
}
// SetPriceNil sets the value for Price to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetPriceNil() {
	o.Price.Set(nil)
}

// UnsetPrice ensures that no value is present for Price, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetPrice() {
	o.Price.Unset()
}

// GetPriceUnit returns the PriceUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetPriceUnit() string {
	if o == nil || o.PriceUnit.Get() == nil {
		var ret string
		return ret
	}
	return *o.PriceUnit.Get()
}

// GetPriceUnitOk returns a tuple with the PriceUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetPriceUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.PriceUnit.Get(), o.PriceUnit.IsSet()
}

// HasPriceUnit returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasPriceUnit() bool {
	if o != nil && o.PriceUnit.IsSet() {
		return true
	}

	return false
}

// SetPriceUnit gets a reference to the given NullableString and assigns it to the PriceUnit field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetPriceUnit(v string) {
	o.PriceUnit.Set(&v)
}
// SetPriceUnitNil sets the value for PriceUnit to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetPriceUnitNil() {
	o.PriceUnit.Set(nil)
}

// UnsetPriceUnit ensures that no value is present for PriceUnit, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetPriceUnit() {
	o.PriceUnit.Unset()
}

// GetStartDate returns the StartDate field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetStartDate() string {
	if o == nil || o.StartDate.Get() == nil {
		var ret string
		return ret
	}
	return *o.StartDate.Get()
}

// GetStartDateOk returns a tuple with the StartDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetStartDateOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.StartDate.Get(), o.StartDate.IsSet()
}

// HasStartDate returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasStartDate() bool {
	if o != nil && o.StartDate.IsSet() {
		return true
	}

	return false
}

// SetStartDate gets a reference to the given NullableString and assigns it to the StartDate field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetStartDate(v string) {
	o.StartDate.Set(&v)
}
// SetStartDateNil sets the value for StartDate to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetStartDateNil() {
	o.StartDate.Set(nil)
}

// UnsetStartDate ensures that no value is present for StartDate, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetStartDate() {
	o.StartDate.Unset()
}

// GetSubresourceUris returns the SubresourceUris field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetSubresourceUris() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.SubresourceUris
}

// GetSubresourceUrisOk returns a tuple with the SubresourceUris field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetSubresourceUrisOk() (map[string]interface{}, bool) {
	if o == nil || o.SubresourceUris == nil {
		return nil, false
	}
	return o.SubresourceUris, true
}

// HasSubresourceUris returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasSubresourceUris() bool {
	if o != nil && o.SubresourceUris != nil {
		return true
	}

	return false
}

// SetSubresourceUris gets a reference to the given map[string]interface{} and assigns it to the SubresourceUris field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetSubresourceUris(v map[string]interface{}) {
	o.SubresourceUris = v
}

// GetUri returns the Uri field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetUri() string {
	if o == nil || o.Uri.Get() == nil {
		var ret string
		return ret
	}
	return *o.Uri.Get()
}

// GetUriOk returns a tuple with the Uri field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetUriOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Uri.Get(), o.Uri.IsSet()
}

// HasUri returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasUri() bool {
	if o != nil && o.Uri.IsSet() {
		return true
	}

	return false
}

// SetUri gets a reference to the given NullableString and assigns it to the Uri field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetUri(v string) {
	o.Uri.Set(&v)
}
// SetUriNil sets the value for Uri to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetUriNil() {
	o.Uri.Set(nil)
}

// UnsetUri ensures that no value is present for Uri, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetUri() {
	o.Uri.Unset()
}

// GetUsage returns the Usage field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetUsage() string {
	if o == nil || o.Usage.Get() == nil {
		var ret string
		return ret
	}
	return *o.Usage.Get()
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetUsageOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Usage.Get(), o.Usage.IsSet()
}

// HasUsage returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasUsage() bool {
	if o != nil && o.Usage.IsSet() {
		return true
	}

	return false
}

// SetUsage gets a reference to the given NullableString and assigns it to the Usage field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetUsage(v string) {
	o.Usage.Set(&v)
}
// SetUsageNil sets the value for Usage to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetUsageNil() {
	o.Usage.Set(nil)
}

// UnsetUsage ensures that no value is present for Usage, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetUsage() {
	o.Usage.Unset()
}

// GetUsageUnit returns the UsageUnit field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetUsageUnit() string {
	if o == nil || o.UsageUnit.Get() == nil {
		var ret string
		return ret
	}
	return *o.UsageUnit.Get()
}

// GetUsageUnitOk returns a tuple with the UsageUnit field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) GetUsageUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.UsageUnit.Get(), o.UsageUnit.IsSet()
}

// HasUsageUnit returns a boolean if a field has been set.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) HasUsageUnit() bool {
	if o != nil && o.UsageUnit.IsSet() {
		return true
	}

	return false
}

// SetUsageUnit gets a reference to the given NullableString and assigns it to the UsageUnit field.
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetUsageUnit(v string) {
	o.UsageUnit.Set(&v)
}
// SetUsageUnitNil sets the value for UsageUnit to be an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) SetUsageUnitNil() {
	o.UsageUnit.Set(nil)
}

// UnsetUsageUnit ensures that no value is present for UsageUnit, not even an explicit nil
func (o *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnsetUsageUnit() {
	o.UsageUnit.Unset()
}

func (o ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AccountSid.IsSet() {
		toSerialize["account_sid"] = o.AccountSid.Get()
	}
	if o.ApiVersion.IsSet() {
		toSerialize["api_version"] = o.ApiVersion.Get()
	}
	if o.AsOf.IsSet() {
		toSerialize["as_of"] = o.AsOf.Get()
	}
	if o.Category.IsSet() {
		toSerialize["category"] = o.Category.Get()
	}
	if o.Count.IsSet() {
		toSerialize["count"] = o.Count.Get()
	}
	if o.CountUnit.IsSet() {
		toSerialize["count_unit"] = o.CountUnit.Get()
	}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.EndDate.IsSet() {
		toSerialize["end_date"] = o.EndDate.Get()
	}
	if o.Price.IsSet() {
		toSerialize["price"] = o.Price.Get()
	}
	if o.PriceUnit.IsSet() {
		toSerialize["price_unit"] = o.PriceUnit.Get()
	}
	if o.StartDate.IsSet() {
		toSerialize["start_date"] = o.StartDate.Get()
	}
	if o.SubresourceUris != nil {
		toSerialize["subresource_uris"] = o.SubresourceUris
	}
	if o.Uri.IsSet() {
		toSerialize["uri"] = o.Uri.Get()
	}
	if o.Usage.IsSet() {
		toSerialize["usage"] = o.Usage.Get()
	}
	if o.UsageUnit.IsSet() {
		toSerialize["usage_unit"] = o.UsageUnit.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth struct {
	value *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth
	isSet bool
}

func (v NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth) Get() *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth {
	return v.value
}

func (v *NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth) Set(val *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) {
	v.value = val
	v.isSet = true
}

func (v NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth) IsSet() bool {
	return v.isSet
}

func (v *NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth(val *ApiV2010AccountUsageUsageRecordUsageRecordThisMonth) *NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth {
	return &NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth{value: val, isSet: true}
}

func (v NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableApiV2010AccountUsageUsageRecordUsageRecordThisMonth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


